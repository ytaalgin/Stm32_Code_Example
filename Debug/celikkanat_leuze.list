
celikkanat_leuze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000864c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080087e0  080087e0  000097e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c40  08008c40  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c40  08008c40  00009c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c48  08008c48  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008c50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          00000244  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aac8  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c30  00000000  00000000  00014cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  00016900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000729  00000000  00000000  00017268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021de9  00000000  00000000  00017991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0c8  00000000  00000000  0003977a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab3e  00000000  00000000  00045842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110380  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ad8  00000000  00000000  001103c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00113e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087c4 	.word	0x080087c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080087c4 	.word	0x080087c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_RTCEx_WakeUpTimerEventCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	static RTC_TimeTypeDef sTime;

    // Get current time
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000fec:	2200      	movs	r2, #0
 8000fee:	491b      	ldr	r1, [pc, #108]	@ (800105c <HAL_RTCEx_WakeUpTimerEventCallback+0x78>)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 f994 	bl	800331e <HAL_RTC_GetTime>
    mseconds += (sTime.SubSeconds * 1000) / (sTime.SecondFraction + 1);
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_RTCEx_WakeUpTimerEventCallback+0x78>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ffe:	fb03 f202 	mul.w	r2, r3, r2
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_RTCEx_WakeUpTimerEventCallback+0x78>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	3301      	adds	r3, #1
 8001008:	fbb2 f2f3 	udiv	r2, r2, r3
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_RTCEx_WakeUpTimerEventCallback+0x7c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <HAL_RTCEx_WakeUpTimerEventCallback+0x7c>)
 8001014:	6013      	str	r3, [r2, #0]

    elapsedSeconds++;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_RTCEx_WakeUpTimerEventCallback+0x80>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a11      	ldr	r2, [pc, #68]	@ (8001064 <HAL_RTCEx_WakeUpTimerEventCallback+0x80>)
 800101e:	6013      	str	r3, [r2, #0]

    sonUcHane = mseconds % 1000;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_RTCEx_WakeUpTimerEventCallback+0x7c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_RTCEx_WakeUpTimerEventCallback+0x84>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	099b      	lsrs	r3, r3, #6
 800102c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_RTCEx_WakeUpTimerEventCallback+0x88>)
 8001038:	6013      	str	r3, [r2, #0]
    baslangicZamani = elapsedSeconds * 1000 + (1000 - sonUcHane);
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_RTCEx_WakeUpTimerEventCallback+0x80>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001042:	fb03 f202 	mul.w	r2, r3, r2
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_RTCEx_WakeUpTimerEventCallback+0x88>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001050:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002b4 	.word	0x200002b4
 8001060:	200002b0 	.word	0x200002b0
 8001064:	2000029c 	.word	0x2000029c
 8001068:	10624dd3 	.word	0x10624dd3
 800106c:	200002ac 	.word	0x200002ac
 8001070:	200002a8 	.word	0x200002a8
 8001074:	00000000 	.word	0x00000000

08001078 <main>:

int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b0a2      	sub	sp, #136	@ 0x88
 800107c:	af04      	add	r7, sp, #16
  HAL_Init();
 800107e:	f000 ff5b 	bl	8001f38 <HAL_Init>
  SystemClock_Config();
 8001082:	f000 fc23 	bl	80018cc <SystemClock_Config>
  MX_GPIO_Init();
 8001086:	f000 fd1b 	bl	8001ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800108a:	f000 fcef 	bl	8001a6c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800108e:	f000 fc89 	bl	80019a4 <MX_RTC_Init>

  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); // Deactivate WakeUp Timer
 8001092:	4861      	ldr	r0, [pc, #388]	@ (8001218 <main+0x1a0>)
 8001094:	f002 fba6 	bl	80037e4 <HAL_RTCEx_DeactivateWakeUpTimer>

  RTC_TimeTypeDef sTime;

  // Set initial time
  sTime.Hours = 18;
 8001098:	2312      	movs	r3, #18
 800109a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  sTime.Minutes = 50;
 800109e:	2332      	movs	r3, #50	@ 0x32
 80010a0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	485a      	ldr	r0, [pc, #360]	@ (8001218 <main+0x1a0>)
 80010ae:	f002 f89c 	bl	80031ea <HAL_RTC_SetTime>

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80010b8:	4857      	ldr	r0, [pc, #348]	@ (8001218 <main+0x1a0>)
 80010ba:	f002 fad1 	bl	8003660 <HAL_RTCEx_SetWakeUpTimer_IT>

	while (1) {

	  deger1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80010be:	2120      	movs	r1, #32
 80010c0:	4856      	ldr	r0, [pc, #344]	@ (800121c <main+0x1a4>)
 80010c2:	f001 fa7d 	bl	80025c0 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <main+0x1a8>)
 80010cc:	601a      	str	r2, [r3, #0]

	  if (mesafe1 < 82) {
 80010ce:	4b55      	ldr	r3, [pc, #340]	@ (8001224 <main+0x1ac>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001228 <main+0x1b0>
 80010d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d55b      	bpl.n	800119a <main+0x122>
		if (deger1 == 1 && isRead) {
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <main+0x1a8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d117      	bne.n	800111a <main+0xa2>
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <main+0x1b4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d013      	beq.n	800111a <main+0xa2>
		  simdikiZaman = baslangicZamani - degertut;
 80010f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <main+0x1b8>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001234 <main+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001238 <main+0x1c0>)
 80010fe:	6013      	str	r3, [r2, #0]
		  degertut = baslangicZamani;
 8001100:	4b4b      	ldr	r3, [pc, #300]	@ (8001230 <main+0x1b8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4b      	ldr	r2, [pc, #300]	@ (8001234 <main+0x1bc>)
 8001106:	6013      	str	r3, [r2, #0]
		  sayac1++;
 8001108:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <main+0x1c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <main+0x1c4>)
 8001110:	6013      	str	r3, [r2, #0]
		  isRead = false;
 8001112:	4b46      	ldr	r3, [pc, #280]	@ (800122c <main+0x1b4>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e010      	b.n	800113c <main+0xc4>
		}
		else if (deger1 == 0 && mesafe1 != 82) {
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <main+0x1a8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <main+0xc4>
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <main+0x1ac>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001228 <main+0x1b0>
 800112c:	eef4 7a47 	vcmp.f32	s15, s14
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d002      	beq.n	800113c <main+0xc4>
		  isRead = true;
 8001136:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <main+0x1b4>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		}
		if (sayac1 >= 1) {
 800113c:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <main+0x1c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd2a      	ble.n	800119a <main+0x122>
		  mesafe1 = 6 + ((sayac1 - 1) * 4);
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <main+0x1c4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	3306      	adds	r3, #6
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <main+0x1ac>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
		  eskiMesafe = 6 + ((sayac1 - 2) * 4);
 800115c:	4b37      	ldr	r3, [pc, #220]	@ (800123c <main+0x1c4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b02      	subs	r3, #2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	3306      	adds	r3, #6
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <main+0x1c8>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
		  hiz = (mesafe1 - eskiMesafe) / (simdikiZaman);
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <main+0x1ac>)
 8001176:	ed93 7a00 	vldr	s14, [r3]
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <main+0x1c8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001184:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <main+0x1c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <main+0x1cc>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
		}
	  }
/**************************************************************************************************************************/
	  if (mesafe1 >= 82 && mesafe2 < 5.95) {
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <main+0x1ac>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001228 <main+0x1b0>
 80011a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	f2c0 80bd 	blt.w	800132a <main+0x2b2>
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <main+0x1d0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	a315      	add	r3, pc, #84	@ (adr r3, 8001210 <main+0x198>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fc8c 	bl	8000adc <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80af 	beq.w	800132a <main+0x2b2>
		mesafe1 = 82;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <main+0x1ac>)
 80011ce:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <main+0x1d4>)
 80011d0:	601a      	str	r2, [r3, #0]
		if (deger1 == 1 && isRead) {
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <main+0x1a8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d13c      	bne.n	8001254 <main+0x1dc>
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <main+0x1b4>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d038      	beq.n	8001254 <main+0x1dc>
		  simdikiZaman = baslangicZamani - degertut;
 80011e2:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <main+0x1b8>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <main+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <main+0x1c0>)
 80011ee:	6013      	str	r3, [r2, #0]
		  degertut = baslangicZamani;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <main+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <main+0x1bc>)
 80011f6:	6013      	str	r3, [r2, #0]
		  sayac2++;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <main+0x1d8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <main+0x1d8>)
 8001200:	6013      	str	r3, [r2, #0]
		  isRead = false;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <main+0x1b4>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e038      	b.n	800127c <main+0x204>
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	4017cccc 	.word	0x4017cccc
 8001218:	200001f4 	.word	0x200001f4
 800121c:	40020000 	.word	0x40020000
 8001220:	2000025c 	.word	0x2000025c
 8001224:	20000278 	.word	0x20000278
 8001228:	42a40000 	.word	0x42a40000
 800122c:	20000000 	.word	0x20000000
 8001230:	200002a8 	.word	0x200002a8
 8001234:	200002a4 	.word	0x200002a4
 8001238:	200002a0 	.word	0x200002a0
 800123c:	20000264 	.word	0x20000264
 8001240:	2000028c 	.word	0x2000028c
 8001244:	20000294 	.word	0x20000294
 8001248:	2000027c 	.word	0x2000027c
 800124c:	42a40000 	.word	0x42a40000
 8001250:	20000268 	.word	0x20000268
		}
		else if (deger1 == 0 && mesafe2 != 5.95) {
 8001254:	4ba4      	ldr	r3, [pc, #656]	@ (80014e8 <main+0x470>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <main+0x204>
 800125c:	4ba3      	ldr	r3, [pc, #652]	@ (80014ec <main+0x474>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	a396      	add	r3, pc, #600	@ (adr r3, 80014c0 <main+0x448>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <main+0x204>
		  isRead = true;
 8001276:	4b9e      	ldr	r3, [pc, #632]	@ (80014f0 <main+0x478>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
		}
		if (sayac2 >= 1) {
 800127c:	4b9d      	ldr	r3, [pc, #628]	@ (80014f4 <main+0x47c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd52      	ble.n	800132a <main+0x2b2>
		  mesafe2 = (0.05 * (2 * sayac2 - 1) + 4) ;
 8001284:	4b9b      	ldr	r3, [pc, #620]	@ (80014f4 <main+0x47c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	3b01      	subs	r3, #1
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f949 	bl	8000524 <__aeabi_i2d>
 8001292:	a38d      	add	r3, pc, #564	@ (adr r3, 80014c8 <main+0x450>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ae 	bl	80005f8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b93      	ldr	r3, [pc, #588]	@ (80014f8 <main+0x480>)
 80012aa:	f7fe ffef 	bl	800028c <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a8b      	ldr	r2, [pc, #556]	@ (80014ec <main+0x474>)
 80012be:	6013      	str	r3, [r2, #0]
		  eskiMesafe = (0.05 * (2 * sayac2 - 2) + 4);
 80012c0:	4b8c      	ldr	r3, [pc, #560]	@ (80014f4 <main+0x47c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f92b 	bl	8000524 <__aeabi_i2d>
 80012ce:	a37e      	add	r3, pc, #504	@ (adr r3, 80014c8 <main+0x450>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f990 	bl	80005f8 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <main+0x480>)
 80012e6:	f7fe ffd1 	bl	800028c <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc79 	bl	8000be8 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a80      	ldr	r2, [pc, #512]	@ (80014fc <main+0x484>)
 80012fa:	6013      	str	r3, [r2, #0]
		  hiz = ((mesafe2 - eskiMesafe) / (simdikiZaman))*100;
 80012fc:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <main+0x474>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <main+0x484>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee77 6a67 	vsub.f32	s13, s14, s15
 800130c:	4b7c      	ldr	r3, [pc, #496]	@ (8001500 <main+0x488>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001504 <main+0x48c>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <main+0x490>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
		}
	  }
/**************************************************************************************************************************/
	  if (mesafe2 >= 5.95 && mesafe3 < 46.05) {
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <main+0x474>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	a362      	add	r3, pc, #392	@ (adr r3, 80014c0 <main+0x448>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fbe3 	bl	8000b04 <__aeabi_dcmpge>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8081 	beq.w	8001448 <main+0x3d0>
 8001346:	4b71      	ldr	r3, [pc, #452]	@ (800150c <main+0x494>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	a35f      	add	r3, pc, #380	@ (adr r3, 80014d0 <main+0x458>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff fbc1 	bl	8000adc <__aeabi_dcmplt>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d073      	beq.n	8001448 <main+0x3d0>
		  mesafe2 = 5.95;
 8001360:	4b62      	ldr	r3, [pc, #392]	@ (80014ec <main+0x474>)
 8001362:	4a6b      	ldr	r2, [pc, #428]	@ (8001510 <main+0x498>)
 8001364:	601a      	str	r2, [r3, #0]
		  if (deger1 == 1 && isRead) {
 8001366:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <main+0x470>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d117      	bne.n	800139e <main+0x326>
 800136e:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <main+0x478>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d013      	beq.n	800139e <main+0x326>
			  simdikiZaman = baslangicZamani - degertut;
 8001376:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <main+0x49c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b67      	ldr	r3, [pc, #412]	@ (8001518 <main+0x4a0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a5f      	ldr	r2, [pc, #380]	@ (8001500 <main+0x488>)
 8001382:	6013      	str	r3, [r2, #0]
			  degertut = baslangicZamani;
 8001384:	4b63      	ldr	r3, [pc, #396]	@ (8001514 <main+0x49c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a63      	ldr	r2, [pc, #396]	@ (8001518 <main+0x4a0>)
 800138a:	6013      	str	r3, [r2, #0]
			  sayac3++;
 800138c:	4b63      	ldr	r3, [pc, #396]	@ (800151c <main+0x4a4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a62      	ldr	r2, [pc, #392]	@ (800151c <main+0x4a4>)
 8001394:	6013      	str	r3, [r2, #0]
			  isRead = false;
 8001396:	4b56      	ldr	r3, [pc, #344]	@ (80014f0 <main+0x478>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e013      	b.n	80013c6 <main+0x34e>
		  }
		  else if (deger1 == 0 && mesafe3 != 46.05) {
 800139e:	4b52      	ldr	r3, [pc, #328]	@ (80014e8 <main+0x470>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10f      	bne.n	80013c6 <main+0x34e>
 80013a6:	4b59      	ldr	r3, [pc, #356]	@ (800150c <main+0x494>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8cc 	bl	8000548 <__aeabi_f2d>
 80013b0:	a347      	add	r3, pc, #284	@ (adr r3, 80014d0 <main+0x458>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <main+0x34e>
			  isRead = true;
 80013c0:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <main+0x478>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
		  }
		  if (sayac3 >= 1) {
 80013c6:	4b55      	ldr	r3, [pc, #340]	@ (800151c <main+0x4a4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dd3c      	ble.n	8001448 <main+0x3d0>
			  mesafe3 =(2.05 + (sayac3 - 1) * 4) ;
 80013ce:	4b53      	ldr	r3, [pc, #332]	@ (800151c <main+0x4a4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8a4 	bl	8000524 <__aeabi_i2d>
 80013dc:	a33e      	add	r3, pc, #248	@ (adr r3, 80014d8 <main+0x460>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7fe ff53 	bl	800028c <__adddf3>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fbfb 	bl	8000be8 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a45      	ldr	r2, [pc, #276]	@ (800150c <main+0x494>)
 80013f6:	6013      	str	r3, [r2, #0]
			  eskiMesafe =(2.05 + (sayac3 - 2) * 4) ;
 80013f8:	4b48      	ldr	r3, [pc, #288]	@ (800151c <main+0x4a4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b02      	subs	r3, #2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f88f 	bl	8000524 <__aeabi_i2d>
 8001406:	a334      	add	r3, pc, #208	@ (adr r3, 80014d8 <main+0x460>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7fe ff3e 	bl	800028c <__adddf3>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbe6 	bl	8000be8 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	4a37      	ldr	r2, [pc, #220]	@ (80014fc <main+0x484>)
 8001420:	6013      	str	r3, [r2, #0]
			  hiz = (mesafe3 - eskiMesafe) / (simdikiZaman);
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <main+0x494>)
 8001424:	ed93 7a00 	vldr	s14, [r3]
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <main+0x484>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <main+0x488>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <main+0x490>)
 8001444:	edc3 7a00 	vstr	s15, [r3]
		  }
		}
/*************************************************************************************************************************/
		if (mesafe3 >= 46.05 && mesafe4 < 4.95) {
 8001448:	4b30      	ldr	r3, [pc, #192]	@ (800150c <main+0x494>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	a31f      	add	r3, pc, #124	@ (adr r3, 80014d0 <main+0x458>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff fb54 	bl	8000b04 <__aeabi_dcmpge>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80cf 	beq.w	8001602 <main+0x58a>
 8001464:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <main+0x4a8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	a31c      	add	r3, pc, #112	@ (adr r3, 80014e0 <main+0x468>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff fb32 	bl	8000adc <__aeabi_dcmplt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80c1 	beq.w	8001602 <main+0x58a>
		  mesafe3 = 46.05;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <main+0x494>)
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <main+0x4ac>)
 8001484:	601a      	str	r2, [r3, #0]
		  if (deger1 == 1 && isRead) {
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <main+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d14e      	bne.n	800152c <main+0x4b4>
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <main+0x478>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d04a      	beq.n	800152c <main+0x4b4>
			  simdikiZaman = baslangicZamani - degertut;
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <main+0x49c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <main+0x4a0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <main+0x488>)
 80014a2:	6013      	str	r3, [r2, #0]
			  degertut = baslangicZamani;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <main+0x49c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <main+0x4a0>)
 80014aa:	6013      	str	r3, [r2, #0]
			  sayac4++;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <main+0x4b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <main+0x4b0>)
 80014b4:	6013      	str	r3, [r2, #0]
			  isRead = false;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <main+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e04a      	b.n	8001554 <main+0x4dc>
 80014be:	bf00      	nop
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	4017cccc 	.word	0x4017cccc
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fa99999 	.word	0x3fa99999
 80014d0:	66666666 	.word	0x66666666
 80014d4:	40470666 	.word	0x40470666
 80014d8:	66666666 	.word	0x66666666
 80014dc:	40006666 	.word	0x40006666
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	4013cccc 	.word	0x4013cccc
 80014e8:	2000025c 	.word	0x2000025c
 80014ec:	2000027c 	.word	0x2000027c
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000268 	.word	0x20000268
 80014f8:	40100000 	.word	0x40100000
 80014fc:	2000028c 	.word	0x2000028c
 8001500:	200002a0 	.word	0x200002a0
 8001504:	42c80000 	.word	0x42c80000
 8001508:	20000294 	.word	0x20000294
 800150c:	20000280 	.word	0x20000280
 8001510:	40be6666 	.word	0x40be6666
 8001514:	200002a8 	.word	0x200002a8
 8001518:	200002a4 	.word	0x200002a4
 800151c:	2000026c 	.word	0x2000026c
 8001520:	20000284 	.word	0x20000284
 8001524:	42383333 	.word	0x42383333
 8001528:	20000270 	.word	0x20000270
		  }
		  else if (deger1 == 0 && mesafe4 != 4.95) {
 800152c:	4b58      	ldr	r3, [pc, #352]	@ (8001690 <main+0x618>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <main+0x4dc>
 8001534:	4b57      	ldr	r3, [pc, #348]	@ (8001694 <main+0x61c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001678 <main+0x600>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <main+0x4dc>
			  isRead = true;
 800154e:	4b52      	ldr	r3, [pc, #328]	@ (8001698 <main+0x620>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
		  }
		  if (sayac4 >= 1) {
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <main+0x624>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd52      	ble.n	8001602 <main+0x58a>
			  mesafe4 = (0.05 * (2 * sayac4 - 1)) + 4 ;
 800155c:	4b4f      	ldr	r3, [pc, #316]	@ (800169c <main+0x624>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffdd 	bl	8000524 <__aeabi_i2d>
 800156a:	a345      	add	r3, pc, #276	@ (adr r3, 8001680 <main+0x608>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f842 	bl	80005f8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <main+0x628>)
 8001582:	f7fe fe83 	bl	800028c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb2b 	bl	8000be8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <main+0x61c>)
 8001596:	6013      	str	r3, [r2, #0]
			  eskiMesafe = (0.05 * (2 * sayac4 - 2)) + 4 ;
 8001598:	4b40      	ldr	r3, [pc, #256]	@ (800169c <main+0x624>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	a336      	add	r3, pc, #216	@ (adr r3, 8001680 <main+0x608>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f824 	bl	80005f8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <main+0x628>)
 80015be:	f7fe fe65 	bl	800028c <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fb0d 	bl	8000be8 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <main+0x62c>)
 80015d2:	6013      	str	r3, [r2, #0]
			  hiz = ((mesafe4 - eskiMesafe) / (simdikiZaman))*100;
 80015d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <main+0x61c>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <main+0x62c>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <main+0x630>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80016ac <main+0x634>
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <main+0x638>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
		  }
		}
/**************************************************************************************************************************/
		if (mesafe4 >= 4.95 && mesafe5 < 47.05) {
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <main+0x61c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001678 <main+0x600>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff fa77 	bl	8000b04 <__aeabi_dcmpge>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80aa 	beq.w	8001772 <main+0x6fa>
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <main+0x63c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	a317      	add	r3, pc, #92	@ (adr r3, 8001688 <main+0x610>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff fa55 	bl	8000adc <__aeabi_dcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 809c 	beq.w	8001772 <main+0x6fa>
		  mesafe4 = 4.95;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <main+0x61c>)
 800163c:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <main+0x640>)
 800163e:	601a      	str	r2, [r3, #0]
		  if (deger1 == 1 && isRead) {
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <main+0x618>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d13f      	bne.n	80016c8 <main+0x650>
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <main+0x620>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d03b      	beq.n	80016c8 <main+0x650>
			  simdikiZaman = baslangicZamani - degertut;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <main+0x644>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <main+0x648>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <main+0x630>)
 800165c:	6013      	str	r3, [r2, #0]
			  degertut = baslangicZamani;
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <main+0x644>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <main+0x648>)
 8001664:	6013      	str	r3, [r2, #0]
			  sayac5++;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <main+0x64c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <main+0x64c>)
 800166e:	6013      	str	r3, [r2, #0]
			  isRead = false;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <main+0x620>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e03b      	b.n	80016f0 <main+0x678>
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	4013cccc 	.word	0x4013cccc
 8001680:	9999999a 	.word	0x9999999a
 8001684:	3fa99999 	.word	0x3fa99999
 8001688:	66666666 	.word	0x66666666
 800168c:	40478666 	.word	0x40478666
 8001690:	2000025c 	.word	0x2000025c
 8001694:	20000284 	.word	0x20000284
 8001698:	20000000 	.word	0x20000000
 800169c:	20000270 	.word	0x20000270
 80016a0:	40100000 	.word	0x40100000
 80016a4:	2000028c 	.word	0x2000028c
 80016a8:	200002a0 	.word	0x200002a0
 80016ac:	42c80000 	.word	0x42c80000
 80016b0:	20000294 	.word	0x20000294
 80016b4:	20000288 	.word	0x20000288
 80016b8:	409e6666 	.word	0x409e6666
 80016bc:	200002a8 	.word	0x200002a8
 80016c0:	200002a4 	.word	0x200002a4
 80016c4:	20000274 	.word	0x20000274
		  }
		  else if (deger1 == 0 && mesafe5 != 47.05) {
 80016c8:	4b69      	ldr	r3, [pc, #420]	@ (8001870 <main+0x7f8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10f      	bne.n	80016f0 <main+0x678>
 80016d0:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <main+0x7fc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	a361      	add	r3, pc, #388	@ (adr r3, 8001860 <main+0x7e8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <main+0x678>
			  isRead = true;
 80016ea:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <main+0x800>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
		  }
		  if (sayac5 >= 1) {
 80016f0:	4b62      	ldr	r3, [pc, #392]	@ (800187c <main+0x804>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd3c      	ble.n	8001772 <main+0x6fa>
			  mesafe5 =((sayac5 - 1) * 4) + 3.05;
 80016f8:	4b60      	ldr	r3, [pc, #384]	@ (800187c <main+0x804>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff0f 	bl	8000524 <__aeabi_i2d>
 8001706:	a358      	add	r3, pc, #352	@ (adr r3, 8001868 <main+0x7f0>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe fdbe 	bl	800028c <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa66 	bl	8000be8 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a55      	ldr	r2, [pc, #340]	@ (8001874 <main+0x7fc>)
 8001720:	6013      	str	r3, [r2, #0]
			  eskiMesafe =((sayac5 - 2) * 4) + 3.05;
 8001722:	4b56      	ldr	r3, [pc, #344]	@ (800187c <main+0x804>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3b02      	subs	r3, #2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fefa 	bl	8000524 <__aeabi_i2d>
 8001730:	a34d      	add	r3, pc, #308	@ (adr r3, 8001868 <main+0x7f0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fda9 	bl	800028c <__adddf3>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa51 	bl	8000be8 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	4a4d      	ldr	r2, [pc, #308]	@ (8001880 <main+0x808>)
 800174a:	6013      	str	r3, [r2, #0]
			  hiz = (mesafe5 - eskiMesafe) / (simdikiZaman);
 800174c:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <main+0x7fc>)
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <main+0x808>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee77 6a67 	vsub.f32	s13, s14, s15
 800175c:	4b49      	ldr	r3, [pc, #292]	@ (8001884 <main+0x80c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <main+0x810>)
 800176e:	edc3 7a00 	vstr	s15, [r3]
		  }
		}

		if (mesafe5 >= 47.05) {
 8001772:	4b40      	ldr	r3, [pc, #256]	@ (8001874 <main+0x7fc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fee6 	bl	8000548 <__aeabi_f2d>
 800177c:	a338      	add	r3, pc, #224	@ (adr r3, 8001860 <main+0x7e8>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f9bf 	bl	8000b04 <__aeabi_dcmpge>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <main+0x720>
		  mesafe5 = 47.05;
 800178c:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <main+0x7fc>)
 800178e:	4a3f      	ldr	r2, [pc, #252]	@ (800188c <main+0x814>)
 8001790:	601a      	str	r2, [r3, #0]
		  isRead = false;
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <main+0x800>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
		}
/**************************************************************************************************************************/
		mesafetoplam = mesafe1 + mesafe2 + mesafe3 + mesafe4 + mesafe5;
 8001798:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <main+0x818>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <main+0x81c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <main+0x820>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b2:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <main+0x824>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <main+0x7fc>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <main+0x828>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
		sayactop = sayac1 + sayac2 + sayac3 + sayac4 + sayac5;
 80017cc:	4b35      	ldr	r3, [pc, #212]	@ (80018a4 <main+0x82c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <main+0x830>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	441a      	add	r2, r3
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <main+0x834>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	441a      	add	r2, r3
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <main+0x838>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	441a      	add	r2, r3
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <main+0x804>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a32      	ldr	r2, [pc, #200]	@ (80018b4 <main+0x83c>)
 80017ea:	6013      	str	r3, [r2, #0]
		hizson = hiz * 1000;
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <main+0x810>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80018b8 <main+0x840>
 80017f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fa:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <main+0x844>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]

		char buffer[100];
		sprintf(buffer, "%.2f\t %.2f\t %lu\n\r", mesafetoplam, hizson, baslangicZamani);
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <main+0x828>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe9f 	bl	8000548 <__aeabi_f2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <main+0x844>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe98 	bl	8000548 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4928      	ldr	r1, [pc, #160]	@ (80018c0 <main+0x848>)
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	4638      	mov	r0, r7
 8001822:	9102      	str	r1, [sp, #8]
 8001824:	e9cd 2300 	strd	r2, r3, [sp]
 8001828:	4622      	mov	r2, r4
 800182a:	462b      	mov	r3, r5
 800182c:	4925      	ldr	r1, [pc, #148]	@ (80018c4 <main+0x84c>)
 800182e:	f003 fb8f 	bl	8004f50 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001832:	463b      	mov	r3, r7
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fd1b 	bl	8000270 <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	4639      	mov	r1, r7
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	4820      	ldr	r0, [pc, #128]	@ (80018c8 <main+0x850>)
 8001846:	f002 f899 	bl	800397c <HAL_UART_Transmit>

		HAL_Delay(10); // Adjust delay as needed
 800184a:	200a      	movs	r0, #10
 800184c:	f000 fbe6 	bl	800201c <HAL_Delay>
		baslangicZamani += 10;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <main+0x848>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	330a      	adds	r3, #10
 8001856:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <main+0x848>)
 8001858:	6013      	str	r3, [r2, #0]
	while (1) {
 800185a:	e430      	b.n	80010be <main+0x46>
 800185c:	f3af 8000 	nop.w
 8001860:	66666666 	.word	0x66666666
 8001864:	40478666 	.word	0x40478666
 8001868:	66666666 	.word	0x66666666
 800186c:	40086666 	.word	0x40086666
 8001870:	2000025c 	.word	0x2000025c
 8001874:	20000288 	.word	0x20000288
 8001878:	20000000 	.word	0x20000000
 800187c:	20000274 	.word	0x20000274
 8001880:	2000028c 	.word	0x2000028c
 8001884:	200002a0 	.word	0x200002a0
 8001888:	20000294 	.word	0x20000294
 800188c:	423c3333 	.word	0x423c3333
 8001890:	20000278 	.word	0x20000278
 8001894:	2000027c 	.word	0x2000027c
 8001898:	20000280 	.word	0x20000280
 800189c:	20000284 	.word	0x20000284
 80018a0:	20000290 	.word	0x20000290
 80018a4:	20000264 	.word	0x20000264
 80018a8:	20000268 	.word	0x20000268
 80018ac:	2000026c 	.word	0x2000026c
 80018b0:	20000270 	.word	0x20000270
 80018b4:	20000260 	.word	0x20000260
 80018b8:	447a0000 	.word	0x447a0000
 80018bc:	20000298 	.word	0x20000298
 80018c0:	200002a8 	.word	0x200002a8
 80018c4:	080087e0 	.word	0x080087e0
 80018c8:	20000214 	.word	0x20000214

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	@ 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2230      	movs	r2, #48	@ 0x30
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fb9b 	bl	8005016 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	4b29      	ldr	r3, [pc, #164]	@ (800199c <SystemClock_Config+0xd0>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4a28      	ldr	r2, [pc, #160]	@ (800199c <SystemClock_Config+0xd0>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <SystemClock_Config+0xd0>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <SystemClock_Config+0xd4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <SystemClock_Config+0xd4>)
 8001916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <SystemClock_Config+0xd4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001928:	230a      	movs	r3, #10
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001930:	2310      	movs	r3, #16
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001938:	2302      	movs	r3, #2
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800193c:	2300      	movs	r3, #0
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001940:	2308      	movs	r3, #8
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001944:	2332      	movs	r3, #50	@ 0x32
 8001946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001948:	2302      	movs	r3, #2
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800194c:	2307      	movs	r3, #7
 800194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fe4b 	bl	80025f0 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001960:	f000 f8ea 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001970:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001976:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800197a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f001 f8ac 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800198e:	f000 f8d3 	bl	8001b38 <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3750      	adds	r7, #80	@ 0x50
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019be:	4a2a      	ldr	r2, [pc, #168]	@ (8001a68 <MX_RTC_Init+0xc4>)
 80019c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019c8:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019ca:	227f      	movs	r2, #127	@ 0x7f
 80019cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019d0:	22ff      	movs	r2, #255	@ 0xff
 80019d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019d4:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019e6:	481f      	ldr	r0, [pc, #124]	@ (8001a64 <MX_RTC_Init+0xc0>)
 80019e8:	f001 fb7c 	bl	80030e4 <HAL_RTC_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019f2:	f000 f8a1 	bl	8001b38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <MX_RTC_Init+0xc0>)
 8001a12:	f001 fbea 	bl	80031ea <HAL_RTC_SetTime>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001a1c:	f000 f88c 	bl	8001b38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a20:	2301      	movs	r3, #1
 8001a22:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a24:	2301      	movs	r3, #1
 8001a26:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	2201      	movs	r2, #1
 8001a34:	4619      	mov	r1, r3
 8001a36:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <MX_RTC_Init+0xc0>)
 8001a38:	f001 fccf 	bl	80033da <HAL_RTC_SetDate>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001a42:	f000 f879 	bl	8001b38 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_RTC_Init+0xc0>)
 8001a4c:	f001 fe08 	bl	8003660 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001a56:	f000 f86f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001f4 	.word	0x200001f4
 8001a68:	40002800 	.word	0x40002800

08001a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <MX_USART2_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	f001 ff1a 	bl	80038dc <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f000 f843 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000214 	.word	0x20000214
 8001abc:	40004400 	.word	0x40004400

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MX_GPIO_Init+0x70>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_GPIO_Init+0x74>)
 8001b22:	f000 fbb1 	bl	8002288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3e:	b672      	cpsid	i
}
 8001b40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
        char error_message[] = "hata\n";
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <Error_Handler+0x3c>)
 8001b44:	463b      	mov	r3, r7
 8001b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4a:	6018      	str	r0, [r3, #0]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	8019      	strh	r1, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8001b50:	463b      	mov	r3, r7
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fb8c 	bl	8000270 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4639      	mov	r1, r7
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <Error_Handler+0x40>)
 8001b64:	f001 ff0a 	bl	800397c <HAL_UART_Transmit>
        HAL_Delay(1000); // Adjust delay as needed
 8001b68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6c:	f000 fa56 	bl	800201c <HAL_Delay>
  while (1) {
 8001b70:	bf00      	nop
 8001b72:	e7e6      	b.n	8001b42 <Error_Handler+0xa>
 8001b74:	080087f4 	.word	0x080087f4
 8001b78:	20000214 	.word	0x20000214

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f000 fb22 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a10      	ldr	r2, [pc, #64]	@ (8001c28 <HAL_RTC_MspInit+0x5c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d119      	bne.n	8001c20 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bec:	2302      	movs	r3, #2
 8001bee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 f990 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c06:	f7ff ff97 	bl	8001b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_RTC_MspInit+0x60>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 fb00 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	f000 fb19 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40002800 	.word	0x40002800
 8001c2c:	42470e3c 	.word	0x42470e3c

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_UART_MspInit+0x84>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12b      	bne.n	8001caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <HAL_UART_MspInit+0x8c>)
 8001ca6:	f000 faef 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	@ 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40004400 	.word	0x40004400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f961 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <RTC_WKUP_IRQHandler+0x10>)
 8001d26:	f001 fdb5 	bl	8003894 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200001f4 	.word	0x200001f4

08001d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_kill>:

int _kill(int pid, int sig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d4e:	f003 f9b5 	bl	80050bc <__errno>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2216      	movs	r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
  return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_exit>:

void _exit (int status)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffe7 	bl	8001d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d76:	bf00      	nop
 8001d78:	e7fd      	b.n	8001d76 <_exit+0x12>

08001d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e00a      	b.n	8001da2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8c:	f3af 8000 	nop.w
 8001d90:	4601      	mov	r1, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbf0      	blt.n	8001d8c <_read+0x12>
  }

  return len;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e009      	b.n	8001dda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbf1      	blt.n	8001dc6 <_write+0x12>
  }
  return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_close>:

int _close(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e14:	605a      	str	r2, [r3, #4]
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_isatty>:

int _isatty(int file)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f003 f91a 	bl	80050bc <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20020000 	.word	0x20020000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200002c8 	.word	0x200002c8
 8001ebc:	20000420 	.word	0x20000420

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ee8:	f7ff ffea 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f003 f8d9 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff f8af 	bl	8001078 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f28:	08008c50 	.word	0x08008c50
  ldr r2, =_sbss
 8001f2c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f30:	2000041c 	.word	0x2000041c

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f94f 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fe06 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f967 	bl	800226e <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 f92f 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000008 	.word	0x20000008

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	200002cc 	.word	0x200002cc

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200002cc 	.word	0x200002cc

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e16b      	b.n	800257c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 815a 	bne.w	8002576 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80b4 	beq.w	8002576 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b60      	ldr	r3, [pc, #384]	@ (8002594 <HAL_GPIO_Init+0x30c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a5f      	ldr	r2, [pc, #380]	@ (8002594 <HAL_GPIO_Init+0x30c>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b5d      	ldr	r3, [pc, #372]	@ (8002594 <HAL_GPIO_Init+0x30c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a5b      	ldr	r2, [pc, #364]	@ (8002598 <HAL_GPIO_Init+0x310>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a52      	ldr	r2, [pc, #328]	@ (800259c <HAL_GPIO_Init+0x314>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02b      	beq.n	80024ae <HAL_GPIO_Init+0x226>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a51      	ldr	r2, [pc, #324]	@ (80025a0 <HAL_GPIO_Init+0x318>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d025      	beq.n	80024aa <HAL_GPIO_Init+0x222>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a50      	ldr	r2, [pc, #320]	@ (80025a4 <HAL_GPIO_Init+0x31c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <HAL_GPIO_Init+0x21e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4f      	ldr	r2, [pc, #316]	@ (80025a8 <HAL_GPIO_Init+0x320>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4e      	ldr	r2, [pc, #312]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x216>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4d      	ldr	r2, [pc, #308]	@ (80025b0 <HAL_GPIO_Init+0x328>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x212>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4c      	ldr	r2, [pc, #304]	@ (80025b4 <HAL_GPIO_Init+0x32c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4b      	ldr	r2, [pc, #300]	@ (80025b8 <HAL_GPIO_Init+0x330>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x20a>
 800248e:	2307      	movs	r3, #7
 8002490:	e00e      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 8002492:	2308      	movs	r3, #8
 8002494:	e00c      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 8002496:	2306      	movs	r3, #6
 8002498:	e00a      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 800249a:	2305      	movs	r3, #5
 800249c:	e008      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 800249e:	2304      	movs	r3, #4
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x228>
 80024ae:	2300      	movs	r3, #0
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f002 0203 	and.w	r2, r2, #3
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c0:	4935      	ldr	r1, [pc, #212]	@ (8002598 <HAL_GPIO_Init+0x310>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <HAL_GPIO_Init+0x334>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f2:	4a32      	ldr	r2, [pc, #200]	@ (80025bc <HAL_GPIO_Init+0x334>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f8:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_GPIO_Init+0x334>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800251c:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_GPIO_Init+0x334>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002522:	4b26      	ldr	r3, [pc, #152]	@ (80025bc <HAL_GPIO_Init+0x334>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002546:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <HAL_GPIO_Init+0x334>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_GPIO_Init+0x334>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002570:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <HAL_GPIO_Init+0x334>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b0f      	cmp	r3, #15
 8002580:	f67f ae90 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40013800 	.word	0x40013800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40021400 	.word	0x40021400
 80025b4:	40021800 	.word	0x40021800
 80025b8:	40021c00 	.word	0x40021c00
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e267      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d075      	beq.n	80026fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b85      	ldr	r3, [pc, #532]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d112      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b82      	ldr	r3, [pc, #520]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b7e      	ldr	r3, [pc, #504]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d157      	bne.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e242      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x74>
 8002656:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a75      	ldr	r2, [pc, #468]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x98>
 800266e:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6f      	ldr	r2, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6c      	ldr	r2, [pc, #432]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002688:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fcac 	bl	8002004 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff fca8 	bl	8002004 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e207      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fc98 	bl	8002004 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fc94 	bl	8002004 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1f3      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b51      	ldr	r3, [pc, #324]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0xe8>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	4b4a      	ldr	r3, [pc, #296]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b47      	ldr	r3, [pc, #284]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c7      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4937      	ldr	r1, [pc, #220]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0x244>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff fc4d 	bl	8002004 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff fc49 	bl	8002004 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4925      	ldr	r1, [pc, #148]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0x244>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff fc2c 	bl	8002004 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff fc28 	bl	8002004 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e187      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d036      	beq.n	8002848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_RCC_OscConfig+0x248>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff fc0c 	bl	8002004 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f0:	f7ff fc08 	bl	8002004 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e167      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x200>
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_OscConfig+0x248>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff fbf5 	bl	8002004 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	e00e      	b.n	800283c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281e:	f7ff fbf1 	bl	8002004 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d907      	bls.n	800283c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e150      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002830:	40023800 	.word	0x40023800
 8002834:	42470000 	.word	0x42470000
 8002838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b88      	ldr	r3, [pc, #544]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ea      	bne.n	800281e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8097 	beq.w	8002984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b81      	ldr	r3, [pc, #516]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b7a      	ldr	r3, [pc, #488]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b77      	ldr	r3, [pc, #476]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b74      	ldr	r3, [pc, #464]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a73      	ldr	r2, [pc, #460]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7ff fbb1 	bl	8002004 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7ff fbad 	bl	8002004 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e10c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x2ea>
 80028cc:	4b64      	ldr	r3, [pc, #400]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4a63      	ldr	r2, [pc, #396]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x30c>
 80028e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028fc:	4b58      	ldr	r3, [pc, #352]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a57      	ldr	r2, [pc, #348]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	4b55      	ldr	r3, [pc, #340]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a54      	ldr	r2, [pc, #336]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff fb72 	bl	8002004 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7ff fb6e 	bl	8002004 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0cb      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b49      	ldr	r3, [pc, #292]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x334>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7ff fb5c 	bl	8002004 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7ff fb58 	bl	8002004 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0b5      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	4b3e      	ldr	r3, [pc, #248]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	4a38      	ldr	r2, [pc, #224]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a1 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d05c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d141      	bne.n	8002a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fb2c 	bl	8002004 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fb28 	bl	8002004 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e087      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	491b      	ldr	r1, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fb01 	bl	8002004 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7ff fafd 	bl	8002004 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e05c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x416>
 8002a24:	e054      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff faea 	bl	8002004 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff fae6 	bl	8002004 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e045      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x444>
 8002a52:	e03d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e038      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_RCC_OscConfig+0x4ec>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d028      	beq.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d121      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0cc      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b68      	ldr	r3, [pc, #416]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d90c      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b65      	ldr	r3, [pc, #404]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d044      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e067      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4934      	ldr	r1, [pc, #208]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fa18 	bl	8002004 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7ff fa14 	bl	8002004 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e04f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d20c      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f978 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080087fc 	.word	0x080087fc
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	20000008 	.word	0x20000008

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b094      	sub	sp, #80	@ 0x50
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb8:	2300      	movs	r3, #0
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80e1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e0db      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ce4:	e0db      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b73      	ldr	r3, [pc, #460]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cea:	e0d8      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b6f      	ldr	r3, [pc, #444]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4621      	mov	r1, r4
 8002d38:	1a51      	subs	r1, r2, r1
 8002d3a:	6139      	str	r1, [r7, #16]
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d50:	4659      	mov	r1, fp
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	4651      	mov	r1, sl
 8002d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	018a      	lsls	r2, r1, #6
 8002d5e:	4651      	mov	r1, sl
 8002d60:	ebb2 0801 	subs.w	r8, r2, r1
 8002d64:	4659      	mov	r1, fp
 8002d66:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7e:	4690      	mov	r8, r2
 8002d80:	4699      	mov	r9, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	eb18 0303 	adds.w	r3, r8, r3
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	eb49 0303 	adc.w	r3, r9, r3
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d9e:	4629      	mov	r1, r5
 8002da0:	024b      	lsls	r3, r1, #9
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da8:	4621      	mov	r1, r4
 8002daa:	024a      	lsls	r2, r1, #9
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dbc:	f7fd ff64 	bl	8000c88 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc8:	e058      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	0159      	lsls	r1, r3, #5
 8002df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df6:	0150      	lsls	r0, r2, #5
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e02:	4649      	mov	r1, r9
 8002e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e20:	eb63 050b 	sbc.w	r5, r3, fp
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	00eb      	lsls	r3, r5, #3
 8002e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e32:	00e2      	lsls	r2, r4, #3
 8002e34:	4614      	mov	r4, r2
 8002e36:	461d      	mov	r5, r3
 8002e38:	4643      	mov	r3, r8
 8002e3a:	18e3      	adds	r3, r4, r3
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	464b      	mov	r3, r9
 8002e40:	eb45 0303 	adc.w	r3, r5, r3
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e66:	2200      	movs	r2, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	61fa      	str	r2, [r7, #28]
 8002e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e70:	f7fd ff0a 	bl	8000c88 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3750      	adds	r7, #80	@ 0x50
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	@ (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	0800880c 	.word	0x0800880c

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	@ (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	0800880c 	.word	0x0800880c

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d035      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b62      	ldr	r3, [pc, #392]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4e:	f7ff f859 	bl	8002004 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7ff f855 	bl	8002004 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0b0      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f68:	4b5b      	ldr	r3, [pc, #364]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	019a      	lsls	r2, r3, #6
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	4955      	ldr	r1, [pc, #340]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f88:	4b52      	ldr	r3, [pc, #328]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f8e:	f7ff f839 	bl	8002004 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7ff f835 	bl	8002004 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e090      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b44      	ldr	r3, [pc, #272]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	4a43      	ldr	r2, [pc, #268]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd2:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fde:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fea:	f7ff f80b 	bl	8002004 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7ff f807 	bl	8002004 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e062      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003004:	4b35      	ldr	r3, [pc, #212]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003018:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d028      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302e:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003036:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303e:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003044:	4a24      	ldr	r2, [pc, #144]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d114      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe ffd5 	bl	8002004 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe ffd1 	bl	8002004 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e02a      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800308c:	d10d      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800309e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a2:	490d      	ldr	r1, [pc, #52]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
 80030a8:	e005      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	4905      	ldr	r1, [pc, #20]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	42470068 	.word	0x42470068
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42470e40 	.word	0x42470e40

080030e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e073      	b.n	80031e2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7f5b      	ldrb	r3, [r3, #29]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fd5e 	bl	8001bcc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d055      	beq.n	80031d0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	22ca      	movs	r2, #202	@ 0xca
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2253      	movs	r2, #83	@ 0x53
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f9fb 	bl	8003530 <RTC_EnterInitMode>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d12c      	bne.n	800319e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003156:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	041a      	lsls	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa02 	bl	800359e <RTC_ExitInitMode>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d110      	bne.n	80031c6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	22ff      	movs	r2, #255	@ 0xff
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80031ce:	e001      	b.n	80031d4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031ea:	b590      	push	{r4, r7, lr}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	7f1b      	ldrb	r3, [r3, #28]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_RTC_SetTime+0x1c>
 8003202:	2302      	movs	r3, #2
 8003204:	e087      	b.n	8003316 <HAL_RTC_SetTime+0x12c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2202      	movs	r2, #2
 8003210:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d126      	bne.n	8003266 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f9d9 	bl	80035e8 <RTC_ByteToBcd2>
 8003236:	4603      	mov	r3, r0
 8003238:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f9d2 	bl	80035e8 <RTC_ByteToBcd2>
 8003244:	4603      	mov	r3, r0
 8003246:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003248:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f9ca 	bl	80035e8 <RTC_ByteToBcd2>
 8003254:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003256:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	78db      	ldrb	r3, [r3, #3]
 800325e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e018      	b.n	8003298 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003286:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800328c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	78db      	ldrb	r3, [r3, #3]
 8003292:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ca      	movs	r2, #202	@ 0xca
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2253      	movs	r2, #83	@ 0x53
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f941 	bl	8003530 <RTC_EnterInitMode>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d120      	bne.n	80032fa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f954 	bl	800359e <RTC_ExitInitMode>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	22ff      	movs	r2, #255	@ 0xff
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]

  return status;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}

0800331e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003350:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003354:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0d9b      	lsrs	r3, r3, #22
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11a      	bne.n	80033d0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f940 	bl	8003624 <RTC_Bcd2ToByte>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f937 	bl	8003624 <RTC_Bcd2ToByte>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f92e 	bl	8003624 <RTC_Bcd2ToByte>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	7f1b      	ldrb	r3, [r3, #28]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_RTC_SetDate+0x1c>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e071      	b.n	80034da <HAL_RTC_SetDate+0x100>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2202      	movs	r2, #2
 8003400:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10e      	bne.n	8003426 <HAL_RTC_SetDate+0x4c>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	f023 0310 	bic.w	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	330a      	adds	r3, #10
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11c      	bne.n	8003466 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	78db      	ldrb	r3, [r3, #3]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f8d9 	bl	80035e8 <RTC_ByteToBcd2>
 8003436:	4603      	mov	r3, r0
 8003438:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f8d2 	bl	80035e8 <RTC_ByteToBcd2>
 8003444:	4603      	mov	r3, r0
 8003446:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003448:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	789b      	ldrb	r3, [r3, #2]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f8ca 	bl	80035e8 <RTC_ByteToBcd2>
 8003454:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003456:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e00e      	b.n	8003484 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	78db      	ldrb	r3, [r3, #3]
 800346a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003472:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003478:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	22ca      	movs	r2, #202	@ 0xca
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2253      	movs	r2, #83	@ 0x53
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f84b 	bl	8003530 <RTC_EnterInitMode>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10c      	bne.n	80034be <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034b2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f872 	bl	800359e <RTC_ExitInitMode>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	22ff      	movs	r2, #255	@ 0xff
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]

  return status;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
	...

080034e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <HAL_RTC_WaitForSynchro+0x48>)
 80034f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f8:	f7fe fd84 	bl	8002004 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003500:	f7fe fd80 	bl	8002004 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800350e:	d901      	bls.n	8003514 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e007      	b.n	8003524 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ee      	beq.n	8003500 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00017f5f 	.word	0x00017f5f

08003530 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d122      	bne.n	8003594 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800355c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800355e:	f7fe fd51 	bl	8002004 <HAL_GetTick>
 8003562:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003564:	e00c      	b.n	8003580 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003566:	f7fe fd4d 	bl	8002004 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003574:	d904      	bls.n	8003580 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2204      	movs	r2, #4
 800357a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <RTC_EnterInitMode+0x64>
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d1e8      	bne.n	8003566 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff8b 	bl	80034e4 <HAL_RTC_WaitForSynchro>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80035f6:	e005      	b.n	8003604 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	3b0a      	subs	r3, #10
 8003602:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b09      	cmp	r3, #9
 8003608:	d8f6      	bhi.n	80035f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	b2da      	uxtb	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	4313      	orrs	r3, r2
 8003616:	b2db      	uxtb	r3, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4413      	add	r3, r2
 8003652:	b2db      	uxtb	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800366c:	4b5a      	ldr	r3, [pc, #360]	@ (80037d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	0adb      	lsrs	r3, r3, #11
 8003678:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	7f1b      	ldrb	r3, [r3, #28]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800368a:	2302      	movs	r3, #2
 800368c:	e09d      	b.n	80037ca <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2202      	movs	r2, #2
 8003698:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ca      	movs	r2, #202	@ 0xca
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2253      	movs	r2, #83	@ 0x53
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	22ff      	movs	r2, #255	@ 0xff
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2203      	movs	r2, #3
 80036d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e076      	b.n	80037ca <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e6      	bne.n	80036b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800370a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800370c:	4b32      	ldr	r3, [pc, #200]	@ (80037d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a32      	ldr	r2, [pc, #200]	@ (80037dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0adb      	lsrs	r3, r3, #11
 8003718:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3b01      	subs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	22ff      	movs	r2, #255	@ 0xff
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2203      	movs	r2, #3
 800373a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e041      	b.n	80037ca <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0e6      	beq.n	8003722 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0207 	bic.w	r2, r2, #7
 8003762:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800377c:	4b18      	ldr	r3, [pc, #96]	@ (80037e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003782:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003786:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800378e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003792:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037a2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	22ff      	movs	r2, #255	@ 0xff
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000004 	.word	0x20000004
 80037dc:	10624dd3 	.word	0x10624dd3
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7f1b      	ldrb	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e047      	b.n	800388c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	22ca      	movs	r2, #202	@ 0xca
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2253      	movs	r2, #83	@ 0x53
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003826:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003836:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003838:	f7fe fbe4 	bl	8002004 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800383e:	e013      	b.n	8003868 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003840:	f7fe fbe0 	bl	8002004 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384e:	d90b      	bls.n	8003868 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	22ff      	movs	r2, #255	@ 0xff
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e011      	b.n	800388c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0e4      	beq.n	8003840 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	22ff      	movs	r2, #255	@ 0xff
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800389c:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800389e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80038a2:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80038c2:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fd fb8d 	bl	8000fe4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	775a      	strb	r2, [r3, #29]
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40013c00 	.word	0x40013c00

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e042      	b.n	8003974 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe f994 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f973 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d175      	bne.n	8003a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Transmit+0x2c>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e06e      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2221      	movs	r2, #33	@ 0x21
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fb23 	bl	8002004 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d4:	d108      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e003      	b.n	80039f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f0:	e02e      	b.n	8003a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	@ 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f848 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e03a      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e007      	b.n	8003a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1cb      	bne.n	80039f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2140      	movs	r1, #64	@ 0x40
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f814 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	e03b      	b.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d037      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe faaa 	bl	8002004 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e03a      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d020      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d01d      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d116      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f81d 	bl	8003b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e00f      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d0b4      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b095      	sub	sp, #84	@ 0x54
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d119      	bne.n	8003bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bdc:	61ba      	str	r2, [r7, #24]
 8003bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bfe:	bf00      	nop
 8003c00:	3754      	adds	r7, #84	@ 0x54
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b0c0      	sub	sp, #256	@ 0x100
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	ea40 0301 	orr.w	r3, r0, r1
 8003c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c64:	f021 010c 	bic.w	r1, r1, #12
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c72:	430b      	orrs	r3, r1
 8003c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	6999      	ldr	r1, [r3, #24]
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	ea40 0301 	orr.w	r3, r0, r1
 8003c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <UART_SetConfig+0x2cc>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d005      	beq.n	8003cac <UART_SetConfig+0xa0>
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8003edc <UART_SetConfig+0x2d0>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d104      	bne.n	8003cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7ff f924 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cb4:	e003      	b.n	8003cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7ff f90b 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003cba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc8:	f040 810c 	bne.w	8003ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cee:	4621      	mov	r1, r4
 8003cf0:	eb12 0801 	adds.w	r8, r2, r1
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	eb43 0901 	adc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb49 0303 	adc.w	r3, r9, r3
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	18db      	adds	r3, r3, r3
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d40:	4613      	mov	r3, r2
 8003d42:	eb42 0303 	adc.w	r3, r2, r3
 8003d46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d50:	f7fc ff9a 	bl	8000c88 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d84:	4641      	mov	r1, r8
 8003d86:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da4:	4692      	mov	sl, r2
 8003da6:	469b      	mov	fp, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	eb1a 0303 	adds.w	r3, sl, r3
 8003dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db2:	464b      	mov	r3, r9
 8003db4:	eb4b 0303 	adc.w	r3, fp, r3
 8003db8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	18db      	adds	r3, r3, r3
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003de6:	f7fc ff4f 	bl	8000c88 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2301 	umull	r2, r3, r3, r1
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2264      	movs	r2, #100	@ 0x64
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	1acb      	subs	r3, r1, r3
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003e08:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e14:	441c      	add	r4, r3
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e30:	415b      	adcs	r3, r3
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	18db      	adds	r3, r3, r3
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e92:	4613      	mov	r3, r2
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ea2:	f7fc fef1 	bl	8000c88 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	@ 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 0207 	and.w	r2, r3, #7
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed4:	e106      	b.n	80040e4 <UART_SetConfig+0x4d8>
 8003ed6:	bf00      	nop
 8003ed8:	40011000 	.word	0x40011000
 8003edc:	40011400 	.word	0x40011400
 8003ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	6239      	str	r1, [r7, #32]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1854      	adds	r4, r2, r1
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	eb43 0501 	adc.w	r5, r3, r1
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	00eb      	lsls	r3, r5, #3
 8003f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1e:	00e2      	lsls	r2, r4, #3
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	4643      	mov	r3, r8
 8003f26:	18e3      	adds	r3, r4, r3
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f52:	4629      	mov	r1, r5
 8003f54:	008b      	lsls	r3, r1, #2
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	008a      	lsls	r2, r1, #2
 8003f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f64:	f7fc fe90 	bl	8000c88 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b60      	ldr	r3, [pc, #384]	@ (80040f0 <UART_SetConfig+0x4e4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	61b9      	str	r1, [r7, #24]
 8003f90:	415b      	adcs	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6139      	str	r1, [r7, #16]
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fcc:	464b      	mov	r3, r9
 8003fce:	460a      	mov	r2, r1
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004002:	f7fc fe41 	bl	8000c88 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4611      	mov	r1, r2
 800400c:	4b38      	ldr	r3, [pc, #224]	@ (80040f0 <UART_SetConfig+0x4e4>)
 800400e:	fba3 2301 	umull	r2, r3, r3, r1
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2264      	movs	r2, #100	@ 0x64
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	1acb      	subs	r3, r1, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	@ 0x32
 8004020:	4a33      	ldr	r2, [pc, #204]	@ (80040f0 <UART_SetConfig+0x4e4>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402c:	441c      	add	r4, r3
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	673b      	str	r3, [r7, #112]	@ 0x70
 8004036:	677a      	str	r2, [r7, #116]	@ 0x74
 8004038:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	415b      	adcs	r3, r3
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800407e:	464b      	mov	r3, r9
 8004080:	460a      	mov	r2, r1
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	663b      	str	r3, [r7, #96]	@ 0x60
 8004092:	667a      	str	r2, [r7, #100]	@ 0x64
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040a0:	4649      	mov	r1, r9
 80040a2:	008b      	lsls	r3, r1, #2
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040aa:	4641      	mov	r1, r8
 80040ac:	008a      	lsls	r2, r1, #2
 80040ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040b2:	f7fc fde9 	bl	8000c88 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <UART_SetConfig+0x4e4>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	@ 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	3332      	adds	r3, #50	@ 0x32
 80040ce:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <UART_SetConfig+0x4e4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 020f 	and.w	r2, r3, #15
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4422      	add	r2, r4
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f0:	51eb851f 	.word	0x51eb851f

080040f4 <__cvt>:
 80040f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	ec57 6b10 	vmov	r6, r7, d0
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	460c      	mov	r4, r1
 8004100:	4619      	mov	r1, r3
 8004102:	463b      	mov	r3, r7
 8004104:	bfbb      	ittet	lt
 8004106:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800410a:	461f      	movlt	r7, r3
 800410c:	2300      	movge	r3, #0
 800410e:	232d      	movlt	r3, #45	@ 0x2d
 8004110:	700b      	strb	r3, [r1, #0]
 8004112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004114:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004118:	4691      	mov	r9, r2
 800411a:	f023 0820 	bic.w	r8, r3, #32
 800411e:	bfbc      	itt	lt
 8004120:	4632      	movlt	r2, r6
 8004122:	4616      	movlt	r6, r2
 8004124:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004128:	d005      	beq.n	8004136 <__cvt+0x42>
 800412a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800412e:	d100      	bne.n	8004132 <__cvt+0x3e>
 8004130:	3401      	adds	r4, #1
 8004132:	2102      	movs	r1, #2
 8004134:	e000      	b.n	8004138 <__cvt+0x44>
 8004136:	2103      	movs	r1, #3
 8004138:	ab03      	add	r3, sp, #12
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	ab02      	add	r3, sp, #8
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	ec47 6b10 	vmov	d0, r6, r7
 8004144:	4653      	mov	r3, sl
 8004146:	4622      	mov	r2, r4
 8004148:	f001 f876 	bl	8005238 <_dtoa_r>
 800414c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004150:	4605      	mov	r5, r0
 8004152:	d119      	bne.n	8004188 <__cvt+0x94>
 8004154:	f019 0f01 	tst.w	r9, #1
 8004158:	d00e      	beq.n	8004178 <__cvt+0x84>
 800415a:	eb00 0904 	add.w	r9, r0, r4
 800415e:	2200      	movs	r2, #0
 8004160:	2300      	movs	r3, #0
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f7fc fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800416a:	b108      	cbz	r0, 8004170 <__cvt+0x7c>
 800416c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004170:	2230      	movs	r2, #48	@ 0x30
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	454b      	cmp	r3, r9
 8004176:	d31e      	bcc.n	80041b6 <__cvt+0xc2>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800417c:	1b5b      	subs	r3, r3, r5
 800417e:	4628      	mov	r0, r5
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	b004      	add	sp, #16
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800418c:	eb00 0904 	add.w	r9, r0, r4
 8004190:	d1e5      	bne.n	800415e <__cvt+0x6a>
 8004192:	7803      	ldrb	r3, [r0, #0]
 8004194:	2b30      	cmp	r3, #48	@ 0x30
 8004196:	d10a      	bne.n	80041ae <__cvt+0xba>
 8004198:	2200      	movs	r2, #0
 800419a:	2300      	movs	r3, #0
 800419c:	4630      	mov	r0, r6
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a4:	b918      	cbnz	r0, 80041ae <__cvt+0xba>
 80041a6:	f1c4 0401 	rsb	r4, r4, #1
 80041aa:	f8ca 4000 	str.w	r4, [sl]
 80041ae:	f8da 3000 	ldr.w	r3, [sl]
 80041b2:	4499      	add	r9, r3
 80041b4:	e7d3      	b.n	800415e <__cvt+0x6a>
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	9103      	str	r1, [sp, #12]
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e7d9      	b.n	8004172 <__cvt+0x7e>

080041be <__exponent>:
 80041be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c0:	2900      	cmp	r1, #0
 80041c2:	bfba      	itte	lt
 80041c4:	4249      	neglt	r1, r1
 80041c6:	232d      	movlt	r3, #45	@ 0x2d
 80041c8:	232b      	movge	r3, #43	@ 0x2b
 80041ca:	2909      	cmp	r1, #9
 80041cc:	7002      	strb	r2, [r0, #0]
 80041ce:	7043      	strb	r3, [r0, #1]
 80041d0:	dd29      	ble.n	8004226 <__exponent+0x68>
 80041d2:	f10d 0307 	add.w	r3, sp, #7
 80041d6:	461d      	mov	r5, r3
 80041d8:	270a      	movs	r7, #10
 80041da:	461a      	mov	r2, r3
 80041dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80041e0:	fb07 1416 	mls	r4, r7, r6, r1
 80041e4:	3430      	adds	r4, #48	@ 0x30
 80041e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80041ea:	460c      	mov	r4, r1
 80041ec:	2c63      	cmp	r4, #99	@ 0x63
 80041ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80041f2:	4631      	mov	r1, r6
 80041f4:	dcf1      	bgt.n	80041da <__exponent+0x1c>
 80041f6:	3130      	adds	r1, #48	@ 0x30
 80041f8:	1e94      	subs	r4, r2, #2
 80041fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80041fe:	1c41      	adds	r1, r0, #1
 8004200:	4623      	mov	r3, r4
 8004202:	42ab      	cmp	r3, r5
 8004204:	d30a      	bcc.n	800421c <__exponent+0x5e>
 8004206:	f10d 0309 	add.w	r3, sp, #9
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ac      	cmp	r4, r5
 800420e:	bf88      	it	hi
 8004210:	2300      	movhi	r3, #0
 8004212:	3302      	adds	r3, #2
 8004214:	4403      	add	r3, r0
 8004216:	1a18      	subs	r0, r3, r0
 8004218:	b003      	add	sp, #12
 800421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004220:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004224:	e7ed      	b.n	8004202 <__exponent+0x44>
 8004226:	2330      	movs	r3, #48	@ 0x30
 8004228:	3130      	adds	r1, #48	@ 0x30
 800422a:	7083      	strb	r3, [r0, #2]
 800422c:	70c1      	strb	r1, [r0, #3]
 800422e:	1d03      	adds	r3, r0, #4
 8004230:	e7f1      	b.n	8004216 <__exponent+0x58>
	...

08004234 <_printf_float>:
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	b08d      	sub	sp, #52	@ 0x34
 800423a:	460c      	mov	r4, r1
 800423c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004240:	4616      	mov	r6, r2
 8004242:	461f      	mov	r7, r3
 8004244:	4605      	mov	r5, r0
 8004246:	f000 feef 	bl	8005028 <_localeconv_r>
 800424a:	6803      	ldr	r3, [r0, #0]
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f80e 	bl	8000270 <strlen>
 8004254:	2300      	movs	r3, #0
 8004256:	930a      	str	r3, [sp, #40]	@ 0x28
 8004258:	f8d8 3000 	ldr.w	r3, [r8]
 800425c:	9005      	str	r0, [sp, #20]
 800425e:	3307      	adds	r3, #7
 8004260:	f023 0307 	bic.w	r3, r3, #7
 8004264:	f103 0208 	add.w	r2, r3, #8
 8004268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800426c:	f8d4 b000 	ldr.w	fp, [r4]
 8004270:	f8c8 2000 	str.w	r2, [r8]
 8004274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800427c:	9307      	str	r3, [sp, #28]
 800427e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004282:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800428a:	4b9c      	ldr	r3, [pc, #624]	@ (80044fc <_printf_float+0x2c8>)
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	f7fc fc4c 	bl	8000b2c <__aeabi_dcmpun>
 8004294:	bb70      	cbnz	r0, 80042f4 <_printf_float+0xc0>
 8004296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800429a:	4b98      	ldr	r3, [pc, #608]	@ (80044fc <_printf_float+0x2c8>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	f7fc fc26 	bl	8000af0 <__aeabi_dcmple>
 80042a4:	bb30      	cbnz	r0, 80042f4 <_printf_float+0xc0>
 80042a6:	2200      	movs	r2, #0
 80042a8:	2300      	movs	r3, #0
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fc fc15 	bl	8000adc <__aeabi_dcmplt>
 80042b2:	b110      	cbz	r0, 80042ba <_printf_float+0x86>
 80042b4:	232d      	movs	r3, #45	@ 0x2d
 80042b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ba:	4a91      	ldr	r2, [pc, #580]	@ (8004500 <_printf_float+0x2cc>)
 80042bc:	4b91      	ldr	r3, [pc, #580]	@ (8004504 <_printf_float+0x2d0>)
 80042be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80042c2:	bf94      	ite	ls
 80042c4:	4690      	movls	r8, r2
 80042c6:	4698      	movhi	r8, r3
 80042c8:	2303      	movs	r3, #3
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	f02b 0304 	bic.w	r3, fp, #4
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	f04f 0900 	mov.w	r9, #0
 80042d6:	9700      	str	r7, [sp, #0]
 80042d8:	4633      	mov	r3, r6
 80042da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80042dc:	4621      	mov	r1, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 f9d2 	bl	8004688 <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	f040 808d 	bne.w	8004404 <_printf_float+0x1d0>
 80042ea:	f04f 30ff 	mov.w	r0, #4294967295
 80042ee:	b00d      	add	sp, #52	@ 0x34
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	4640      	mov	r0, r8
 80042fa:	4649      	mov	r1, r9
 80042fc:	f7fc fc16 	bl	8000b2c <__aeabi_dcmpun>
 8004300:	b140      	cbz	r0, 8004314 <_printf_float+0xe0>
 8004302:	464b      	mov	r3, r9
 8004304:	2b00      	cmp	r3, #0
 8004306:	bfbc      	itt	lt
 8004308:	232d      	movlt	r3, #45	@ 0x2d
 800430a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800430e:	4a7e      	ldr	r2, [pc, #504]	@ (8004508 <_printf_float+0x2d4>)
 8004310:	4b7e      	ldr	r3, [pc, #504]	@ (800450c <_printf_float+0x2d8>)
 8004312:	e7d4      	b.n	80042be <_printf_float+0x8a>
 8004314:	6863      	ldr	r3, [r4, #4]
 8004316:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800431a:	9206      	str	r2, [sp, #24]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	d13b      	bne.n	8004398 <_printf_float+0x164>
 8004320:	2306      	movs	r3, #6
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004328:	2300      	movs	r3, #0
 800432a:	6022      	str	r2, [r4, #0]
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004330:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004334:	ab09      	add	r3, sp, #36	@ 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	6861      	ldr	r1, [r4, #4]
 800433a:	ec49 8b10 	vmov	d0, r8, r9
 800433e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004342:	4628      	mov	r0, r5
 8004344:	f7ff fed6 	bl	80040f4 <__cvt>
 8004348:	9b06      	ldr	r3, [sp, #24]
 800434a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800434c:	2b47      	cmp	r3, #71	@ 0x47
 800434e:	4680      	mov	r8, r0
 8004350:	d129      	bne.n	80043a6 <_printf_float+0x172>
 8004352:	1cc8      	adds	r0, r1, #3
 8004354:	db02      	blt.n	800435c <_printf_float+0x128>
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	4299      	cmp	r1, r3
 800435a:	dd41      	ble.n	80043e0 <_printf_float+0x1ac>
 800435c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004360:	fa5f fa8a 	uxtb.w	sl, sl
 8004364:	3901      	subs	r1, #1
 8004366:	4652      	mov	r2, sl
 8004368:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800436c:	9109      	str	r1, [sp, #36]	@ 0x24
 800436e:	f7ff ff26 	bl	80041be <__exponent>
 8004372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004374:	1813      	adds	r3, r2, r0
 8004376:	2a01      	cmp	r2, #1
 8004378:	4681      	mov	r9, r0
 800437a:	6123      	str	r3, [r4, #16]
 800437c:	dc02      	bgt.n	8004384 <_printf_float+0x150>
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	07d2      	lsls	r2, r2, #31
 8004382:	d501      	bpl.n	8004388 <_printf_float+0x154>
 8004384:	3301      	adds	r3, #1
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0a2      	beq.n	80042d6 <_printf_float+0xa2>
 8004390:	232d      	movs	r3, #45	@ 0x2d
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004396:	e79e      	b.n	80042d6 <_printf_float+0xa2>
 8004398:	9a06      	ldr	r2, [sp, #24]
 800439a:	2a47      	cmp	r2, #71	@ 0x47
 800439c:	d1c2      	bne.n	8004324 <_printf_float+0xf0>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1c0      	bne.n	8004324 <_printf_float+0xf0>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e7bd      	b.n	8004322 <_printf_float+0xee>
 80043a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043aa:	d9db      	bls.n	8004364 <_printf_float+0x130>
 80043ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80043b0:	d118      	bne.n	80043e4 <_printf_float+0x1b0>
 80043b2:	2900      	cmp	r1, #0
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	dd0b      	ble.n	80043d0 <_printf_float+0x19c>
 80043b8:	6121      	str	r1, [r4, #16]
 80043ba:	b913      	cbnz	r3, 80043c2 <_printf_float+0x18e>
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	07d0      	lsls	r0, r2, #31
 80043c0:	d502      	bpl.n	80043c8 <_printf_float+0x194>
 80043c2:	3301      	adds	r3, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80043ca:	f04f 0900 	mov.w	r9, #0
 80043ce:	e7db      	b.n	8004388 <_printf_float+0x154>
 80043d0:	b913      	cbnz	r3, 80043d8 <_printf_float+0x1a4>
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	07d2      	lsls	r2, r2, #31
 80043d6:	d501      	bpl.n	80043dc <_printf_float+0x1a8>
 80043d8:	3302      	adds	r3, #2
 80043da:	e7f4      	b.n	80043c6 <_printf_float+0x192>
 80043dc:	2301      	movs	r3, #1
 80043de:	e7f2      	b.n	80043c6 <_printf_float+0x192>
 80043e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80043e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043e6:	4299      	cmp	r1, r3
 80043e8:	db05      	blt.n	80043f6 <_printf_float+0x1c2>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	6121      	str	r1, [r4, #16]
 80043ee:	07d8      	lsls	r0, r3, #31
 80043f0:	d5ea      	bpl.n	80043c8 <_printf_float+0x194>
 80043f2:	1c4b      	adds	r3, r1, #1
 80043f4:	e7e7      	b.n	80043c6 <_printf_float+0x192>
 80043f6:	2900      	cmp	r1, #0
 80043f8:	bfd4      	ite	le
 80043fa:	f1c1 0202 	rsble	r2, r1, #2
 80043fe:	2201      	movgt	r2, #1
 8004400:	4413      	add	r3, r2
 8004402:	e7e0      	b.n	80043c6 <_printf_float+0x192>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	055a      	lsls	r2, r3, #21
 8004408:	d407      	bmi.n	800441a <_printf_float+0x1e6>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	4642      	mov	r2, r8
 800440e:	4631      	mov	r1, r6
 8004410:	4628      	mov	r0, r5
 8004412:	47b8      	blx	r7
 8004414:	3001      	adds	r0, #1
 8004416:	d12b      	bne.n	8004470 <_printf_float+0x23c>
 8004418:	e767      	b.n	80042ea <_printf_float+0xb6>
 800441a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800441e:	f240 80dd 	bls.w	80045dc <_printf_float+0x3a8>
 8004422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004426:	2200      	movs	r2, #0
 8004428:	2300      	movs	r3, #0
 800442a:	f7fc fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800442e:	2800      	cmp	r0, #0
 8004430:	d033      	beq.n	800449a <_printf_float+0x266>
 8004432:	4a37      	ldr	r2, [pc, #220]	@ (8004510 <_printf_float+0x2dc>)
 8004434:	2301      	movs	r3, #1
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	47b8      	blx	r7
 800443c:	3001      	adds	r0, #1
 800443e:	f43f af54 	beq.w	80042ea <_printf_float+0xb6>
 8004442:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004446:	4543      	cmp	r3, r8
 8004448:	db02      	blt.n	8004450 <_printf_float+0x21c>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07d8      	lsls	r0, r3, #31
 800444e:	d50f      	bpl.n	8004470 <_printf_float+0x23c>
 8004450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004454:	4631      	mov	r1, r6
 8004456:	4628      	mov	r0, r5
 8004458:	47b8      	blx	r7
 800445a:	3001      	adds	r0, #1
 800445c:	f43f af45 	beq.w	80042ea <_printf_float+0xb6>
 8004460:	f04f 0900 	mov.w	r9, #0
 8004464:	f108 38ff 	add.w	r8, r8, #4294967295
 8004468:	f104 0a1a 	add.w	sl, r4, #26
 800446c:	45c8      	cmp	r8, r9
 800446e:	dc09      	bgt.n	8004484 <_printf_float+0x250>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	079b      	lsls	r3, r3, #30
 8004474:	f100 8103 	bmi.w	800467e <_printf_float+0x44a>
 8004478:	68e0      	ldr	r0, [r4, #12]
 800447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800447c:	4298      	cmp	r0, r3
 800447e:	bfb8      	it	lt
 8004480:	4618      	movlt	r0, r3
 8004482:	e734      	b.n	80042ee <_printf_float+0xba>
 8004484:	2301      	movs	r3, #1
 8004486:	4652      	mov	r2, sl
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f af2b 	beq.w	80042ea <_printf_float+0xb6>
 8004494:	f109 0901 	add.w	r9, r9, #1
 8004498:	e7e8      	b.n	800446c <_printf_float+0x238>
 800449a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc39      	bgt.n	8004514 <_printf_float+0x2e0>
 80044a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004510 <_printf_float+0x2dc>)
 80044a2:	2301      	movs	r3, #1
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f af1d 	beq.w	80042ea <_printf_float+0xb6>
 80044b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80044b4:	ea59 0303 	orrs.w	r3, r9, r3
 80044b8:	d102      	bne.n	80044c0 <_printf_float+0x28c>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	07d9      	lsls	r1, r3, #31
 80044be:	d5d7      	bpl.n	8004470 <_printf_float+0x23c>
 80044c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f af0d 	beq.w	80042ea <_printf_float+0xb6>
 80044d0:	f04f 0a00 	mov.w	sl, #0
 80044d4:	f104 0b1a 	add.w	fp, r4, #26
 80044d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044da:	425b      	negs	r3, r3
 80044dc:	4553      	cmp	r3, sl
 80044de:	dc01      	bgt.n	80044e4 <_printf_float+0x2b0>
 80044e0:	464b      	mov	r3, r9
 80044e2:	e793      	b.n	800440c <_printf_float+0x1d8>
 80044e4:	2301      	movs	r3, #1
 80044e6:	465a      	mov	r2, fp
 80044e8:	4631      	mov	r1, r6
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b8      	blx	r7
 80044ee:	3001      	adds	r0, #1
 80044f0:	f43f aefb 	beq.w	80042ea <_printf_float+0xb6>
 80044f4:	f10a 0a01 	add.w	sl, sl, #1
 80044f8:	e7ee      	b.n	80044d8 <_printf_float+0x2a4>
 80044fa:	bf00      	nop
 80044fc:	7fefffff 	.word	0x7fefffff
 8004500:	08008814 	.word	0x08008814
 8004504:	08008818 	.word	0x08008818
 8004508:	0800881c 	.word	0x0800881c
 800450c:	08008820 	.word	0x08008820
 8004510:	08008824 	.word	0x08008824
 8004514:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004516:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800451a:	4553      	cmp	r3, sl
 800451c:	bfa8      	it	ge
 800451e:	4653      	movge	r3, sl
 8004520:	2b00      	cmp	r3, #0
 8004522:	4699      	mov	r9, r3
 8004524:	dc36      	bgt.n	8004594 <_printf_float+0x360>
 8004526:	f04f 0b00 	mov.w	fp, #0
 800452a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800452e:	f104 021a 	add.w	r2, r4, #26
 8004532:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004534:	9306      	str	r3, [sp, #24]
 8004536:	eba3 0309 	sub.w	r3, r3, r9
 800453a:	455b      	cmp	r3, fp
 800453c:	dc31      	bgt.n	80045a2 <_printf_float+0x36e>
 800453e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004540:	459a      	cmp	sl, r3
 8004542:	dc3a      	bgt.n	80045ba <_printf_float+0x386>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	07da      	lsls	r2, r3, #31
 8004548:	d437      	bmi.n	80045ba <_printf_float+0x386>
 800454a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800454c:	ebaa 0903 	sub.w	r9, sl, r3
 8004550:	9b06      	ldr	r3, [sp, #24]
 8004552:	ebaa 0303 	sub.w	r3, sl, r3
 8004556:	4599      	cmp	r9, r3
 8004558:	bfa8      	it	ge
 800455a:	4699      	movge	r9, r3
 800455c:	f1b9 0f00 	cmp.w	r9, #0
 8004560:	dc33      	bgt.n	80045ca <_printf_float+0x396>
 8004562:	f04f 0800 	mov.w	r8, #0
 8004566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800456a:	f104 0b1a 	add.w	fp, r4, #26
 800456e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004570:	ebaa 0303 	sub.w	r3, sl, r3
 8004574:	eba3 0309 	sub.w	r3, r3, r9
 8004578:	4543      	cmp	r3, r8
 800457a:	f77f af79 	ble.w	8004470 <_printf_float+0x23c>
 800457e:	2301      	movs	r3, #1
 8004580:	465a      	mov	r2, fp
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	f43f aeae 	beq.w	80042ea <_printf_float+0xb6>
 800458e:	f108 0801 	add.w	r8, r8, #1
 8004592:	e7ec      	b.n	800456e <_printf_float+0x33a>
 8004594:	4642      	mov	r2, r8
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	d1c2      	bne.n	8004526 <_printf_float+0x2f2>
 80045a0:	e6a3      	b.n	80042ea <_printf_float+0xb6>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	9206      	str	r2, [sp, #24]
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f ae9c 	beq.w	80042ea <_printf_float+0xb6>
 80045b2:	9a06      	ldr	r2, [sp, #24]
 80045b4:	f10b 0b01 	add.w	fp, fp, #1
 80045b8:	e7bb      	b.n	8004532 <_printf_float+0x2fe>
 80045ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d1c0      	bne.n	800454a <_printf_float+0x316>
 80045c8:	e68f      	b.n	80042ea <_printf_float+0xb6>
 80045ca:	9a06      	ldr	r2, [sp, #24]
 80045cc:	464b      	mov	r3, r9
 80045ce:	4442      	add	r2, r8
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1c3      	bne.n	8004562 <_printf_float+0x32e>
 80045da:	e686      	b.n	80042ea <_printf_float+0xb6>
 80045dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80045e0:	f1ba 0f01 	cmp.w	sl, #1
 80045e4:	dc01      	bgt.n	80045ea <_printf_float+0x3b6>
 80045e6:	07db      	lsls	r3, r3, #31
 80045e8:	d536      	bpl.n	8004658 <_printf_float+0x424>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4642      	mov	r2, r8
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	f43f ae78 	beq.w	80042ea <_printf_float+0xb6>
 80045fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045fe:	4631      	mov	r1, r6
 8004600:	4628      	mov	r0, r5
 8004602:	47b8      	blx	r7
 8004604:	3001      	adds	r0, #1
 8004606:	f43f ae70 	beq.w	80042ea <_printf_float+0xb6>
 800460a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800460e:	2200      	movs	r2, #0
 8004610:	2300      	movs	r3, #0
 8004612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004616:	f7fc fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800461a:	b9c0      	cbnz	r0, 800464e <_printf_float+0x41a>
 800461c:	4653      	mov	r3, sl
 800461e:	f108 0201 	add.w	r2, r8, #1
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	d10c      	bne.n	8004646 <_printf_float+0x412>
 800462c:	e65d      	b.n	80042ea <_printf_float+0xb6>
 800462e:	2301      	movs	r3, #1
 8004630:	465a      	mov	r2, fp
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	f43f ae56 	beq.w	80042ea <_printf_float+0xb6>
 800463e:	f108 0801 	add.w	r8, r8, #1
 8004642:	45d0      	cmp	r8, sl
 8004644:	dbf3      	blt.n	800462e <_printf_float+0x3fa>
 8004646:	464b      	mov	r3, r9
 8004648:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800464c:	e6df      	b.n	800440e <_printf_float+0x1da>
 800464e:	f04f 0800 	mov.w	r8, #0
 8004652:	f104 0b1a 	add.w	fp, r4, #26
 8004656:	e7f4      	b.n	8004642 <_printf_float+0x40e>
 8004658:	2301      	movs	r3, #1
 800465a:	4642      	mov	r2, r8
 800465c:	e7e1      	b.n	8004622 <_printf_float+0x3ee>
 800465e:	2301      	movs	r3, #1
 8004660:	464a      	mov	r2, r9
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	f43f ae3e 	beq.w	80042ea <_printf_float+0xb6>
 800466e:	f108 0801 	add.w	r8, r8, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	4543      	cmp	r3, r8
 800467a:	dcf0      	bgt.n	800465e <_printf_float+0x42a>
 800467c:	e6fc      	b.n	8004478 <_printf_float+0x244>
 800467e:	f04f 0800 	mov.w	r8, #0
 8004682:	f104 0919 	add.w	r9, r4, #25
 8004686:	e7f4      	b.n	8004672 <_printf_float+0x43e>

08004688 <_printf_common>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	4616      	mov	r6, r2
 800468e:	4698      	mov	r8, r3
 8004690:	688a      	ldr	r2, [r1, #8]
 8004692:	690b      	ldr	r3, [r1, #16]
 8004694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004698:	4293      	cmp	r3, r2
 800469a:	bfb8      	it	lt
 800469c:	4613      	movlt	r3, r2
 800469e:	6033      	str	r3, [r6, #0]
 80046a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046a4:	4607      	mov	r7, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	b10a      	cbz	r2, 80046ae <_printf_common+0x26>
 80046aa:	3301      	adds	r3, #1
 80046ac:	6033      	str	r3, [r6, #0]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	0699      	lsls	r1, r3, #26
 80046b2:	bf42      	ittt	mi
 80046b4:	6833      	ldrmi	r3, [r6, #0]
 80046b6:	3302      	addmi	r3, #2
 80046b8:	6033      	strmi	r3, [r6, #0]
 80046ba:	6825      	ldr	r5, [r4, #0]
 80046bc:	f015 0506 	ands.w	r5, r5, #6
 80046c0:	d106      	bne.n	80046d0 <_printf_common+0x48>
 80046c2:	f104 0a19 	add.w	sl, r4, #25
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	6832      	ldr	r2, [r6, #0]
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	42ab      	cmp	r3, r5
 80046ce:	dc26      	bgt.n	800471e <_printf_common+0x96>
 80046d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	3b00      	subs	r3, #0
 80046d8:	bf18      	it	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	0692      	lsls	r2, r2, #26
 80046de:	d42b      	bmi.n	8004738 <_printf_common+0xb0>
 80046e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046e4:	4641      	mov	r1, r8
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c8      	blx	r9
 80046ea:	3001      	adds	r0, #1
 80046ec:	d01e      	beq.n	800472c <_printf_common+0xa4>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	6922      	ldr	r2, [r4, #16]
 80046f2:	f003 0306 	and.w	r3, r3, #6
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf02      	ittt	eq
 80046fa:	68e5      	ldreq	r5, [r4, #12]
 80046fc:	6833      	ldreq	r3, [r6, #0]
 80046fe:	1aed      	subeq	r5, r5, r3
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	bf0c      	ite	eq
 8004704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004708:	2500      	movne	r5, #0
 800470a:	4293      	cmp	r3, r2
 800470c:	bfc4      	itt	gt
 800470e:	1a9b      	subgt	r3, r3, r2
 8004710:	18ed      	addgt	r5, r5, r3
 8004712:	2600      	movs	r6, #0
 8004714:	341a      	adds	r4, #26
 8004716:	42b5      	cmp	r5, r6
 8004718:	d11a      	bne.n	8004750 <_printf_common+0xc8>
 800471a:	2000      	movs	r0, #0
 800471c:	e008      	b.n	8004730 <_printf_common+0xa8>
 800471e:	2301      	movs	r3, #1
 8004720:	4652      	mov	r2, sl
 8004722:	4641      	mov	r1, r8
 8004724:	4638      	mov	r0, r7
 8004726:	47c8      	blx	r9
 8004728:	3001      	adds	r0, #1
 800472a:	d103      	bne.n	8004734 <_printf_common+0xac>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	3501      	adds	r5, #1
 8004736:	e7c6      	b.n	80046c6 <_printf_common+0x3e>
 8004738:	18e1      	adds	r1, r4, r3
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	2030      	movs	r0, #48	@ 0x30
 800473e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004742:	4422      	add	r2, r4
 8004744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800474c:	3302      	adds	r3, #2
 800474e:	e7c7      	b.n	80046e0 <_printf_common+0x58>
 8004750:	2301      	movs	r3, #1
 8004752:	4622      	mov	r2, r4
 8004754:	4641      	mov	r1, r8
 8004756:	4638      	mov	r0, r7
 8004758:	47c8      	blx	r9
 800475a:	3001      	adds	r0, #1
 800475c:	d0e6      	beq.n	800472c <_printf_common+0xa4>
 800475e:	3601      	adds	r6, #1
 8004760:	e7d9      	b.n	8004716 <_printf_common+0x8e>
	...

08004764 <_printf_i>:
 8004764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	7e0f      	ldrb	r7, [r1, #24]
 800476a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800476c:	2f78      	cmp	r7, #120	@ 0x78
 800476e:	4691      	mov	r9, r2
 8004770:	4680      	mov	r8, r0
 8004772:	460c      	mov	r4, r1
 8004774:	469a      	mov	sl, r3
 8004776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800477a:	d807      	bhi.n	800478c <_printf_i+0x28>
 800477c:	2f62      	cmp	r7, #98	@ 0x62
 800477e:	d80a      	bhi.n	8004796 <_printf_i+0x32>
 8004780:	2f00      	cmp	r7, #0
 8004782:	f000 80d2 	beq.w	800492a <_printf_i+0x1c6>
 8004786:	2f58      	cmp	r7, #88	@ 0x58
 8004788:	f000 80b9 	beq.w	80048fe <_printf_i+0x19a>
 800478c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004794:	e03a      	b.n	800480c <_printf_i+0xa8>
 8004796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800479a:	2b15      	cmp	r3, #21
 800479c:	d8f6      	bhi.n	800478c <_printf_i+0x28>
 800479e:	a101      	add	r1, pc, #4	@ (adr r1, 80047a4 <_printf_i+0x40>)
 80047a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	08004811 	.word	0x08004811
 80047ac:	0800478d 	.word	0x0800478d
 80047b0:	0800478d 	.word	0x0800478d
 80047b4:	0800478d 	.word	0x0800478d
 80047b8:	0800478d 	.word	0x0800478d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800478d 	.word	0x0800478d
 80047c4:	0800478d 	.word	0x0800478d
 80047c8:	0800478d 	.word	0x0800478d
 80047cc:	0800478d 	.word	0x0800478d
 80047d0:	08004911 	.word	0x08004911
 80047d4:	0800483b 	.word	0x0800483b
 80047d8:	080048cb 	.word	0x080048cb
 80047dc:	0800478d 	.word	0x0800478d
 80047e0:	0800478d 	.word	0x0800478d
 80047e4:	08004933 	.word	0x08004933
 80047e8:	0800478d 	.word	0x0800478d
 80047ec:	0800483b 	.word	0x0800483b
 80047f0:	0800478d 	.word	0x0800478d
 80047f4:	0800478d 	.word	0x0800478d
 80047f8:	080048d3 	.word	0x080048d3
 80047fc:	6833      	ldr	r3, [r6, #0]
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6032      	str	r2, [r6, #0]
 8004804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800480c:	2301      	movs	r3, #1
 800480e:	e09d      	b.n	800494c <_printf_i+0x1e8>
 8004810:	6833      	ldr	r3, [r6, #0]
 8004812:	6820      	ldr	r0, [r4, #0]
 8004814:	1d19      	adds	r1, r3, #4
 8004816:	6031      	str	r1, [r6, #0]
 8004818:	0606      	lsls	r6, r0, #24
 800481a:	d501      	bpl.n	8004820 <_printf_i+0xbc>
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	e003      	b.n	8004828 <_printf_i+0xc4>
 8004820:	0645      	lsls	r5, r0, #25
 8004822:	d5fb      	bpl.n	800481c <_printf_i+0xb8>
 8004824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004828:	2d00      	cmp	r5, #0
 800482a:	da03      	bge.n	8004834 <_printf_i+0xd0>
 800482c:	232d      	movs	r3, #45	@ 0x2d
 800482e:	426d      	negs	r5, r5
 8004830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004834:	4859      	ldr	r0, [pc, #356]	@ (800499c <_printf_i+0x238>)
 8004836:	230a      	movs	r3, #10
 8004838:	e011      	b.n	800485e <_printf_i+0xfa>
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	0608      	lsls	r0, r1, #24
 8004840:	f853 5b04 	ldr.w	r5, [r3], #4
 8004844:	d402      	bmi.n	800484c <_printf_i+0xe8>
 8004846:	0649      	lsls	r1, r1, #25
 8004848:	bf48      	it	mi
 800484a:	b2ad      	uxthmi	r5, r5
 800484c:	2f6f      	cmp	r7, #111	@ 0x6f
 800484e:	4853      	ldr	r0, [pc, #332]	@ (800499c <_printf_i+0x238>)
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	bf14      	ite	ne
 8004854:	230a      	movne	r3, #10
 8004856:	2308      	moveq	r3, #8
 8004858:	2100      	movs	r1, #0
 800485a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800485e:	6866      	ldr	r6, [r4, #4]
 8004860:	60a6      	str	r6, [r4, #8]
 8004862:	2e00      	cmp	r6, #0
 8004864:	bfa2      	ittt	ge
 8004866:	6821      	ldrge	r1, [r4, #0]
 8004868:	f021 0104 	bicge.w	r1, r1, #4
 800486c:	6021      	strge	r1, [r4, #0]
 800486e:	b90d      	cbnz	r5, 8004874 <_printf_i+0x110>
 8004870:	2e00      	cmp	r6, #0
 8004872:	d04b      	beq.n	800490c <_printf_i+0x1a8>
 8004874:	4616      	mov	r6, r2
 8004876:	fbb5 f1f3 	udiv	r1, r5, r3
 800487a:	fb03 5711 	mls	r7, r3, r1, r5
 800487e:	5dc7      	ldrb	r7, [r0, r7]
 8004880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004884:	462f      	mov	r7, r5
 8004886:	42bb      	cmp	r3, r7
 8004888:	460d      	mov	r5, r1
 800488a:	d9f4      	bls.n	8004876 <_printf_i+0x112>
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10b      	bne.n	80048a8 <_printf_i+0x144>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	07df      	lsls	r7, r3, #31
 8004894:	d508      	bpl.n	80048a8 <_printf_i+0x144>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	6861      	ldr	r1, [r4, #4]
 800489a:	4299      	cmp	r1, r3
 800489c:	bfde      	ittt	le
 800489e:	2330      	movle	r3, #48	@ 0x30
 80048a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048a8:	1b92      	subs	r2, r2, r6
 80048aa:	6122      	str	r2, [r4, #16]
 80048ac:	f8cd a000 	str.w	sl, [sp]
 80048b0:	464b      	mov	r3, r9
 80048b2:	aa03      	add	r2, sp, #12
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f7ff fee6 	bl	8004688 <_printf_common>
 80048bc:	3001      	adds	r0, #1
 80048be:	d14a      	bne.n	8004956 <_printf_i+0x1f2>
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	b004      	add	sp, #16
 80048c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	4833      	ldr	r0, [pc, #204]	@ (80049a0 <_printf_i+0x23c>)
 80048d4:	2778      	movs	r7, #120	@ 0x78
 80048d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6831      	ldr	r1, [r6, #0]
 80048de:	061f      	lsls	r7, r3, #24
 80048e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80048e4:	d402      	bmi.n	80048ec <_printf_i+0x188>
 80048e6:	065f      	lsls	r7, r3, #25
 80048e8:	bf48      	it	mi
 80048ea:	b2ad      	uxthmi	r5, r5
 80048ec:	6031      	str	r1, [r6, #0]
 80048ee:	07d9      	lsls	r1, r3, #31
 80048f0:	bf44      	itt	mi
 80048f2:	f043 0320 	orrmi.w	r3, r3, #32
 80048f6:	6023      	strmi	r3, [r4, #0]
 80048f8:	b11d      	cbz	r5, 8004902 <_printf_i+0x19e>
 80048fa:	2310      	movs	r3, #16
 80048fc:	e7ac      	b.n	8004858 <_printf_i+0xf4>
 80048fe:	4827      	ldr	r0, [pc, #156]	@ (800499c <_printf_i+0x238>)
 8004900:	e7e9      	b.n	80048d6 <_printf_i+0x172>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f023 0320 	bic.w	r3, r3, #32
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	e7f6      	b.n	80048fa <_printf_i+0x196>
 800490c:	4616      	mov	r6, r2
 800490e:	e7bd      	b.n	800488c <_printf_i+0x128>
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	6825      	ldr	r5, [r4, #0]
 8004914:	6961      	ldr	r1, [r4, #20]
 8004916:	1d18      	adds	r0, r3, #4
 8004918:	6030      	str	r0, [r6, #0]
 800491a:	062e      	lsls	r6, r5, #24
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	d501      	bpl.n	8004924 <_printf_i+0x1c0>
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0x1c6>
 8004924:	0668      	lsls	r0, r5, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0x1bc>
 8004928:	8019      	strh	r1, [r3, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	4616      	mov	r6, r2
 8004930:	e7bc      	b.n	80048ac <_printf_i+0x148>
 8004932:	6833      	ldr	r3, [r6, #0]
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	6032      	str	r2, [r6, #0]
 8004938:	681e      	ldr	r6, [r3, #0]
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	2100      	movs	r1, #0
 800493e:	4630      	mov	r0, r6
 8004940:	f7fb fc46 	bl	80001d0 <memchr>
 8004944:	b108      	cbz	r0, 800494a <_printf_i+0x1e6>
 8004946:	1b80      	subs	r0, r0, r6
 8004948:	6060      	str	r0, [r4, #4]
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	2300      	movs	r3, #0
 8004950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004954:	e7aa      	b.n	80048ac <_printf_i+0x148>
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	4632      	mov	r2, r6
 800495a:	4649      	mov	r1, r9
 800495c:	4640      	mov	r0, r8
 800495e:	47d0      	blx	sl
 8004960:	3001      	adds	r0, #1
 8004962:	d0ad      	beq.n	80048c0 <_printf_i+0x15c>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	079b      	lsls	r3, r3, #30
 8004968:	d413      	bmi.n	8004992 <_printf_i+0x22e>
 800496a:	68e0      	ldr	r0, [r4, #12]
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	4298      	cmp	r0, r3
 8004970:	bfb8      	it	lt
 8004972:	4618      	movlt	r0, r3
 8004974:	e7a6      	b.n	80048c4 <_printf_i+0x160>
 8004976:	2301      	movs	r3, #1
 8004978:	4632      	mov	r2, r6
 800497a:	4649      	mov	r1, r9
 800497c:	4640      	mov	r0, r8
 800497e:	47d0      	blx	sl
 8004980:	3001      	adds	r0, #1
 8004982:	d09d      	beq.n	80048c0 <_printf_i+0x15c>
 8004984:	3501      	adds	r5, #1
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	9903      	ldr	r1, [sp, #12]
 800498a:	1a5b      	subs	r3, r3, r1
 800498c:	42ab      	cmp	r3, r5
 800498e:	dcf2      	bgt.n	8004976 <_printf_i+0x212>
 8004990:	e7eb      	b.n	800496a <_printf_i+0x206>
 8004992:	2500      	movs	r5, #0
 8004994:	f104 0619 	add.w	r6, r4, #25
 8004998:	e7f5      	b.n	8004986 <_printf_i+0x222>
 800499a:	bf00      	nop
 800499c:	08008826 	.word	0x08008826
 80049a0:	08008837 	.word	0x08008837

080049a4 <_scanf_float>:
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	b087      	sub	sp, #28
 80049aa:	4617      	mov	r7, r2
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	688b      	ldr	r3, [r1, #8]
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80049b6:	bf81      	itttt	hi
 80049b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80049bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80049c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80049c4:	608b      	strhi	r3, [r1, #8]
 80049c6:	680b      	ldr	r3, [r1, #0]
 80049c8:	460a      	mov	r2, r1
 80049ca:	f04f 0500 	mov.w	r5, #0
 80049ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80049d2:	f842 3b1c 	str.w	r3, [r2], #28
 80049d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80049da:	4680      	mov	r8, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	bf98      	it	ls
 80049e0:	f04f 0b00 	movls.w	fp, #0
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	4616      	mov	r6, r2
 80049e8:	46aa      	mov	sl, r5
 80049ea:	46a9      	mov	r9, r5
 80049ec:	9502      	str	r5, [sp, #8]
 80049ee:	68a2      	ldr	r2, [r4, #8]
 80049f0:	b152      	cbz	r2, 8004a08 <_scanf_float+0x64>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80049f8:	d864      	bhi.n	8004ac4 <_scanf_float+0x120>
 80049fa:	2b40      	cmp	r3, #64	@ 0x40
 80049fc:	d83c      	bhi.n	8004a78 <_scanf_float+0xd4>
 80049fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004a02:	b2c8      	uxtb	r0, r1
 8004a04:	280e      	cmp	r0, #14
 8004a06:	d93a      	bls.n	8004a7e <_scanf_float+0xda>
 8004a08:	f1b9 0f00 	cmp.w	r9, #0
 8004a0c:	d003      	beq.n	8004a16 <_scanf_float+0x72>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a1a:	f1ba 0f01 	cmp.w	sl, #1
 8004a1e:	f200 8117 	bhi.w	8004c50 <_scanf_float+0x2ac>
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	429e      	cmp	r6, r3
 8004a26:	f200 8108 	bhi.w	8004c3a <_scanf_float+0x296>
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	b007      	add	sp, #28
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004a36:	2a0d      	cmp	r2, #13
 8004a38:	d8e6      	bhi.n	8004a08 <_scanf_float+0x64>
 8004a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a40 <_scanf_float+0x9c>)
 8004a3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a40:	08004b87 	.word	0x08004b87
 8004a44:	08004a09 	.word	0x08004a09
 8004a48:	08004a09 	.word	0x08004a09
 8004a4c:	08004a09 	.word	0x08004a09
 8004a50:	08004be7 	.word	0x08004be7
 8004a54:	08004bbf 	.word	0x08004bbf
 8004a58:	08004a09 	.word	0x08004a09
 8004a5c:	08004a09 	.word	0x08004a09
 8004a60:	08004b95 	.word	0x08004b95
 8004a64:	08004a09 	.word	0x08004a09
 8004a68:	08004a09 	.word	0x08004a09
 8004a6c:	08004a09 	.word	0x08004a09
 8004a70:	08004a09 	.word	0x08004a09
 8004a74:	08004b4d 	.word	0x08004b4d
 8004a78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004a7c:	e7db      	b.n	8004a36 <_scanf_float+0x92>
 8004a7e:	290e      	cmp	r1, #14
 8004a80:	d8c2      	bhi.n	8004a08 <_scanf_float+0x64>
 8004a82:	a001      	add	r0, pc, #4	@ (adr r0, 8004a88 <_scanf_float+0xe4>)
 8004a84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a88:	08004b3d 	.word	0x08004b3d
 8004a8c:	08004a09 	.word	0x08004a09
 8004a90:	08004b3d 	.word	0x08004b3d
 8004a94:	08004bd3 	.word	0x08004bd3
 8004a98:	08004a09 	.word	0x08004a09
 8004a9c:	08004ae5 	.word	0x08004ae5
 8004aa0:	08004b23 	.word	0x08004b23
 8004aa4:	08004b23 	.word	0x08004b23
 8004aa8:	08004b23 	.word	0x08004b23
 8004aac:	08004b23 	.word	0x08004b23
 8004ab0:	08004b23 	.word	0x08004b23
 8004ab4:	08004b23 	.word	0x08004b23
 8004ab8:	08004b23 	.word	0x08004b23
 8004abc:	08004b23 	.word	0x08004b23
 8004ac0:	08004b23 	.word	0x08004b23
 8004ac4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004ac6:	d809      	bhi.n	8004adc <_scanf_float+0x138>
 8004ac8:	2b60      	cmp	r3, #96	@ 0x60
 8004aca:	d8b2      	bhi.n	8004a32 <_scanf_float+0x8e>
 8004acc:	2b54      	cmp	r3, #84	@ 0x54
 8004ace:	d07b      	beq.n	8004bc8 <_scanf_float+0x224>
 8004ad0:	2b59      	cmp	r3, #89	@ 0x59
 8004ad2:	d199      	bne.n	8004a08 <_scanf_float+0x64>
 8004ad4:	2d07      	cmp	r5, #7
 8004ad6:	d197      	bne.n	8004a08 <_scanf_float+0x64>
 8004ad8:	2508      	movs	r5, #8
 8004ada:	e02c      	b.n	8004b36 <_scanf_float+0x192>
 8004adc:	2b74      	cmp	r3, #116	@ 0x74
 8004ade:	d073      	beq.n	8004bc8 <_scanf_float+0x224>
 8004ae0:	2b79      	cmp	r3, #121	@ 0x79
 8004ae2:	e7f6      	b.n	8004ad2 <_scanf_float+0x12e>
 8004ae4:	6821      	ldr	r1, [r4, #0]
 8004ae6:	05c8      	lsls	r0, r1, #23
 8004ae8:	d51b      	bpl.n	8004b22 <_scanf_float+0x17e>
 8004aea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004aee:	6021      	str	r1, [r4, #0]
 8004af0:	f109 0901 	add.w	r9, r9, #1
 8004af4:	f1bb 0f00 	cmp.w	fp, #0
 8004af8:	d003      	beq.n	8004b02 <_scanf_float+0x15e>
 8004afa:	3201      	adds	r2, #1
 8004afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b00:	60a2      	str	r2, [r4, #8]
 8004b02:	68a3      	ldr	r3, [r4, #8]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f340 8087 	ble.w	8004c28 <_scanf_float+0x284>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e765      	b.n	80049ee <_scanf_float+0x4a>
 8004b22:	eb1a 0105 	adds.w	r1, sl, r5
 8004b26:	f47f af6f 	bne.w	8004a08 <_scanf_float+0x64>
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004b30:	6022      	str	r2, [r4, #0]
 8004b32:	460d      	mov	r5, r1
 8004b34:	468a      	mov	sl, r1
 8004b36:	f806 3b01 	strb.w	r3, [r6], #1
 8004b3a:	e7e2      	b.n	8004b02 <_scanf_float+0x15e>
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	0610      	lsls	r0, r2, #24
 8004b40:	f57f af62 	bpl.w	8004a08 <_scanf_float+0x64>
 8004b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b48:	6022      	str	r2, [r4, #0]
 8004b4a:	e7f4      	b.n	8004b36 <_scanf_float+0x192>
 8004b4c:	f1ba 0f00 	cmp.w	sl, #0
 8004b50:	d10e      	bne.n	8004b70 <_scanf_float+0x1cc>
 8004b52:	f1b9 0f00 	cmp.w	r9, #0
 8004b56:	d10e      	bne.n	8004b76 <_scanf_float+0x1d2>
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b5e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b62:	d108      	bne.n	8004b76 <_scanf_float+0x1d2>
 8004b64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b68:	6022      	str	r2, [r4, #0]
 8004b6a:	f04f 0a01 	mov.w	sl, #1
 8004b6e:	e7e2      	b.n	8004b36 <_scanf_float+0x192>
 8004b70:	f1ba 0f02 	cmp.w	sl, #2
 8004b74:	d055      	beq.n	8004c22 <_scanf_float+0x27e>
 8004b76:	2d01      	cmp	r5, #1
 8004b78:	d002      	beq.n	8004b80 <_scanf_float+0x1dc>
 8004b7a:	2d04      	cmp	r5, #4
 8004b7c:	f47f af44 	bne.w	8004a08 <_scanf_float+0x64>
 8004b80:	3501      	adds	r5, #1
 8004b82:	b2ed      	uxtb	r5, r5
 8004b84:	e7d7      	b.n	8004b36 <_scanf_float+0x192>
 8004b86:	f1ba 0f01 	cmp.w	sl, #1
 8004b8a:	f47f af3d 	bne.w	8004a08 <_scanf_float+0x64>
 8004b8e:	f04f 0a02 	mov.w	sl, #2
 8004b92:	e7d0      	b.n	8004b36 <_scanf_float+0x192>
 8004b94:	b97d      	cbnz	r5, 8004bb6 <_scanf_float+0x212>
 8004b96:	f1b9 0f00 	cmp.w	r9, #0
 8004b9a:	f47f af38 	bne.w	8004a0e <_scanf_float+0x6a>
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ba4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ba8:	f040 8108 	bne.w	8004dbc <_scanf_float+0x418>
 8004bac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	2501      	movs	r5, #1
 8004bb4:	e7bf      	b.n	8004b36 <_scanf_float+0x192>
 8004bb6:	2d03      	cmp	r5, #3
 8004bb8:	d0e2      	beq.n	8004b80 <_scanf_float+0x1dc>
 8004bba:	2d05      	cmp	r5, #5
 8004bbc:	e7de      	b.n	8004b7c <_scanf_float+0x1d8>
 8004bbe:	2d02      	cmp	r5, #2
 8004bc0:	f47f af22 	bne.w	8004a08 <_scanf_float+0x64>
 8004bc4:	2503      	movs	r5, #3
 8004bc6:	e7b6      	b.n	8004b36 <_scanf_float+0x192>
 8004bc8:	2d06      	cmp	r5, #6
 8004bca:	f47f af1d 	bne.w	8004a08 <_scanf_float+0x64>
 8004bce:	2507      	movs	r5, #7
 8004bd0:	e7b1      	b.n	8004b36 <_scanf_float+0x192>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	0591      	lsls	r1, r2, #22
 8004bd6:	f57f af17 	bpl.w	8004a08 <_scanf_float+0x64>
 8004bda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004bde:	6022      	str	r2, [r4, #0]
 8004be0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004be4:	e7a7      	b.n	8004b36 <_scanf_float+0x192>
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004bec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004bf0:	d006      	beq.n	8004c00 <_scanf_float+0x25c>
 8004bf2:	0550      	lsls	r0, r2, #21
 8004bf4:	f57f af08 	bpl.w	8004a08 <_scanf_float+0x64>
 8004bf8:	f1b9 0f00 	cmp.w	r9, #0
 8004bfc:	f000 80de 	beq.w	8004dbc <_scanf_float+0x418>
 8004c00:	0591      	lsls	r1, r2, #22
 8004c02:	bf58      	it	pl
 8004c04:	9902      	ldrpl	r1, [sp, #8]
 8004c06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c0a:	bf58      	it	pl
 8004c0c:	eba9 0101 	subpl.w	r1, r9, r1
 8004c10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004c14:	bf58      	it	pl
 8004c16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	f04f 0900 	mov.w	r9, #0
 8004c20:	e789      	b.n	8004b36 <_scanf_float+0x192>
 8004c22:	f04f 0a03 	mov.w	sl, #3
 8004c26:	e786      	b.n	8004b36 <_scanf_float+0x192>
 8004c28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4798      	blx	r3
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f43f aedb 	beq.w	80049ee <_scanf_float+0x4a>
 8004c38:	e6e6      	b.n	8004a08 <_scanf_float+0x64>
 8004c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c42:	463a      	mov	r2, r7
 8004c44:	4640      	mov	r0, r8
 8004c46:	4798      	blx	r3
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e6e8      	b.n	8004a22 <_scanf_float+0x7e>
 8004c50:	1e6b      	subs	r3, r5, #1
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d824      	bhi.n	8004ca0 <_scanf_float+0x2fc>
 8004c56:	2d02      	cmp	r5, #2
 8004c58:	d836      	bhi.n	8004cc8 <_scanf_float+0x324>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	429e      	cmp	r6, r3
 8004c5e:	f67f aee4 	bls.w	8004a2a <_scanf_float+0x86>
 8004c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	4798      	blx	r3
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	e7f0      	b.n	8004c5a <_scanf_float+0x2b6>
 8004c78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004c80:	463a      	mov	r2, r7
 8004c82:	4640      	mov	r0, r8
 8004c84:	4798      	blx	r3
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	6123      	str	r3, [r4, #16]
 8004c8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c90:	fa5f fa8a 	uxtb.w	sl, sl
 8004c94:	f1ba 0f02 	cmp.w	sl, #2
 8004c98:	d1ee      	bne.n	8004c78 <_scanf_float+0x2d4>
 8004c9a:	3d03      	subs	r5, #3
 8004c9c:	b2ed      	uxtb	r5, r5
 8004c9e:	1b76      	subs	r6, r6, r5
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	05da      	lsls	r2, r3, #23
 8004ca4:	d530      	bpl.n	8004d08 <_scanf_float+0x364>
 8004ca6:	055b      	lsls	r3, r3, #21
 8004ca8:	d511      	bpl.n	8004cce <_scanf_float+0x32a>
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	429e      	cmp	r6, r3
 8004cae:	f67f aebc 	bls.w	8004a2a <_scanf_float+0x86>
 8004cb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cba:	463a      	mov	r2, r7
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	4798      	blx	r3
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	6123      	str	r3, [r4, #16]
 8004cc6:	e7f0      	b.n	8004caa <_scanf_float+0x306>
 8004cc8:	46aa      	mov	sl, r5
 8004cca:	46b3      	mov	fp, r6
 8004ccc:	e7de      	b.n	8004c8c <_scanf_float+0x2e8>
 8004cce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	2965      	cmp	r1, #101	@ 0x65
 8004cd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cda:	f106 35ff 	add.w	r5, r6, #4294967295
 8004cde:	6123      	str	r3, [r4, #16]
 8004ce0:	d00c      	beq.n	8004cfc <_scanf_float+0x358>
 8004ce2:	2945      	cmp	r1, #69	@ 0x45
 8004ce4:	d00a      	beq.n	8004cfc <_scanf_float+0x358>
 8004ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cea:	463a      	mov	r2, r7
 8004cec:	4640      	mov	r0, r8
 8004cee:	4798      	blx	r3
 8004cf0:	6923      	ldr	r3, [r4, #16]
 8004cf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	1eb5      	subs	r5, r6, #2
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d00:	463a      	mov	r2, r7
 8004d02:	4640      	mov	r0, r8
 8004d04:	4798      	blx	r3
 8004d06:	462e      	mov	r6, r5
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	f012 0210 	ands.w	r2, r2, #16
 8004d0e:	d001      	beq.n	8004d14 <_scanf_float+0x370>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e68b      	b.n	8004a2c <_scanf_float+0x88>
 8004d14:	7032      	strb	r2, [r6, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d20:	d11c      	bne.n	8004d5c <_scanf_float+0x3b8>
 8004d22:	9b02      	ldr	r3, [sp, #8]
 8004d24:	454b      	cmp	r3, r9
 8004d26:	eba3 0209 	sub.w	r2, r3, r9
 8004d2a:	d123      	bne.n	8004d74 <_scanf_float+0x3d0>
 8004d2c:	9901      	ldr	r1, [sp, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4640      	mov	r0, r8
 8004d32:	f002 fbf9 	bl	8007528 <_strtod_r>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f011 0f02 	tst.w	r1, #2
 8004d40:	ec57 6b10 	vmov	r6, r7, d0
 8004d44:	f103 0204 	add.w	r2, r3, #4
 8004d48:	d01f      	beq.n	8004d8a <_scanf_float+0x3e6>
 8004d4a:	9903      	ldr	r1, [sp, #12]
 8004d4c:	600a      	str	r2, [r1, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	e9c3 6700 	strd	r6, r7, [r3]
 8004d54:	68e3      	ldr	r3, [r4, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60e3      	str	r3, [r4, #12]
 8004d5a:	e7d9      	b.n	8004d10 <_scanf_float+0x36c>
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0e4      	beq.n	8004d2c <_scanf_float+0x388>
 8004d62:	9905      	ldr	r1, [sp, #20]
 8004d64:	230a      	movs	r3, #10
 8004d66:	3101      	adds	r1, #1
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f002 fc5d 	bl	8007628 <_strtol_r>
 8004d6e:	9b04      	ldr	r3, [sp, #16]
 8004d70:	9e05      	ldr	r6, [sp, #20]
 8004d72:	1ac2      	subs	r2, r0, r3
 8004d74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004d78:	429e      	cmp	r6, r3
 8004d7a:	bf28      	it	cs
 8004d7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004d80:	4910      	ldr	r1, [pc, #64]	@ (8004dc4 <_scanf_float+0x420>)
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f8e4 	bl	8004f50 <siprintf>
 8004d88:	e7d0      	b.n	8004d2c <_scanf_float+0x388>
 8004d8a:	f011 0f04 	tst.w	r1, #4
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	600a      	str	r2, [r1, #0]
 8004d92:	d1dc      	bne.n	8004d4e <_scanf_float+0x3aa>
 8004d94:	681d      	ldr	r5, [r3, #0]
 8004d96:	4632      	mov	r2, r6
 8004d98:	463b      	mov	r3, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	f7fb fec5 	bl	8000b2c <__aeabi_dcmpun>
 8004da2:	b128      	cbz	r0, 8004db0 <_scanf_float+0x40c>
 8004da4:	4808      	ldr	r0, [pc, #32]	@ (8004dc8 <_scanf_float+0x424>)
 8004da6:	f000 f9b7 	bl	8005118 <nanf>
 8004daa:	ed85 0a00 	vstr	s0, [r5]
 8004dae:	e7d1      	b.n	8004d54 <_scanf_float+0x3b0>
 8004db0:	4630      	mov	r0, r6
 8004db2:	4639      	mov	r1, r7
 8004db4:	f7fb ff18 	bl	8000be8 <__aeabi_d2f>
 8004db8:	6028      	str	r0, [r5, #0]
 8004dba:	e7cb      	b.n	8004d54 <_scanf_float+0x3b0>
 8004dbc:	f04f 0900 	mov.w	r9, #0
 8004dc0:	e629      	b.n	8004a16 <_scanf_float+0x72>
 8004dc2:	bf00      	nop
 8004dc4:	08008848 	.word	0x08008848
 8004dc8:	08008bdd 	.word	0x08008bdd

08004dcc <std>:
 8004dcc:	2300      	movs	r3, #0
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dda:	6083      	str	r3, [r0, #8]
 8004ddc:	8181      	strh	r1, [r0, #12]
 8004dde:	6643      	str	r3, [r0, #100]	@ 0x64
 8004de0:	81c2      	strh	r2, [r0, #14]
 8004de2:	6183      	str	r3, [r0, #24]
 8004de4:	4619      	mov	r1, r3
 8004de6:	2208      	movs	r2, #8
 8004de8:	305c      	adds	r0, #92	@ 0x5c
 8004dea:	f000 f914 	bl	8005016 <memset>
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <std+0x58>)
 8004df0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <std+0x5c>)
 8004df4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <std+0x60>)
 8004df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <std+0x64>)
 8004dfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <std+0x68>)
 8004e00:	6224      	str	r4, [r4, #32]
 8004e02:	429c      	cmp	r4, r3
 8004e04:	d006      	beq.n	8004e14 <std+0x48>
 8004e06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e0a:	4294      	cmp	r4, r2
 8004e0c:	d002      	beq.n	8004e14 <std+0x48>
 8004e0e:	33d0      	adds	r3, #208	@ 0xd0
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d105      	bne.n	8004e20 <std+0x54>
 8004e14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e1c:	f000 b978 	b.w	8005110 <__retarget_lock_init_recursive>
 8004e20:	bd10      	pop	{r4, pc}
 8004e22:	bf00      	nop
 8004e24:	08004f91 	.word	0x08004f91
 8004e28:	08004fb3 	.word	0x08004fb3
 8004e2c:	08004feb 	.word	0x08004feb
 8004e30:	0800500f 	.word	0x0800500f
 8004e34:	200002d0 	.word	0x200002d0

08004e38 <stdio_exit_handler>:
 8004e38:	4a02      	ldr	r2, [pc, #8]	@ (8004e44 <stdio_exit_handler+0xc>)
 8004e3a:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <stdio_exit_handler+0x10>)
 8004e3c:	4803      	ldr	r0, [pc, #12]	@ (8004e4c <stdio_exit_handler+0x14>)
 8004e3e:	f000 b869 	b.w	8004f14 <_fwalk_sglue>
 8004e42:	bf00      	nop
 8004e44:	20000010 	.word	0x20000010
 8004e48:	080079e5 	.word	0x080079e5
 8004e4c:	20000020 	.word	0x20000020

08004e50 <cleanup_stdio>:
 8004e50:	6841      	ldr	r1, [r0, #4]
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <cleanup_stdio+0x34>)
 8004e54:	4299      	cmp	r1, r3
 8004e56:	b510      	push	{r4, lr}
 8004e58:	4604      	mov	r4, r0
 8004e5a:	d001      	beq.n	8004e60 <cleanup_stdio+0x10>
 8004e5c:	f002 fdc2 	bl	80079e4 <_fflush_r>
 8004e60:	68a1      	ldr	r1, [r4, #8]
 8004e62:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <cleanup_stdio+0x38>)
 8004e64:	4299      	cmp	r1, r3
 8004e66:	d002      	beq.n	8004e6e <cleanup_stdio+0x1e>
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f002 fdbb 	bl	80079e4 <_fflush_r>
 8004e6e:	68e1      	ldr	r1, [r4, #12]
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <cleanup_stdio+0x3c>)
 8004e72:	4299      	cmp	r1, r3
 8004e74:	d004      	beq.n	8004e80 <cleanup_stdio+0x30>
 8004e76:	4620      	mov	r0, r4
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	f002 bdb2 	b.w	80079e4 <_fflush_r>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	bf00      	nop
 8004e84:	200002d0 	.word	0x200002d0
 8004e88:	20000338 	.word	0x20000338
 8004e8c:	200003a0 	.word	0x200003a0

08004e90 <global_stdio_init.part.0>:
 8004e90:	b510      	push	{r4, lr}
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <global_stdio_init.part.0+0x30>)
 8004e94:	4c0b      	ldr	r4, [pc, #44]	@ (8004ec4 <global_stdio_init.part.0+0x34>)
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <global_stdio_init.part.0+0x38>)
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	f7ff ff94 	bl	8004dcc <std>
 8004ea4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	2109      	movs	r1, #9
 8004eac:	f7ff ff8e 	bl	8004dcc <std>
 8004eb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eba:	2112      	movs	r1, #18
 8004ebc:	f7ff bf86 	b.w	8004dcc <std>
 8004ec0:	20000408 	.word	0x20000408
 8004ec4:	200002d0 	.word	0x200002d0
 8004ec8:	08004e39 	.word	0x08004e39

08004ecc <__sfp_lock_acquire>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	@ (8004ed4 <__sfp_lock_acquire+0x8>)
 8004ece:	f000 b920 	b.w	8005112 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000411 	.word	0x20000411

08004ed8 <__sfp_lock_release>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	@ (8004ee0 <__sfp_lock_release+0x8>)
 8004eda:	f000 b91b 	b.w	8005114 <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20000411 	.word	0x20000411

08004ee4 <__sinit>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	f7ff fff0 	bl	8004ecc <__sfp_lock_acquire>
 8004eec:	6a23      	ldr	r3, [r4, #32]
 8004eee:	b11b      	cbz	r3, 8004ef8 <__sinit+0x14>
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	f7ff bff0 	b.w	8004ed8 <__sfp_lock_release>
 8004ef8:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <__sinit+0x28>)
 8004efa:	6223      	str	r3, [r4, #32]
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <__sinit+0x2c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f5      	bne.n	8004ef0 <__sinit+0xc>
 8004f04:	f7ff ffc4 	bl	8004e90 <global_stdio_init.part.0>
 8004f08:	e7f2      	b.n	8004ef0 <__sinit+0xc>
 8004f0a:	bf00      	nop
 8004f0c:	08004e51 	.word	0x08004e51
 8004f10:	20000408 	.word	0x20000408

08004f14 <_fwalk_sglue>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	4607      	mov	r7, r0
 8004f1a:	4688      	mov	r8, r1
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	2600      	movs	r6, #0
 8004f20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f24:	f1b9 0901 	subs.w	r9, r9, #1
 8004f28:	d505      	bpl.n	8004f36 <_fwalk_sglue+0x22>
 8004f2a:	6824      	ldr	r4, [r4, #0]
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	d1f7      	bne.n	8004f20 <_fwalk_sglue+0xc>
 8004f30:	4630      	mov	r0, r6
 8004f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d907      	bls.n	8004f4c <_fwalk_sglue+0x38>
 8004f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f40:	3301      	adds	r3, #1
 8004f42:	d003      	beq.n	8004f4c <_fwalk_sglue+0x38>
 8004f44:	4629      	mov	r1, r5
 8004f46:	4638      	mov	r0, r7
 8004f48:	47c0      	blx	r8
 8004f4a:	4306      	orrs	r6, r0
 8004f4c:	3568      	adds	r5, #104	@ 0x68
 8004f4e:	e7e9      	b.n	8004f24 <_fwalk_sglue+0x10>

08004f50 <siprintf>:
 8004f50:	b40e      	push	{r1, r2, r3}
 8004f52:	b500      	push	{lr}
 8004f54:	b09c      	sub	sp, #112	@ 0x70
 8004f56:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f58:	9002      	str	r0, [sp, #8]
 8004f5a:	9006      	str	r0, [sp, #24]
 8004f5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f60:	4809      	ldr	r0, [pc, #36]	@ (8004f88 <siprintf+0x38>)
 8004f62:	9107      	str	r1, [sp, #28]
 8004f64:	9104      	str	r1, [sp, #16]
 8004f66:	4909      	ldr	r1, [pc, #36]	@ (8004f8c <siprintf+0x3c>)
 8004f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f6c:	9105      	str	r1, [sp, #20]
 8004f6e:	6800      	ldr	r0, [r0, #0]
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	a902      	add	r1, sp, #8
 8004f74:	f002 fbb6 	bl	80076e4 <_svfiprintf_r>
 8004f78:	9b02      	ldr	r3, [sp, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	b01c      	add	sp, #112	@ 0x70
 8004f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f84:	b003      	add	sp, #12
 8004f86:	4770      	bx	lr
 8004f88:	2000001c 	.word	0x2000001c
 8004f8c:	ffff0208 	.word	0xffff0208

08004f90 <__sread>:
 8004f90:	b510      	push	{r4, lr}
 8004f92:	460c      	mov	r4, r1
 8004f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f98:	f000 f86c 	bl	8005074 <_read_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	bfab      	itete	ge
 8004fa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8004fa4:	181b      	addge	r3, r3, r0
 8004fa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004faa:	bfac      	ite	ge
 8004fac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fae:	81a3      	strhlt	r3, [r4, #12]
 8004fb0:	bd10      	pop	{r4, pc}

08004fb2 <__swrite>:
 8004fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	461f      	mov	r7, r3
 8004fb8:	898b      	ldrh	r3, [r1, #12]
 8004fba:	05db      	lsls	r3, r3, #23
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	d505      	bpl.n	8004fd0 <__swrite+0x1e>
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	2302      	movs	r3, #2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f000 f840 	bl	8005050 <_lseek_r>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	4632      	mov	r2, r6
 8004fde:	463b      	mov	r3, r7
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe6:	f000 b857 	b.w	8005098 <_write_r>

08004fea <__sseek>:
 8004fea:	b510      	push	{r4, lr}
 8004fec:	460c      	mov	r4, r1
 8004fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff2:	f000 f82d 	bl	8005050 <_lseek_r>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	bf15      	itete	ne
 8004ffc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ffe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005006:	81a3      	strheq	r3, [r4, #12]
 8005008:	bf18      	it	ne
 800500a:	81a3      	strhne	r3, [r4, #12]
 800500c:	bd10      	pop	{r4, pc}

0800500e <__sclose>:
 800500e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005012:	f000 b80d 	b.w	8005030 <_close_r>

08005016 <memset>:
 8005016:	4402      	add	r2, r0
 8005018:	4603      	mov	r3, r0
 800501a:	4293      	cmp	r3, r2
 800501c:	d100      	bne.n	8005020 <memset+0xa>
 800501e:	4770      	bx	lr
 8005020:	f803 1b01 	strb.w	r1, [r3], #1
 8005024:	e7f9      	b.n	800501a <memset+0x4>
	...

08005028 <_localeconv_r>:
 8005028:	4800      	ldr	r0, [pc, #0]	@ (800502c <_localeconv_r+0x4>)
 800502a:	4770      	bx	lr
 800502c:	2000015c 	.word	0x2000015c

08005030 <_close_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4d06      	ldr	r5, [pc, #24]	@ (800504c <_close_r+0x1c>)
 8005034:	2300      	movs	r3, #0
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	f7fc fed6 	bl	8001dec <_close>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_close_r+0x1a>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_close_r+0x1a>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	2000040c 	.word	0x2000040c

08005050 <_lseek_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	@ (8005070 <_lseek_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fc feeb 	bl	8001e3a <_lseek>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_lseek_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_lseek_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	2000040c 	.word	0x2000040c

08005074 <_read_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4d07      	ldr	r5, [pc, #28]	@ (8005094 <_read_r+0x20>)
 8005078:	4604      	mov	r4, r0
 800507a:	4608      	mov	r0, r1
 800507c:	4611      	mov	r1, r2
 800507e:	2200      	movs	r2, #0
 8005080:	602a      	str	r2, [r5, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	f7fc fe79 	bl	8001d7a <_read>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_read_r+0x1e>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	b103      	cbz	r3, 8005092 <_read_r+0x1e>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	2000040c 	.word	0x2000040c

08005098 <_write_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d07      	ldr	r5, [pc, #28]	@ (80050b8 <_write_r+0x20>)
 800509c:	4604      	mov	r4, r0
 800509e:	4608      	mov	r0, r1
 80050a0:	4611      	mov	r1, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	602a      	str	r2, [r5, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f7fc fe84 	bl	8001db4 <_write>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_write_r+0x1e>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_write_r+0x1e>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	2000040c 	.word	0x2000040c

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	@ (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000001c 	.word	0x2000001c

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005100 <__libc_init_array+0x38>)
 80050cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005104 <__libc_init_array+0x3c>)
 80050ce:	1b64      	subs	r4, r4, r5
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	2600      	movs	r6, #0
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005108 <__libc_init_array+0x40>)
 80050da:	4c0c      	ldr	r4, [pc, #48]	@ (800510c <__libc_init_array+0x44>)
 80050dc:	f003 fb72 	bl	80087c4 <_init>
 80050e0:	1b64      	subs	r4, r4, r5
 80050e2:	10a4      	asrs	r4, r4, #2
 80050e4:	2600      	movs	r6, #0
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	08008c48 	.word	0x08008c48
 8005104:	08008c48 	.word	0x08008c48
 8005108:	08008c48 	.word	0x08008c48
 800510c:	08008c4c 	.word	0x08008c4c

08005110 <__retarget_lock_init_recursive>:
 8005110:	4770      	bx	lr

08005112 <__retarget_lock_acquire_recursive>:
 8005112:	4770      	bx	lr

08005114 <__retarget_lock_release_recursive>:
 8005114:	4770      	bx	lr
	...

08005118 <nanf>:
 8005118:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005120 <nanf+0x8>
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	7fc00000 	.word	0x7fc00000

08005124 <quorem>:
 8005124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	6903      	ldr	r3, [r0, #16]
 800512a:	690c      	ldr	r4, [r1, #16]
 800512c:	42a3      	cmp	r3, r4
 800512e:	4607      	mov	r7, r0
 8005130:	db7e      	blt.n	8005230 <quorem+0x10c>
 8005132:	3c01      	subs	r4, #1
 8005134:	f101 0814 	add.w	r8, r1, #20
 8005138:	00a3      	lsls	r3, r4, #2
 800513a:	f100 0514 	add.w	r5, r0, #20
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800514a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800514e:	3301      	adds	r3, #1
 8005150:	429a      	cmp	r2, r3
 8005152:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005156:	fbb2 f6f3 	udiv	r6, r2, r3
 800515a:	d32e      	bcc.n	80051ba <quorem+0x96>
 800515c:	f04f 0a00 	mov.w	sl, #0
 8005160:	46c4      	mov	ip, r8
 8005162:	46ae      	mov	lr, r5
 8005164:	46d3      	mov	fp, sl
 8005166:	f85c 3b04 	ldr.w	r3, [ip], #4
 800516a:	b298      	uxth	r0, r3
 800516c:	fb06 a000 	mla	r0, r6, r0, sl
 8005170:	0c02      	lsrs	r2, r0, #16
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	fb06 2303 	mla	r3, r6, r3, r2
 8005178:	f8de 2000 	ldr.w	r2, [lr]
 800517c:	b280      	uxth	r0, r0
 800517e:	b292      	uxth	r2, r2
 8005180:	1a12      	subs	r2, r2, r0
 8005182:	445a      	add	r2, fp
 8005184:	f8de 0000 	ldr.w	r0, [lr]
 8005188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800518c:	b29b      	uxth	r3, r3
 800518e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005192:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005196:	b292      	uxth	r2, r2
 8005198:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800519c:	45e1      	cmp	r9, ip
 800519e:	f84e 2b04 	str.w	r2, [lr], #4
 80051a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80051a6:	d2de      	bcs.n	8005166 <quorem+0x42>
 80051a8:	9b00      	ldr	r3, [sp, #0]
 80051aa:	58eb      	ldr	r3, [r5, r3]
 80051ac:	b92b      	cbnz	r3, 80051ba <quorem+0x96>
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	3b04      	subs	r3, #4
 80051b2:	429d      	cmp	r5, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	d32f      	bcc.n	8005218 <quorem+0xf4>
 80051b8:	613c      	str	r4, [r7, #16]
 80051ba:	4638      	mov	r0, r7
 80051bc:	f001 f9c4 	bl	8006548 <__mcmp>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	db25      	blt.n	8005210 <quorem+0xec>
 80051c4:	4629      	mov	r1, r5
 80051c6:	2000      	movs	r0, #0
 80051c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80051cc:	f8d1 c000 	ldr.w	ip, [r1]
 80051d0:	fa1f fe82 	uxth.w	lr, r2
 80051d4:	fa1f f38c 	uxth.w	r3, ip
 80051d8:	eba3 030e 	sub.w	r3, r3, lr
 80051dc:	4403      	add	r3, r0
 80051de:	0c12      	lsrs	r2, r2, #16
 80051e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80051e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051ee:	45c1      	cmp	r9, r8
 80051f0:	f841 3b04 	str.w	r3, [r1], #4
 80051f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051f8:	d2e6      	bcs.n	80051c8 <quorem+0xa4>
 80051fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005202:	b922      	cbnz	r2, 800520e <quorem+0xea>
 8005204:	3b04      	subs	r3, #4
 8005206:	429d      	cmp	r5, r3
 8005208:	461a      	mov	r2, r3
 800520a:	d30b      	bcc.n	8005224 <quorem+0x100>
 800520c:	613c      	str	r4, [r7, #16]
 800520e:	3601      	adds	r6, #1
 8005210:	4630      	mov	r0, r6
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	3b04      	subs	r3, #4
 800521c:	2a00      	cmp	r2, #0
 800521e:	d1cb      	bne.n	80051b8 <quorem+0x94>
 8005220:	3c01      	subs	r4, #1
 8005222:	e7c6      	b.n	80051b2 <quorem+0x8e>
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	3b04      	subs	r3, #4
 8005228:	2a00      	cmp	r2, #0
 800522a:	d1ef      	bne.n	800520c <quorem+0xe8>
 800522c:	3c01      	subs	r4, #1
 800522e:	e7ea      	b.n	8005206 <quorem+0xe2>
 8005230:	2000      	movs	r0, #0
 8005232:	e7ee      	b.n	8005212 <quorem+0xee>
 8005234:	0000      	movs	r0, r0
	...

08005238 <_dtoa_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	69c7      	ldr	r7, [r0, #28]
 800523e:	b099      	sub	sp, #100	@ 0x64
 8005240:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005244:	ec55 4b10 	vmov	r4, r5, d0
 8005248:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800524a:	9109      	str	r1, [sp, #36]	@ 0x24
 800524c:	4683      	mov	fp, r0
 800524e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005252:	b97f      	cbnz	r7, 8005274 <_dtoa_r+0x3c>
 8005254:	2010      	movs	r0, #16
 8005256:	f000 fdfd 	bl	8005e54 <malloc>
 800525a:	4602      	mov	r2, r0
 800525c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005260:	b920      	cbnz	r0, 800526c <_dtoa_r+0x34>
 8005262:	4ba7      	ldr	r3, [pc, #668]	@ (8005500 <_dtoa_r+0x2c8>)
 8005264:	21ef      	movs	r1, #239	@ 0xef
 8005266:	48a7      	ldr	r0, [pc, #668]	@ (8005504 <_dtoa_r+0x2cc>)
 8005268:	f002 fc36 	bl	8007ad8 <__assert_func>
 800526c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005270:	6007      	str	r7, [r0, #0]
 8005272:	60c7      	str	r7, [r0, #12]
 8005274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	b159      	cbz	r1, 8005294 <_dtoa_r+0x5c>
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	604a      	str	r2, [r1, #4]
 8005280:	2301      	movs	r3, #1
 8005282:	4093      	lsls	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	4658      	mov	r0, fp
 8005288:	f000 feda 	bl	8006040 <_Bfree>
 800528c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	1e2b      	subs	r3, r5, #0
 8005296:	bfb9      	ittee	lt
 8005298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800529c:	9303      	strlt	r3, [sp, #12]
 800529e:	2300      	movge	r3, #0
 80052a0:	6033      	strge	r3, [r6, #0]
 80052a2:	9f03      	ldr	r7, [sp, #12]
 80052a4:	4b98      	ldr	r3, [pc, #608]	@ (8005508 <_dtoa_r+0x2d0>)
 80052a6:	bfbc      	itt	lt
 80052a8:	2201      	movlt	r2, #1
 80052aa:	6032      	strlt	r2, [r6, #0]
 80052ac:	43bb      	bics	r3, r7
 80052ae:	d112      	bne.n	80052d6 <_dtoa_r+0x9e>
 80052b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052bc:	4323      	orrs	r3, r4
 80052be:	f000 854d 	beq.w	8005d5c <_dtoa_r+0xb24>
 80052c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80052c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800551c <_dtoa_r+0x2e4>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 854f 	beq.w	8005d6c <_dtoa_r+0xb34>
 80052ce:	f10a 0303 	add.w	r3, sl, #3
 80052d2:	f000 bd49 	b.w	8005d68 <_dtoa_r+0xb30>
 80052d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	ec51 0b17 	vmov	r0, r1, d7
 80052e0:	2300      	movs	r3, #0
 80052e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80052e6:	f7fb fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ea:	4680      	mov	r8, r0
 80052ec:	b158      	cbz	r0, 8005306 <_dtoa_r+0xce>
 80052ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052f0:	2301      	movs	r3, #1
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80052f6:	b113      	cbz	r3, 80052fe <_dtoa_r+0xc6>
 80052f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80052fa:	4b84      	ldr	r3, [pc, #528]	@ (800550c <_dtoa_r+0x2d4>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005520 <_dtoa_r+0x2e8>
 8005302:	f000 bd33 	b.w	8005d6c <_dtoa_r+0xb34>
 8005306:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800530a:	aa16      	add	r2, sp, #88	@ 0x58
 800530c:	a917      	add	r1, sp, #92	@ 0x5c
 800530e:	4658      	mov	r0, fp
 8005310:	f001 fa3a 	bl	8006788 <__d2b>
 8005314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005318:	4681      	mov	r9, r0
 800531a:	2e00      	cmp	r6, #0
 800531c:	d077      	beq.n	800540e <_dtoa_r+0x1d6>
 800531e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005320:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800532c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005338:	4619      	mov	r1, r3
 800533a:	2200      	movs	r2, #0
 800533c:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <_dtoa_r+0x2d8>)
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	a369      	add	r3, pc, #420	@ (adr r3, 80054e8 <_dtoa_r+0x2b0>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fb f956 	bl	80005f8 <__aeabi_dmul>
 800534c:	a368      	add	r3, pc, #416	@ (adr r3, 80054f0 <_dtoa_r+0x2b8>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f7fa ff9b 	bl	800028c <__adddf3>
 8005356:	4604      	mov	r4, r0
 8005358:	4630      	mov	r0, r6
 800535a:	460d      	mov	r5, r1
 800535c:	f7fb f8e2 	bl	8000524 <__aeabi_i2d>
 8005360:	a365      	add	r3, pc, #404	@ (adr r3, 80054f8 <_dtoa_r+0x2c0>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fb f947 	bl	80005f8 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4620      	mov	r0, r4
 8005370:	4629      	mov	r1, r5
 8005372:	f7fa ff8b 	bl	800028c <__adddf3>
 8005376:	4604      	mov	r4, r0
 8005378:	460d      	mov	r5, r1
 800537a:	f7fb fbed 	bl	8000b58 <__aeabi_d2iz>
 800537e:	2200      	movs	r2, #0
 8005380:	4607      	mov	r7, r0
 8005382:	2300      	movs	r3, #0
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb fba8 	bl	8000adc <__aeabi_dcmplt>
 800538c:	b140      	cbz	r0, 80053a0 <_dtoa_r+0x168>
 800538e:	4638      	mov	r0, r7
 8005390:	f7fb f8c8 	bl	8000524 <__aeabi_i2d>
 8005394:	4622      	mov	r2, r4
 8005396:	462b      	mov	r3, r5
 8005398:	f7fb fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800539c:	b900      	cbnz	r0, 80053a0 <_dtoa_r+0x168>
 800539e:	3f01      	subs	r7, #1
 80053a0:	2f16      	cmp	r7, #22
 80053a2:	d851      	bhi.n	8005448 <_dtoa_r+0x210>
 80053a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005514 <_dtoa_r+0x2dc>)
 80053a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053b2:	f7fb fb93 	bl	8000adc <__aeabi_dcmplt>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d048      	beq.n	800544c <_dtoa_r+0x214>
 80053ba:	3f01      	subs	r7, #1
 80053bc:	2300      	movs	r3, #0
 80053be:	9312      	str	r3, [sp, #72]	@ 0x48
 80053c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80053c2:	1b9b      	subs	r3, r3, r6
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	bf44      	itt	mi
 80053c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80053cc:	2300      	movmi	r3, #0
 80053ce:	9208      	str	r2, [sp, #32]
 80053d0:	bf54      	ite	pl
 80053d2:	f04f 0800 	movpl.w	r8, #0
 80053d6:	9308      	strmi	r3, [sp, #32]
 80053d8:	2f00      	cmp	r7, #0
 80053da:	db39      	blt.n	8005450 <_dtoa_r+0x218>
 80053dc:	9b08      	ldr	r3, [sp, #32]
 80053de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80053e0:	443b      	add	r3, r7
 80053e2:	9308      	str	r3, [sp, #32]
 80053e4:	2300      	movs	r3, #0
 80053e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80053e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	d864      	bhi.n	80054b8 <_dtoa_r+0x280>
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	bfc4      	itt	gt
 80053f2:	3b04      	subgt	r3, #4
 80053f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80053f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f8:	f1a3 0302 	sub.w	r3, r3, #2
 80053fc:	bfcc      	ite	gt
 80053fe:	2400      	movgt	r4, #0
 8005400:	2401      	movle	r4, #1
 8005402:	2b03      	cmp	r3, #3
 8005404:	d863      	bhi.n	80054ce <_dtoa_r+0x296>
 8005406:	e8df f003 	tbb	[pc, r3]
 800540a:	372a      	.short	0x372a
 800540c:	5535      	.short	0x5535
 800540e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005412:	441e      	add	r6, r3
 8005414:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005418:	2b20      	cmp	r3, #32
 800541a:	bfc1      	itttt	gt
 800541c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005420:	409f      	lslgt	r7, r3
 8005422:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005426:	fa24 f303 	lsrgt.w	r3, r4, r3
 800542a:	bfd6      	itet	le
 800542c:	f1c3 0320 	rsble	r3, r3, #32
 8005430:	ea47 0003 	orrgt.w	r0, r7, r3
 8005434:	fa04 f003 	lslle.w	r0, r4, r3
 8005438:	f7fb f864 	bl	8000504 <__aeabi_ui2d>
 800543c:	2201      	movs	r2, #1
 800543e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005442:	3e01      	subs	r6, #1
 8005444:	9214      	str	r2, [sp, #80]	@ 0x50
 8005446:	e777      	b.n	8005338 <_dtoa_r+0x100>
 8005448:	2301      	movs	r3, #1
 800544a:	e7b8      	b.n	80053be <_dtoa_r+0x186>
 800544c:	9012      	str	r0, [sp, #72]	@ 0x48
 800544e:	e7b7      	b.n	80053c0 <_dtoa_r+0x188>
 8005450:	427b      	negs	r3, r7
 8005452:	930a      	str	r3, [sp, #40]	@ 0x28
 8005454:	2300      	movs	r3, #0
 8005456:	eba8 0807 	sub.w	r8, r8, r7
 800545a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800545c:	e7c4      	b.n	80053e8 <_dtoa_r+0x1b0>
 800545e:	2300      	movs	r3, #0
 8005460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	dc35      	bgt.n	80054d4 <_dtoa_r+0x29c>
 8005468:	2301      	movs	r3, #1
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	9307      	str	r3, [sp, #28]
 800546e:	461a      	mov	r2, r3
 8005470:	920e      	str	r2, [sp, #56]	@ 0x38
 8005472:	e00b      	b.n	800548c <_dtoa_r+0x254>
 8005474:	2301      	movs	r3, #1
 8005476:	e7f3      	b.n	8005460 <_dtoa_r+0x228>
 8005478:	2300      	movs	r3, #0
 800547a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800547c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	9307      	str	r3, [sp, #28]
 8005488:	bfb8      	it	lt
 800548a:	2301      	movlt	r3, #1
 800548c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005490:	2100      	movs	r1, #0
 8005492:	2204      	movs	r2, #4
 8005494:	f102 0514 	add.w	r5, r2, #20
 8005498:	429d      	cmp	r5, r3
 800549a:	d91f      	bls.n	80054dc <_dtoa_r+0x2a4>
 800549c:	6041      	str	r1, [r0, #4]
 800549e:	4658      	mov	r0, fp
 80054a0:	f000 fd8e 	bl	8005fc0 <_Balloc>
 80054a4:	4682      	mov	sl, r0
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d13c      	bne.n	8005524 <_dtoa_r+0x2ec>
 80054aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <_dtoa_r+0x2e0>)
 80054ac:	4602      	mov	r2, r0
 80054ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80054b2:	e6d8      	b.n	8005266 <_dtoa_r+0x2e>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e7e0      	b.n	800547a <_dtoa_r+0x242>
 80054b8:	2401      	movs	r4, #1
 80054ba:	2300      	movs	r3, #0
 80054bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2312      	movs	r3, #18
 80054cc:	e7d0      	b.n	8005470 <_dtoa_r+0x238>
 80054ce:	2301      	movs	r3, #1
 80054d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054d2:	e7f5      	b.n	80054c0 <_dtoa_r+0x288>
 80054d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	9307      	str	r3, [sp, #28]
 80054da:	e7d7      	b.n	800548c <_dtoa_r+0x254>
 80054dc:	3101      	adds	r1, #1
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	e7d8      	b.n	8005494 <_dtoa_r+0x25c>
 80054e2:	bf00      	nop
 80054e4:	f3af 8000 	nop.w
 80054e8:	636f4361 	.word	0x636f4361
 80054ec:	3fd287a7 	.word	0x3fd287a7
 80054f0:	8b60c8b3 	.word	0x8b60c8b3
 80054f4:	3fc68a28 	.word	0x3fc68a28
 80054f8:	509f79fb 	.word	0x509f79fb
 80054fc:	3fd34413 	.word	0x3fd34413
 8005500:	0800885a 	.word	0x0800885a
 8005504:	08008871 	.word	0x08008871
 8005508:	7ff00000 	.word	0x7ff00000
 800550c:	08008825 	.word	0x08008825
 8005510:	3ff80000 	.word	0x3ff80000
 8005514:	08008968 	.word	0x08008968
 8005518:	080088c9 	.word	0x080088c9
 800551c:	08008856 	.word	0x08008856
 8005520:	08008824 	.word	0x08008824
 8005524:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005528:	6018      	str	r0, [r3, #0]
 800552a:	9b07      	ldr	r3, [sp, #28]
 800552c:	2b0e      	cmp	r3, #14
 800552e:	f200 80a4 	bhi.w	800567a <_dtoa_r+0x442>
 8005532:	2c00      	cmp	r4, #0
 8005534:	f000 80a1 	beq.w	800567a <_dtoa_r+0x442>
 8005538:	2f00      	cmp	r7, #0
 800553a:	dd33      	ble.n	80055a4 <_dtoa_r+0x36c>
 800553c:	4bad      	ldr	r3, [pc, #692]	@ (80057f4 <_dtoa_r+0x5bc>)
 800553e:	f007 020f 	and.w	r2, r7, #15
 8005542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005546:	ed93 7b00 	vldr	d7, [r3]
 800554a:	05f8      	lsls	r0, r7, #23
 800554c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005550:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005554:	d516      	bpl.n	8005584 <_dtoa_r+0x34c>
 8005556:	4ba8      	ldr	r3, [pc, #672]	@ (80057f8 <_dtoa_r+0x5c0>)
 8005558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800555c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005560:	f7fb f974 	bl	800084c <__aeabi_ddiv>
 8005564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005568:	f004 040f 	and.w	r4, r4, #15
 800556c:	2603      	movs	r6, #3
 800556e:	4da2      	ldr	r5, [pc, #648]	@ (80057f8 <_dtoa_r+0x5c0>)
 8005570:	b954      	cbnz	r4, 8005588 <_dtoa_r+0x350>
 8005572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800557a:	f7fb f967 	bl	800084c <__aeabi_ddiv>
 800557e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005582:	e028      	b.n	80055d6 <_dtoa_r+0x39e>
 8005584:	2602      	movs	r6, #2
 8005586:	e7f2      	b.n	800556e <_dtoa_r+0x336>
 8005588:	07e1      	lsls	r1, r4, #31
 800558a:	d508      	bpl.n	800559e <_dtoa_r+0x366>
 800558c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800559c:	3601      	adds	r6, #1
 800559e:	1064      	asrs	r4, r4, #1
 80055a0:	3508      	adds	r5, #8
 80055a2:	e7e5      	b.n	8005570 <_dtoa_r+0x338>
 80055a4:	f000 80d2 	beq.w	800574c <_dtoa_r+0x514>
 80055a8:	427c      	negs	r4, r7
 80055aa:	4b92      	ldr	r3, [pc, #584]	@ (80057f4 <_dtoa_r+0x5bc>)
 80055ac:	4d92      	ldr	r5, [pc, #584]	@ (80057f8 <_dtoa_r+0x5c0>)
 80055ae:	f004 020f 	and.w	r2, r4, #15
 80055b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055be:	f7fb f81b 	bl	80005f8 <__aeabi_dmul>
 80055c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055c6:	1124      	asrs	r4, r4, #4
 80055c8:	2300      	movs	r3, #0
 80055ca:	2602      	movs	r6, #2
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	f040 80b2 	bne.w	8005736 <_dtoa_r+0x4fe>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1d3      	bne.n	800557e <_dtoa_r+0x346>
 80055d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80b7 	beq.w	8005750 <_dtoa_r+0x518>
 80055e2:	4b86      	ldr	r3, [pc, #536]	@ (80057fc <_dtoa_r+0x5c4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fb fa77 	bl	8000adc <__aeabi_dcmplt>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f000 80ae 	beq.w	8005750 <_dtoa_r+0x518>
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80aa 	beq.w	8005750 <_dtoa_r+0x518>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dd37      	ble.n	8005672 <_dtoa_r+0x43a>
 8005602:	1e7b      	subs	r3, r7, #1
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	4620      	mov	r0, r4
 8005608:	4b7d      	ldr	r3, [pc, #500]	@ (8005800 <_dtoa_r+0x5c8>)
 800560a:	2200      	movs	r2, #0
 800560c:	4629      	mov	r1, r5
 800560e:	f7fa fff3 	bl	80005f8 <__aeabi_dmul>
 8005612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005616:	9c00      	ldr	r4, [sp, #0]
 8005618:	3601      	adds	r6, #1
 800561a:	4630      	mov	r0, r6
 800561c:	f7fa ff82 	bl	8000524 <__aeabi_i2d>
 8005620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	4b76      	ldr	r3, [pc, #472]	@ (8005804 <_dtoa_r+0x5cc>)
 800562a:	2200      	movs	r2, #0
 800562c:	f7fa fe2e 	bl	800028c <__adddf3>
 8005630:	4605      	mov	r5, r0
 8005632:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005636:	2c00      	cmp	r4, #0
 8005638:	f040 808d 	bne.w	8005756 <_dtoa_r+0x51e>
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	4b71      	ldr	r3, [pc, #452]	@ (8005808 <_dtoa_r+0x5d0>)
 8005642:	2200      	movs	r2, #0
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005650:	462a      	mov	r2, r5
 8005652:	4633      	mov	r3, r6
 8005654:	f7fb fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8005658:	2800      	cmp	r0, #0
 800565a:	f040 828b 	bne.w	8005b74 <_dtoa_r+0x93c>
 800565e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005662:	462a      	mov	r2, r5
 8005664:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005668:	f7fb fa38 	bl	8000adc <__aeabi_dcmplt>
 800566c:	2800      	cmp	r0, #0
 800566e:	f040 8128 	bne.w	80058c2 <_dtoa_r+0x68a>
 8005672:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005676:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800567a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800567c:	2b00      	cmp	r3, #0
 800567e:	f2c0 815a 	blt.w	8005936 <_dtoa_r+0x6fe>
 8005682:	2f0e      	cmp	r7, #14
 8005684:	f300 8157 	bgt.w	8005936 <_dtoa_r+0x6fe>
 8005688:	4b5a      	ldr	r3, [pc, #360]	@ (80057f4 <_dtoa_r+0x5bc>)
 800568a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800568e:	ed93 7b00 	vldr	d7, [r3]
 8005692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	ed8d 7b00 	vstr	d7, [sp]
 800569a:	da03      	bge.n	80056a4 <_dtoa_r+0x46c>
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f340 8101 	ble.w	80058a6 <_dtoa_r+0x66e>
 80056a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80056a8:	4656      	mov	r6, sl
 80056aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fb f8cb 	bl	800084c <__aeabi_ddiv>
 80056b6:	f7fb fa4f 	bl	8000b58 <__aeabi_d2iz>
 80056ba:	4680      	mov	r8, r0
 80056bc:	f7fa ff32 	bl	8000524 <__aeabi_i2d>
 80056c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056c4:	f7fa ff98 	bl	80005f8 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80056d4:	f7fa fdd8 	bl	8000288 <__aeabi_dsub>
 80056d8:	f806 4b01 	strb.w	r4, [r6], #1
 80056dc:	9d07      	ldr	r5, [sp, #28]
 80056de:	eba6 040a 	sub.w	r4, r6, sl
 80056e2:	42a5      	cmp	r5, r4
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	f040 8117 	bne.w	800591a <_dtoa_r+0x6e2>
 80056ec:	f7fa fdce 	bl	800028c <__adddf3>
 80056f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056f4:	4604      	mov	r4, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	f7fb fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f040 80f9 	bne.w	80058f4 <_dtoa_r+0x6bc>
 8005702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fb f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800570e:	b118      	cbz	r0, 8005718 <_dtoa_r+0x4e0>
 8005710:	f018 0f01 	tst.w	r8, #1
 8005714:	f040 80ee 	bne.w	80058f4 <_dtoa_r+0x6bc>
 8005718:	4649      	mov	r1, r9
 800571a:	4658      	mov	r0, fp
 800571c:	f000 fc90 	bl	8006040 <_Bfree>
 8005720:	2300      	movs	r3, #0
 8005722:	7033      	strb	r3, [r6, #0]
 8005724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005726:	3701      	adds	r7, #1
 8005728:	601f      	str	r7, [r3, #0]
 800572a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 831d 	beq.w	8005d6c <_dtoa_r+0xb34>
 8005732:	601e      	str	r6, [r3, #0]
 8005734:	e31a      	b.n	8005d6c <_dtoa_r+0xb34>
 8005736:	07e2      	lsls	r2, r4, #31
 8005738:	d505      	bpl.n	8005746 <_dtoa_r+0x50e>
 800573a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	3601      	adds	r6, #1
 8005744:	2301      	movs	r3, #1
 8005746:	1064      	asrs	r4, r4, #1
 8005748:	3508      	adds	r5, #8
 800574a:	e73f      	b.n	80055cc <_dtoa_r+0x394>
 800574c:	2602      	movs	r6, #2
 800574e:	e742      	b.n	80055d6 <_dtoa_r+0x39e>
 8005750:	9c07      	ldr	r4, [sp, #28]
 8005752:	9704      	str	r7, [sp, #16]
 8005754:	e761      	b.n	800561a <_dtoa_r+0x3e2>
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <_dtoa_r+0x5bc>)
 8005758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800575a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800575e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005762:	4454      	add	r4, sl
 8005764:	2900      	cmp	r1, #0
 8005766:	d053      	beq.n	8005810 <_dtoa_r+0x5d8>
 8005768:	4928      	ldr	r1, [pc, #160]	@ (800580c <_dtoa_r+0x5d4>)
 800576a:	2000      	movs	r0, #0
 800576c:	f7fb f86e 	bl	800084c <__aeabi_ddiv>
 8005770:	4633      	mov	r3, r6
 8005772:	462a      	mov	r2, r5
 8005774:	f7fa fd88 	bl	8000288 <__aeabi_dsub>
 8005778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800577c:	4656      	mov	r6, sl
 800577e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005782:	f7fb f9e9 	bl	8000b58 <__aeabi_d2iz>
 8005786:	4605      	mov	r5, r0
 8005788:	f7fa fecc 	bl	8000524 <__aeabi_i2d>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005794:	f7fa fd78 	bl	8000288 <__aeabi_dsub>
 8005798:	3530      	adds	r5, #48	@ 0x30
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057a2:	f806 5b01 	strb.w	r5, [r6], #1
 80057a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057aa:	f7fb f997 	bl	8000adc <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d171      	bne.n	8005896 <_dtoa_r+0x65e>
 80057b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057b6:	4911      	ldr	r1, [pc, #68]	@ (80057fc <_dtoa_r+0x5c4>)
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fa fd65 	bl	8000288 <__aeabi_dsub>
 80057be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057c2:	f7fb f98b 	bl	8000adc <__aeabi_dcmplt>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 8095 	bne.w	80058f6 <_dtoa_r+0x6be>
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	f43f af50 	beq.w	8005672 <_dtoa_r+0x43a>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <_dtoa_r+0x5c8>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa ff0d 	bl	80005f8 <__aeabi_dmul>
 80057de:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <_dtoa_r+0x5c8>)
 80057e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057e4:	2200      	movs	r2, #0
 80057e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ea:	f7fa ff05 	bl	80005f8 <__aeabi_dmul>
 80057ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f2:	e7c4      	b.n	800577e <_dtoa_r+0x546>
 80057f4:	08008968 	.word	0x08008968
 80057f8:	08008940 	.word	0x08008940
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	40240000 	.word	0x40240000
 8005804:	401c0000 	.word	0x401c0000
 8005808:	40140000 	.word	0x40140000
 800580c:	3fe00000 	.word	0x3fe00000
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	f7fa fef0 	bl	80005f8 <__aeabi_dmul>
 8005818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800581c:	9415      	str	r4, [sp, #84]	@ 0x54
 800581e:	4656      	mov	r6, sl
 8005820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005824:	f7fb f998 	bl	8000b58 <__aeabi_d2iz>
 8005828:	4605      	mov	r5, r0
 800582a:	f7fa fe7b 	bl	8000524 <__aeabi_i2d>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005836:	f7fa fd27 	bl	8000288 <__aeabi_dsub>
 800583a:	3530      	adds	r5, #48	@ 0x30
 800583c:	f806 5b01 	strb.w	r5, [r6], #1
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	42a6      	cmp	r6, r4
 8005846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	d124      	bne.n	800589a <_dtoa_r+0x662>
 8005850:	4bac      	ldr	r3, [pc, #688]	@ (8005b04 <_dtoa_r+0x8cc>)
 8005852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005856:	f7fa fd19 	bl	800028c <__adddf3>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005862:	f7fb f959 	bl	8000b18 <__aeabi_dcmpgt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d145      	bne.n	80058f6 <_dtoa_r+0x6be>
 800586a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800586e:	49a5      	ldr	r1, [pc, #660]	@ (8005b04 <_dtoa_r+0x8cc>)
 8005870:	2000      	movs	r0, #0
 8005872:	f7fa fd09 	bl	8000288 <__aeabi_dsub>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800587e:	f7fb f92d 	bl	8000adc <__aeabi_dcmplt>
 8005882:	2800      	cmp	r0, #0
 8005884:	f43f aef5 	beq.w	8005672 <_dtoa_r+0x43a>
 8005888:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800588a:	1e73      	subs	r3, r6, #1
 800588c:	9315      	str	r3, [sp, #84]	@ 0x54
 800588e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005892:	2b30      	cmp	r3, #48	@ 0x30
 8005894:	d0f8      	beq.n	8005888 <_dtoa_r+0x650>
 8005896:	9f04      	ldr	r7, [sp, #16]
 8005898:	e73e      	b.n	8005718 <_dtoa_r+0x4e0>
 800589a:	4b9b      	ldr	r3, [pc, #620]	@ (8005b08 <_dtoa_r+0x8d0>)
 800589c:	f7fa feac 	bl	80005f8 <__aeabi_dmul>
 80058a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a4:	e7bc      	b.n	8005820 <_dtoa_r+0x5e8>
 80058a6:	d10c      	bne.n	80058c2 <_dtoa_r+0x68a>
 80058a8:	4b98      	ldr	r3, [pc, #608]	@ (8005b0c <_dtoa_r+0x8d4>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b0:	f7fa fea2 	bl	80005f8 <__aeabi_dmul>
 80058b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b8:	f7fb f924 	bl	8000b04 <__aeabi_dcmpge>
 80058bc:	2800      	cmp	r0, #0
 80058be:	f000 8157 	beq.w	8005b70 <_dtoa_r+0x938>
 80058c2:	2400      	movs	r4, #0
 80058c4:	4625      	mov	r5, r4
 80058c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058c8:	43db      	mvns	r3, r3
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	4656      	mov	r6, sl
 80058ce:	2700      	movs	r7, #0
 80058d0:	4621      	mov	r1, r4
 80058d2:	4658      	mov	r0, fp
 80058d4:	f000 fbb4 	bl	8006040 <_Bfree>
 80058d8:	2d00      	cmp	r5, #0
 80058da:	d0dc      	beq.n	8005896 <_dtoa_r+0x65e>
 80058dc:	b12f      	cbz	r7, 80058ea <_dtoa_r+0x6b2>
 80058de:	42af      	cmp	r7, r5
 80058e0:	d003      	beq.n	80058ea <_dtoa_r+0x6b2>
 80058e2:	4639      	mov	r1, r7
 80058e4:	4658      	mov	r0, fp
 80058e6:	f000 fbab 	bl	8006040 <_Bfree>
 80058ea:	4629      	mov	r1, r5
 80058ec:	4658      	mov	r0, fp
 80058ee:	f000 fba7 	bl	8006040 <_Bfree>
 80058f2:	e7d0      	b.n	8005896 <_dtoa_r+0x65e>
 80058f4:	9704      	str	r7, [sp, #16]
 80058f6:	4633      	mov	r3, r6
 80058f8:	461e      	mov	r6, r3
 80058fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058fe:	2a39      	cmp	r2, #57	@ 0x39
 8005900:	d107      	bne.n	8005912 <_dtoa_r+0x6da>
 8005902:	459a      	cmp	sl, r3
 8005904:	d1f8      	bne.n	80058f8 <_dtoa_r+0x6c0>
 8005906:	9a04      	ldr	r2, [sp, #16]
 8005908:	3201      	adds	r2, #1
 800590a:	9204      	str	r2, [sp, #16]
 800590c:	2230      	movs	r2, #48	@ 0x30
 800590e:	f88a 2000 	strb.w	r2, [sl]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	3201      	adds	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e7bd      	b.n	8005896 <_dtoa_r+0x65e>
 800591a:	4b7b      	ldr	r3, [pc, #492]	@ (8005b08 <_dtoa_r+0x8d0>)
 800591c:	2200      	movs	r2, #0
 800591e:	f7fa fe6b 	bl	80005f8 <__aeabi_dmul>
 8005922:	2200      	movs	r2, #0
 8005924:	2300      	movs	r3, #0
 8005926:	4604      	mov	r4, r0
 8005928:	460d      	mov	r5, r1
 800592a:	f7fb f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800592e:	2800      	cmp	r0, #0
 8005930:	f43f aebb 	beq.w	80056aa <_dtoa_r+0x472>
 8005934:	e6f0      	b.n	8005718 <_dtoa_r+0x4e0>
 8005936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005938:	2a00      	cmp	r2, #0
 800593a:	f000 80db 	beq.w	8005af4 <_dtoa_r+0x8bc>
 800593e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005940:	2a01      	cmp	r2, #1
 8005942:	f300 80bf 	bgt.w	8005ac4 <_dtoa_r+0x88c>
 8005946:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005948:	2a00      	cmp	r2, #0
 800594a:	f000 80b7 	beq.w	8005abc <_dtoa_r+0x884>
 800594e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005952:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005954:	4646      	mov	r6, r8
 8005956:	9a08      	ldr	r2, [sp, #32]
 8005958:	2101      	movs	r1, #1
 800595a:	441a      	add	r2, r3
 800595c:	4658      	mov	r0, fp
 800595e:	4498      	add	r8, r3
 8005960:	9208      	str	r2, [sp, #32]
 8005962:	f000 fc6b 	bl	800623c <__i2b>
 8005966:	4605      	mov	r5, r0
 8005968:	b15e      	cbz	r6, 8005982 <_dtoa_r+0x74a>
 800596a:	9b08      	ldr	r3, [sp, #32]
 800596c:	2b00      	cmp	r3, #0
 800596e:	dd08      	ble.n	8005982 <_dtoa_r+0x74a>
 8005970:	42b3      	cmp	r3, r6
 8005972:	9a08      	ldr	r2, [sp, #32]
 8005974:	bfa8      	it	ge
 8005976:	4633      	movge	r3, r6
 8005978:	eba8 0803 	sub.w	r8, r8, r3
 800597c:	1af6      	subs	r6, r6, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005984:	b1f3      	cbz	r3, 80059c4 <_dtoa_r+0x78c>
 8005986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80b7 	beq.w	8005afc <_dtoa_r+0x8c4>
 800598e:	b18c      	cbz	r4, 80059b4 <_dtoa_r+0x77c>
 8005990:	4629      	mov	r1, r5
 8005992:	4622      	mov	r2, r4
 8005994:	4658      	mov	r0, fp
 8005996:	f000 fd11 	bl	80063bc <__pow5mult>
 800599a:	464a      	mov	r2, r9
 800599c:	4601      	mov	r1, r0
 800599e:	4605      	mov	r5, r0
 80059a0:	4658      	mov	r0, fp
 80059a2:	f000 fc61 	bl	8006268 <__multiply>
 80059a6:	4649      	mov	r1, r9
 80059a8:	9004      	str	r0, [sp, #16]
 80059aa:	4658      	mov	r0, fp
 80059ac:	f000 fb48 	bl	8006040 <_Bfree>
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	4699      	mov	r9, r3
 80059b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059b6:	1b1a      	subs	r2, r3, r4
 80059b8:	d004      	beq.n	80059c4 <_dtoa_r+0x78c>
 80059ba:	4649      	mov	r1, r9
 80059bc:	4658      	mov	r0, fp
 80059be:	f000 fcfd 	bl	80063bc <__pow5mult>
 80059c2:	4681      	mov	r9, r0
 80059c4:	2101      	movs	r1, #1
 80059c6:	4658      	mov	r0, fp
 80059c8:	f000 fc38 	bl	800623c <__i2b>
 80059cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059ce:	4604      	mov	r4, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 81cf 	beq.w	8005d74 <_dtoa_r+0xb3c>
 80059d6:	461a      	mov	r2, r3
 80059d8:	4601      	mov	r1, r0
 80059da:	4658      	mov	r0, fp
 80059dc:	f000 fcee 	bl	80063bc <__pow5mult>
 80059e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	4604      	mov	r4, r0
 80059e6:	f300 8095 	bgt.w	8005b14 <_dtoa_r+0x8dc>
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 8087 	bne.w	8005b00 <_dtoa_r+0x8c8>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 8089 	bne.w	8005b10 <_dtoa_r+0x8d8>
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a04:	0d1b      	lsrs	r3, r3, #20
 8005a06:	051b      	lsls	r3, r3, #20
 8005a08:	b12b      	cbz	r3, 8005a16 <_dtoa_r+0x7de>
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	9308      	str	r3, [sp, #32]
 8005a10:	f108 0801 	add.w	r8, r8, #1
 8005a14:	2301      	movs	r3, #1
 8005a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 81b0 	beq.w	8005d80 <_dtoa_r+0xb48>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a26:	6918      	ldr	r0, [r3, #16]
 8005a28:	f000 fbbc 	bl	80061a4 <__hi0bits>
 8005a2c:	f1c0 0020 	rsb	r0, r0, #32
 8005a30:	9b08      	ldr	r3, [sp, #32]
 8005a32:	4418      	add	r0, r3
 8005a34:	f010 001f 	ands.w	r0, r0, #31
 8005a38:	d077      	beq.n	8005b2a <_dtoa_r+0x8f2>
 8005a3a:	f1c0 0320 	rsb	r3, r0, #32
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	dd6b      	ble.n	8005b1a <_dtoa_r+0x8e2>
 8005a42:	9b08      	ldr	r3, [sp, #32]
 8005a44:	f1c0 001c 	rsb	r0, r0, #28
 8005a48:	4403      	add	r3, r0
 8005a4a:	4480      	add	r8, r0
 8005a4c:	4406      	add	r6, r0
 8005a4e:	9308      	str	r3, [sp, #32]
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	dd05      	ble.n	8005a62 <_dtoa_r+0x82a>
 8005a56:	4649      	mov	r1, r9
 8005a58:	4642      	mov	r2, r8
 8005a5a:	4658      	mov	r0, fp
 8005a5c:	f000 fd08 	bl	8006470 <__lshift>
 8005a60:	4681      	mov	r9, r0
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dd05      	ble.n	8005a74 <_dtoa_r+0x83c>
 8005a68:	4621      	mov	r1, r4
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 fcff 	bl	8006470 <__lshift>
 8005a72:	4604      	mov	r4, r0
 8005a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d059      	beq.n	8005b2e <_dtoa_r+0x8f6>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	f000 fd63 	bl	8006548 <__mcmp>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	da53      	bge.n	8005b2e <_dtoa_r+0x8f6>
 8005a86:	1e7b      	subs	r3, r7, #1
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	220a      	movs	r2, #10
 8005a90:	4658      	mov	r0, fp
 8005a92:	f000 faf7 	bl	8006084 <__multadd>
 8005a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a98:	4681      	mov	r9, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8172 	beq.w	8005d84 <_dtoa_r+0xb4c>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	220a      	movs	r2, #10
 8005aa6:	4658      	mov	r0, fp
 8005aa8:	f000 faec 	bl	8006084 <__multadd>
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	dc67      	bgt.n	8005b84 <_dtoa_r+0x94c>
 8005ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	dc41      	bgt.n	8005b3e <_dtoa_r+0x906>
 8005aba:	e063      	b.n	8005b84 <_dtoa_r+0x94c>
 8005abc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005abe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ac2:	e746      	b.n	8005952 <_dtoa_r+0x71a>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	1e5c      	subs	r4, r3, #1
 8005ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	bfbf      	itttt	lt
 8005ace:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ad0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005ad2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ad4:	1ae3      	sublt	r3, r4, r3
 8005ad6:	bfb4      	ite	lt
 8005ad8:	18d2      	addlt	r2, r2, r3
 8005ada:	1b1c      	subge	r4, r3, r4
 8005adc:	9b07      	ldr	r3, [sp, #28]
 8005ade:	bfbc      	itt	lt
 8005ae0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005ae2:	2400      	movlt	r4, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bfb5      	itete	lt
 8005ae8:	eba8 0603 	sublt.w	r6, r8, r3
 8005aec:	9b07      	ldrge	r3, [sp, #28]
 8005aee:	2300      	movlt	r3, #0
 8005af0:	4646      	movge	r6, r8
 8005af2:	e730      	b.n	8005956 <_dtoa_r+0x71e>
 8005af4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005af6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005af8:	4646      	mov	r6, r8
 8005afa:	e735      	b.n	8005968 <_dtoa_r+0x730>
 8005afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005afe:	e75c      	b.n	80059ba <_dtoa_r+0x782>
 8005b00:	2300      	movs	r3, #0
 8005b02:	e788      	b.n	8005a16 <_dtoa_r+0x7de>
 8005b04:	3fe00000 	.word	0x3fe00000
 8005b08:	40240000 	.word	0x40240000
 8005b0c:	40140000 	.word	0x40140000
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	e780      	b.n	8005a16 <_dtoa_r+0x7de>
 8005b14:	2300      	movs	r3, #0
 8005b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b18:	e782      	b.n	8005a20 <_dtoa_r+0x7e8>
 8005b1a:	d099      	beq.n	8005a50 <_dtoa_r+0x818>
 8005b1c:	9a08      	ldr	r2, [sp, #32]
 8005b1e:	331c      	adds	r3, #28
 8005b20:	441a      	add	r2, r3
 8005b22:	4498      	add	r8, r3
 8005b24:	441e      	add	r6, r3
 8005b26:	9208      	str	r2, [sp, #32]
 8005b28:	e792      	b.n	8005a50 <_dtoa_r+0x818>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	e7f6      	b.n	8005b1c <_dtoa_r+0x8e4>
 8005b2e:	9b07      	ldr	r3, [sp, #28]
 8005b30:	9704      	str	r7, [sp, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	dc20      	bgt.n	8005b78 <_dtoa_r+0x940>
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	dd1e      	ble.n	8005b7c <_dtoa_r+0x944>
 8005b3e:	9b00      	ldr	r3, [sp, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f aec0 	bne.w	80058c6 <_dtoa_r+0x68e>
 8005b46:	4621      	mov	r1, r4
 8005b48:	2205      	movs	r2, #5
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fa9a 	bl	8006084 <__multadd>
 8005b50:	4601      	mov	r1, r0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 fcf7 	bl	8006548 <__mcmp>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f77f aeb3 	ble.w	80058c6 <_dtoa_r+0x68e>
 8005b60:	4656      	mov	r6, sl
 8005b62:	2331      	movs	r3, #49	@ 0x31
 8005b64:	f806 3b01 	strb.w	r3, [r6], #1
 8005b68:	9b04      	ldr	r3, [sp, #16]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	e6ae      	b.n	80058ce <_dtoa_r+0x696>
 8005b70:	9c07      	ldr	r4, [sp, #28]
 8005b72:	9704      	str	r7, [sp, #16]
 8005b74:	4625      	mov	r5, r4
 8005b76:	e7f3      	b.n	8005b60 <_dtoa_r+0x928>
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8104 	beq.w	8005d8c <_dtoa_r+0xb54>
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	dd05      	ble.n	8005b94 <_dtoa_r+0x95c>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f000 fc6f 	bl	8006470 <__lshift>
 8005b92:	4605      	mov	r5, r0
 8005b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d05a      	beq.n	8005c50 <_dtoa_r+0xa18>
 8005b9a:	6869      	ldr	r1, [r5, #4]
 8005b9c:	4658      	mov	r0, fp
 8005b9e:	f000 fa0f 	bl	8005fc0 <_Balloc>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <_dtoa_r+0x97a>
 8005ba6:	4b84      	ldr	r3, [pc, #528]	@ (8005db8 <_dtoa_r+0xb80>)
 8005ba8:	4602      	mov	r2, r0
 8005baa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005bae:	f7ff bb5a 	b.w	8005266 <_dtoa_r+0x2e>
 8005bb2:	692a      	ldr	r2, [r5, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	f105 010c 	add.w	r1, r5, #12
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f001 ff75 	bl	8007aac <memcpy>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4658      	mov	r0, fp
 8005bc8:	f000 fc52 	bl	8006470 <__lshift>
 8005bcc:	f10a 0301 	add.w	r3, sl, #1
 8005bd0:	9307      	str	r3, [sp, #28]
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	4453      	add	r3, sl
 8005bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	462f      	mov	r7, r5
 8005be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be2:	4605      	mov	r5, r0
 8005be4:	9b07      	ldr	r3, [sp, #28]
 8005be6:	4621      	mov	r1, r4
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4648      	mov	r0, r9
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f7ff fa99 	bl	8005124 <quorem>
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	9002      	str	r0, [sp, #8]
 8005bf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005bfa:	4648      	mov	r0, r9
 8005bfc:	f000 fca4 	bl	8006548 <__mcmp>
 8005c00:	462a      	mov	r2, r5
 8005c02:	9008      	str	r0, [sp, #32]
 8005c04:	4621      	mov	r1, r4
 8005c06:	4658      	mov	r0, fp
 8005c08:	f000 fcba 	bl	8006580 <__mdiff>
 8005c0c:	68c2      	ldr	r2, [r0, #12]
 8005c0e:	4606      	mov	r6, r0
 8005c10:	bb02      	cbnz	r2, 8005c54 <_dtoa_r+0xa1c>
 8005c12:	4601      	mov	r1, r0
 8005c14:	4648      	mov	r0, r9
 8005c16:	f000 fc97 	bl	8006548 <__mcmp>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4658      	mov	r0, fp
 8005c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c22:	f000 fa0d 	bl	8006040 <_Bfree>
 8005c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c2a:	9e07      	ldr	r6, [sp, #28]
 8005c2c:	ea43 0102 	orr.w	r1, r3, r2
 8005c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c32:	4319      	orrs	r1, r3
 8005c34:	d110      	bne.n	8005c58 <_dtoa_r+0xa20>
 8005c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c3a:	d029      	beq.n	8005c90 <_dtoa_r+0xa58>
 8005c3c:	9b08      	ldr	r3, [sp, #32]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd02      	ble.n	8005c48 <_dtoa_r+0xa10>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005c48:	9b00      	ldr	r3, [sp, #0]
 8005c4a:	f883 8000 	strb.w	r8, [r3]
 8005c4e:	e63f      	b.n	80058d0 <_dtoa_r+0x698>
 8005c50:	4628      	mov	r0, r5
 8005c52:	e7bb      	b.n	8005bcc <_dtoa_r+0x994>
 8005c54:	2201      	movs	r2, #1
 8005c56:	e7e1      	b.n	8005c1c <_dtoa_r+0x9e4>
 8005c58:	9b08      	ldr	r3, [sp, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	db04      	blt.n	8005c68 <_dtoa_r+0xa30>
 8005c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c60:	430b      	orrs	r3, r1
 8005c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c64:	430b      	orrs	r3, r1
 8005c66:	d120      	bne.n	8005caa <_dtoa_r+0xa72>
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	dded      	ble.n	8005c48 <_dtoa_r+0xa10>
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4658      	mov	r0, fp
 8005c72:	f000 fbfd 	bl	8006470 <__lshift>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4681      	mov	r9, r0
 8005c7a:	f000 fc65 	bl	8006548 <__mcmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	dc03      	bgt.n	8005c8a <_dtoa_r+0xa52>
 8005c82:	d1e1      	bne.n	8005c48 <_dtoa_r+0xa10>
 8005c84:	f018 0f01 	tst.w	r8, #1
 8005c88:	d0de      	beq.n	8005c48 <_dtoa_r+0xa10>
 8005c8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c8e:	d1d8      	bne.n	8005c42 <_dtoa_r+0xa0a>
 8005c90:	9a00      	ldr	r2, [sp, #0]
 8005c92:	2339      	movs	r3, #57	@ 0x39
 8005c94:	7013      	strb	r3, [r2, #0]
 8005c96:	4633      	mov	r3, r6
 8005c98:	461e      	mov	r6, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ca0:	2a39      	cmp	r2, #57	@ 0x39
 8005ca2:	d052      	beq.n	8005d4a <_dtoa_r+0xb12>
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e612      	b.n	80058d0 <_dtoa_r+0x698>
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	dd07      	ble.n	8005cbe <_dtoa_r+0xa86>
 8005cae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cb2:	d0ed      	beq.n	8005c90 <_dtoa_r+0xa58>
 8005cb4:	9a00      	ldr	r2, [sp, #0]
 8005cb6:	f108 0301 	add.w	r3, r8, #1
 8005cba:	7013      	strb	r3, [r2, #0]
 8005cbc:	e608      	b.n	80058d0 <_dtoa_r+0x698>
 8005cbe:	9b07      	ldr	r3, [sp, #28]
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d028      	beq.n	8005d1e <_dtoa_r+0xae6>
 8005ccc:	4649      	mov	r1, r9
 8005cce:	2300      	movs	r3, #0
 8005cd0:	220a      	movs	r2, #10
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 f9d6 	bl	8006084 <__multadd>
 8005cd8:	42af      	cmp	r7, r5
 8005cda:	4681      	mov	r9, r0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	f04f 020a 	mov.w	r2, #10
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	d107      	bne.n	8005cfa <_dtoa_r+0xac2>
 8005cea:	f000 f9cb 	bl	8006084 <__multadd>
 8005cee:	4607      	mov	r7, r0
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	9b07      	ldr	r3, [sp, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	e774      	b.n	8005be4 <_dtoa_r+0x9ac>
 8005cfa:	f000 f9c3 	bl	8006084 <__multadd>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4607      	mov	r7, r0
 8005d02:	2300      	movs	r3, #0
 8005d04:	220a      	movs	r2, #10
 8005d06:	4658      	mov	r0, fp
 8005d08:	f000 f9bc 	bl	8006084 <__multadd>
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	e7f0      	b.n	8005cf2 <_dtoa_r+0xaba>
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bfcc      	ite	gt
 8005d16:	461e      	movgt	r6, r3
 8005d18:	2601      	movle	r6, #1
 8005d1a:	4456      	add	r6, sl
 8005d1c:	2700      	movs	r7, #0
 8005d1e:	4649      	mov	r1, r9
 8005d20:	2201      	movs	r2, #1
 8005d22:	4658      	mov	r0, fp
 8005d24:	f000 fba4 	bl	8006470 <__lshift>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	f000 fc0c 	bl	8006548 <__mcmp>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	dcb0      	bgt.n	8005c96 <_dtoa_r+0xa5e>
 8005d34:	d102      	bne.n	8005d3c <_dtoa_r+0xb04>
 8005d36:	f018 0f01 	tst.w	r8, #1
 8005d3a:	d1ac      	bne.n	8005c96 <_dtoa_r+0xa5e>
 8005d3c:	4633      	mov	r3, r6
 8005d3e:	461e      	mov	r6, r3
 8005d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d44:	2a30      	cmp	r2, #48	@ 0x30
 8005d46:	d0fa      	beq.n	8005d3e <_dtoa_r+0xb06>
 8005d48:	e5c2      	b.n	80058d0 <_dtoa_r+0x698>
 8005d4a:	459a      	cmp	sl, r3
 8005d4c:	d1a4      	bne.n	8005c98 <_dtoa_r+0xa60>
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	2331      	movs	r3, #49	@ 0x31
 8005d56:	f88a 3000 	strb.w	r3, [sl]
 8005d5a:	e5b9      	b.n	80058d0 <_dtoa_r+0x698>
 8005d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005dbc <_dtoa_r+0xb84>
 8005d62:	b11b      	cbz	r3, 8005d6c <_dtoa_r+0xb34>
 8005d64:	f10a 0308 	add.w	r3, sl, #8
 8005d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	b019      	add	sp, #100	@ 0x64
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f77f ae37 	ble.w	80059ea <_dtoa_r+0x7b2>
 8005d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d80:	2001      	movs	r0, #1
 8005d82:	e655      	b.n	8005a30 <_dtoa_r+0x7f8>
 8005d84:	9b00      	ldr	r3, [sp, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f77f aed6 	ble.w	8005b38 <_dtoa_r+0x900>
 8005d8c:	4656      	mov	r6, sl
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4648      	mov	r0, r9
 8005d92:	f7ff f9c7 	bl	8005124 <quorem>
 8005d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8005d9e:	9b00      	ldr	r3, [sp, #0]
 8005da0:	eba6 020a 	sub.w	r2, r6, sl
 8005da4:	4293      	cmp	r3, r2
 8005da6:	ddb3      	ble.n	8005d10 <_dtoa_r+0xad8>
 8005da8:	4649      	mov	r1, r9
 8005daa:	2300      	movs	r3, #0
 8005dac:	220a      	movs	r2, #10
 8005dae:	4658      	mov	r0, fp
 8005db0:	f000 f968 	bl	8006084 <__multadd>
 8005db4:	4681      	mov	r9, r0
 8005db6:	e7ea      	b.n	8005d8e <_dtoa_r+0xb56>
 8005db8:	080088c9 	.word	0x080088c9
 8005dbc:	0800884d 	.word	0x0800884d

08005dc0 <_free_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	d041      	beq.n	8005e4c <_free_r+0x8c>
 8005dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dcc:	1f0c      	subs	r4, r1, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfb8      	it	lt
 8005dd2:	18e4      	addlt	r4, r4, r3
 8005dd4:	f000 f8e8 	bl	8005fa8 <__malloc_lock>
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e50 <_free_r+0x90>)
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	b933      	cbnz	r3, 8005dec <_free_r+0x2c>
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	6014      	str	r4, [r2, #0]
 8005de2:	4628      	mov	r0, r5
 8005de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de8:	f000 b8e4 	b.w	8005fb4 <__malloc_unlock>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d908      	bls.n	8005e02 <_free_r+0x42>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	1821      	adds	r1, r4, r0
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf01      	itttt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	1809      	addeq	r1, r1, r0
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	e7ed      	b.n	8005dde <_free_r+0x1e>
 8005e02:	461a      	mov	r2, r3
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	b10b      	cbz	r3, 8005e0c <_free_r+0x4c>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d9fa      	bls.n	8005e02 <_free_r+0x42>
 8005e0c:	6811      	ldr	r1, [r2, #0]
 8005e0e:	1850      	adds	r0, r2, r1
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d10b      	bne.n	8005e2c <_free_r+0x6c>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	4401      	add	r1, r0
 8005e18:	1850      	adds	r0, r2, r1
 8005e1a:	4283      	cmp	r3, r0
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	d1e0      	bne.n	8005de2 <_free_r+0x22>
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	6053      	str	r3, [r2, #4]
 8005e26:	4408      	add	r0, r1
 8005e28:	6010      	str	r0, [r2, #0]
 8005e2a:	e7da      	b.n	8005de2 <_free_r+0x22>
 8005e2c:	d902      	bls.n	8005e34 <_free_r+0x74>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	e7d6      	b.n	8005de2 <_free_r+0x22>
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	1821      	adds	r1, r4, r0
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	bf04      	itt	eq
 8005e3c:	6819      	ldreq	r1, [r3, #0]
 8005e3e:	685b      	ldreq	r3, [r3, #4]
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	bf04      	itt	eq
 8005e44:	1809      	addeq	r1, r1, r0
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	6054      	str	r4, [r2, #4]
 8005e4a:	e7ca      	b.n	8005de2 <_free_r+0x22>
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000418 	.word	0x20000418

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	@ (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 b825 	b.w	8005ea8 <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	2000001c 	.word	0x2000001c

08005e64 <sbrk_aligned>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4e0f      	ldr	r6, [pc, #60]	@ (8005ea4 <sbrk_aligned+0x40>)
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b911      	cbnz	r1, 8005e76 <sbrk_aligned+0x12>
 8005e70:	f001 fe0c 	bl	8007a8c <_sbrk_r>
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f001 fe07 	bl	8007a8c <_sbrk_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d103      	bne.n	8005e8a <sbrk_aligned+0x26>
 8005e82:	f04f 34ff 	mov.w	r4, #4294967295
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	1cc4      	adds	r4, r0, #3
 8005e8c:	f024 0403 	bic.w	r4, r4, #3
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d0f8      	beq.n	8005e86 <sbrk_aligned+0x22>
 8005e94:	1a21      	subs	r1, r4, r0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f001 fdf8 	bl	8007a8c <_sbrk_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d1f2      	bne.n	8005e86 <sbrk_aligned+0x22>
 8005ea0:	e7ef      	b.n	8005e82 <sbrk_aligned+0x1e>
 8005ea2:	bf00      	nop
 8005ea4:	20000414 	.word	0x20000414

08005ea8 <_malloc_r>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	1ccd      	adds	r5, r1, #3
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	2d00      	cmp	r5, #0
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	db01      	blt.n	8005ec4 <_malloc_r+0x1c>
 8005ec0:	42a9      	cmp	r1, r5
 8005ec2:	d904      	bls.n	8005ece <_malloc_r+0x26>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fa4 <_malloc_r+0xfc>
 8005ed2:	f000 f869 	bl	8005fa8 <__malloc_lock>
 8005ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eda:	461c      	mov	r4, r3
 8005edc:	bb44      	cbnz	r4, 8005f30 <_malloc_r+0x88>
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7ff ffbf 	bl	8005e64 <sbrk_aligned>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	4604      	mov	r4, r0
 8005eea:	d158      	bne.n	8005f9e <_malloc_r+0xf6>
 8005eec:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef0:	4627      	mov	r7, r4
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	d143      	bne.n	8005f7e <_malloc_r+0xd6>
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	d04b      	beq.n	8005f92 <_malloc_r+0xea>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	eb04 0903 	add.w	r9, r4, r3
 8005f04:	f001 fdc2 	bl	8007a8c <_sbrk_r>
 8005f08:	4581      	cmp	r9, r0
 8005f0a:	d142      	bne.n	8005f92 <_malloc_r+0xea>
 8005f0c:	6821      	ldr	r1, [r4, #0]
 8005f0e:	1a6d      	subs	r5, r5, r1
 8005f10:	4629      	mov	r1, r5
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7ff ffa6 	bl	8005e64 <sbrk_aligned>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d03a      	beq.n	8005f92 <_malloc_r+0xea>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	442b      	add	r3, r5
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	f8d8 3000 	ldr.w	r3, [r8]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	bb62      	cbnz	r2, 8005f84 <_malloc_r+0xdc>
 8005f2a:	f8c8 7000 	str.w	r7, [r8]
 8005f2e:	e00f      	b.n	8005f50 <_malloc_r+0xa8>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	1b52      	subs	r2, r2, r5
 8005f34:	d420      	bmi.n	8005f78 <_malloc_r+0xd0>
 8005f36:	2a0b      	cmp	r2, #11
 8005f38:	d917      	bls.n	8005f6a <_malloc_r+0xc2>
 8005f3a:	1961      	adds	r1, r4, r5
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	6025      	str	r5, [r4, #0]
 8005f40:	bf18      	it	ne
 8005f42:	6059      	strne	r1, [r3, #4]
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	bf08      	it	eq
 8005f48:	f8c8 1000 	streq.w	r1, [r8]
 8005f4c:	5162      	str	r2, [r4, r5]
 8005f4e:	604b      	str	r3, [r1, #4]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f82f 	bl	8005fb4 <__malloc_unlock>
 8005f56:	f104 000b 	add.w	r0, r4, #11
 8005f5a:	1d23      	adds	r3, r4, #4
 8005f5c:	f020 0007 	bic.w	r0, r0, #7
 8005f60:	1ac2      	subs	r2, r0, r3
 8005f62:	bf1c      	itt	ne
 8005f64:	1a1b      	subne	r3, r3, r0
 8005f66:	50a3      	strne	r3, [r4, r2]
 8005f68:	e7af      	b.n	8005eca <_malloc_r+0x22>
 8005f6a:	6862      	ldr	r2, [r4, #4]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	bf0c      	ite	eq
 8005f70:	f8c8 2000 	streq.w	r2, [r8]
 8005f74:	605a      	strne	r2, [r3, #4]
 8005f76:	e7eb      	b.n	8005f50 <_malloc_r+0xa8>
 8005f78:	4623      	mov	r3, r4
 8005f7a:	6864      	ldr	r4, [r4, #4]
 8005f7c:	e7ae      	b.n	8005edc <_malloc_r+0x34>
 8005f7e:	463c      	mov	r4, r7
 8005f80:	687f      	ldr	r7, [r7, #4]
 8005f82:	e7b6      	b.n	8005ef2 <_malloc_r+0x4a>
 8005f84:	461a      	mov	r2, r3
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d1fb      	bne.n	8005f84 <_malloc_r+0xdc>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6053      	str	r3, [r2, #4]
 8005f90:	e7de      	b.n	8005f50 <_malloc_r+0xa8>
 8005f92:	230c      	movs	r3, #12
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 f80c 	bl	8005fb4 <__malloc_unlock>
 8005f9c:	e794      	b.n	8005ec8 <_malloc_r+0x20>
 8005f9e:	6005      	str	r5, [r0, #0]
 8005fa0:	e7d6      	b.n	8005f50 <_malloc_r+0xa8>
 8005fa2:	bf00      	nop
 8005fa4:	20000418 	.word	0x20000418

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	@ (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff b8b2 	b.w	8005112 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000410 	.word	0x20000410

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff b8ad 	b.w	8005114 <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000410 	.word	0x20000410

08005fc0 <_Balloc>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	69c6      	ldr	r6, [r0, #28]
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	b976      	cbnz	r6, 8005fe8 <_Balloc+0x28>
 8005fca:	2010      	movs	r0, #16
 8005fcc:	f7ff ff42 	bl	8005e54 <malloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	61e0      	str	r0, [r4, #28]
 8005fd4:	b920      	cbnz	r0, 8005fe0 <_Balloc+0x20>
 8005fd6:	4b18      	ldr	r3, [pc, #96]	@ (8006038 <_Balloc+0x78>)
 8005fd8:	4818      	ldr	r0, [pc, #96]	@ (800603c <_Balloc+0x7c>)
 8005fda:	216b      	movs	r1, #107	@ 0x6b
 8005fdc:	f001 fd7c 	bl	8007ad8 <__assert_func>
 8005fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe4:	6006      	str	r6, [r0, #0]
 8005fe6:	60c6      	str	r6, [r0, #12]
 8005fe8:	69e6      	ldr	r6, [r4, #28]
 8005fea:	68f3      	ldr	r3, [r6, #12]
 8005fec:	b183      	cbz	r3, 8006010 <_Balloc+0x50>
 8005fee:	69e3      	ldr	r3, [r4, #28]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ff6:	b9b8      	cbnz	r0, 8006028 <_Balloc+0x68>
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8005ffe:	1d72      	adds	r2, r6, #5
 8006000:	0092      	lsls	r2, r2, #2
 8006002:	4620      	mov	r0, r4
 8006004:	f001 fd86 	bl	8007b14 <_calloc_r>
 8006008:	b160      	cbz	r0, 8006024 <_Balloc+0x64>
 800600a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800600e:	e00e      	b.n	800602e <_Balloc+0x6e>
 8006010:	2221      	movs	r2, #33	@ 0x21
 8006012:	2104      	movs	r1, #4
 8006014:	4620      	mov	r0, r4
 8006016:	f001 fd7d 	bl	8007b14 <_calloc_r>
 800601a:	69e3      	ldr	r3, [r4, #28]
 800601c:	60f0      	str	r0, [r6, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e4      	bne.n	8005fee <_Balloc+0x2e>
 8006024:	2000      	movs	r0, #0
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800602e:	2300      	movs	r3, #0
 8006030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006034:	e7f7      	b.n	8006026 <_Balloc+0x66>
 8006036:	bf00      	nop
 8006038:	0800885a 	.word	0x0800885a
 800603c:	080088da 	.word	0x080088da

08006040 <_Bfree>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	69c6      	ldr	r6, [r0, #28]
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b976      	cbnz	r6, 8006068 <_Bfree+0x28>
 800604a:	2010      	movs	r0, #16
 800604c:	f7ff ff02 	bl	8005e54 <malloc>
 8006050:	4602      	mov	r2, r0
 8006052:	61e8      	str	r0, [r5, #28]
 8006054:	b920      	cbnz	r0, 8006060 <_Bfree+0x20>
 8006056:	4b09      	ldr	r3, [pc, #36]	@ (800607c <_Bfree+0x3c>)
 8006058:	4809      	ldr	r0, [pc, #36]	@ (8006080 <_Bfree+0x40>)
 800605a:	218f      	movs	r1, #143	@ 0x8f
 800605c:	f001 fd3c 	bl	8007ad8 <__assert_func>
 8006060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006064:	6006      	str	r6, [r0, #0]
 8006066:	60c6      	str	r6, [r0, #12]
 8006068:	b13c      	cbz	r4, 800607a <_Bfree+0x3a>
 800606a:	69eb      	ldr	r3, [r5, #28]
 800606c:	6862      	ldr	r2, [r4, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006074:	6021      	str	r1, [r4, #0]
 8006076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	0800885a 	.word	0x0800885a
 8006080:	080088da 	.word	0x080088da

08006084 <__multadd>:
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	690d      	ldr	r5, [r1, #16]
 800608a:	4607      	mov	r7, r0
 800608c:	460c      	mov	r4, r1
 800608e:	461e      	mov	r6, r3
 8006090:	f101 0c14 	add.w	ip, r1, #20
 8006094:	2000      	movs	r0, #0
 8006096:	f8dc 3000 	ldr.w	r3, [ip]
 800609a:	b299      	uxth	r1, r3
 800609c:	fb02 6101 	mla	r1, r2, r1, r6
 80060a0:	0c1e      	lsrs	r6, r3, #16
 80060a2:	0c0b      	lsrs	r3, r1, #16
 80060a4:	fb02 3306 	mla	r3, r2, r6, r3
 80060a8:	b289      	uxth	r1, r1
 80060aa:	3001      	adds	r0, #1
 80060ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060b0:	4285      	cmp	r5, r0
 80060b2:	f84c 1b04 	str.w	r1, [ip], #4
 80060b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060ba:	dcec      	bgt.n	8006096 <__multadd+0x12>
 80060bc:	b30e      	cbz	r6, 8006102 <__multadd+0x7e>
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dc19      	bgt.n	80060f8 <__multadd+0x74>
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	4638      	mov	r0, r7
 80060c8:	3101      	adds	r1, #1
 80060ca:	f7ff ff79 	bl	8005fc0 <_Balloc>
 80060ce:	4680      	mov	r8, r0
 80060d0:	b928      	cbnz	r0, 80060de <__multadd+0x5a>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <__multadd+0x84>)
 80060d6:	480d      	ldr	r0, [pc, #52]	@ (800610c <__multadd+0x88>)
 80060d8:	21ba      	movs	r1, #186	@ 0xba
 80060da:	f001 fcfd 	bl	8007ad8 <__assert_func>
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	3202      	adds	r2, #2
 80060e2:	f104 010c 	add.w	r1, r4, #12
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	300c      	adds	r0, #12
 80060ea:	f001 fcdf 	bl	8007aac <memcpy>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4638      	mov	r0, r7
 80060f2:	f7ff ffa5 	bl	8006040 <_Bfree>
 80060f6:	4644      	mov	r4, r8
 80060f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060fc:	3501      	adds	r5, #1
 80060fe:	615e      	str	r6, [r3, #20]
 8006100:	6125      	str	r5, [r4, #16]
 8006102:	4620      	mov	r0, r4
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006108:	080088c9 	.word	0x080088c9
 800610c:	080088da 	.word	0x080088da

08006110 <__s2b>:
 8006110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	4615      	mov	r5, r2
 8006118:	461f      	mov	r7, r3
 800611a:	2209      	movs	r2, #9
 800611c:	3308      	adds	r3, #8
 800611e:	4606      	mov	r6, r0
 8006120:	fb93 f3f2 	sdiv	r3, r3, r2
 8006124:	2100      	movs	r1, #0
 8006126:	2201      	movs	r2, #1
 8006128:	429a      	cmp	r2, r3
 800612a:	db09      	blt.n	8006140 <__s2b+0x30>
 800612c:	4630      	mov	r0, r6
 800612e:	f7ff ff47 	bl	8005fc0 <_Balloc>
 8006132:	b940      	cbnz	r0, 8006146 <__s2b+0x36>
 8006134:	4602      	mov	r2, r0
 8006136:	4b19      	ldr	r3, [pc, #100]	@ (800619c <__s2b+0x8c>)
 8006138:	4819      	ldr	r0, [pc, #100]	@ (80061a0 <__s2b+0x90>)
 800613a:	21d3      	movs	r1, #211	@ 0xd3
 800613c:	f001 fccc 	bl	8007ad8 <__assert_func>
 8006140:	0052      	lsls	r2, r2, #1
 8006142:	3101      	adds	r1, #1
 8006144:	e7f0      	b.n	8006128 <__s2b+0x18>
 8006146:	9b08      	ldr	r3, [sp, #32]
 8006148:	6143      	str	r3, [r0, #20]
 800614a:	2d09      	cmp	r5, #9
 800614c:	f04f 0301 	mov.w	r3, #1
 8006150:	6103      	str	r3, [r0, #16]
 8006152:	dd16      	ble.n	8006182 <__s2b+0x72>
 8006154:	f104 0909 	add.w	r9, r4, #9
 8006158:	46c8      	mov	r8, r9
 800615a:	442c      	add	r4, r5
 800615c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006160:	4601      	mov	r1, r0
 8006162:	3b30      	subs	r3, #48	@ 0x30
 8006164:	220a      	movs	r2, #10
 8006166:	4630      	mov	r0, r6
 8006168:	f7ff ff8c 	bl	8006084 <__multadd>
 800616c:	45a0      	cmp	r8, r4
 800616e:	d1f5      	bne.n	800615c <__s2b+0x4c>
 8006170:	f1a5 0408 	sub.w	r4, r5, #8
 8006174:	444c      	add	r4, r9
 8006176:	1b2d      	subs	r5, r5, r4
 8006178:	1963      	adds	r3, r4, r5
 800617a:	42bb      	cmp	r3, r7
 800617c:	db04      	blt.n	8006188 <__s2b+0x78>
 800617e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006182:	340a      	adds	r4, #10
 8006184:	2509      	movs	r5, #9
 8006186:	e7f6      	b.n	8006176 <__s2b+0x66>
 8006188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800618c:	4601      	mov	r1, r0
 800618e:	3b30      	subs	r3, #48	@ 0x30
 8006190:	220a      	movs	r2, #10
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ff76 	bl	8006084 <__multadd>
 8006198:	e7ee      	b.n	8006178 <__s2b+0x68>
 800619a:	bf00      	nop
 800619c:	080088c9 	.word	0x080088c9
 80061a0:	080088da 	.word	0x080088da

080061a4 <__hi0bits>:
 80061a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80061a8:	4603      	mov	r3, r0
 80061aa:	bf36      	itet	cc
 80061ac:	0403      	lslcc	r3, r0, #16
 80061ae:	2000      	movcs	r0, #0
 80061b0:	2010      	movcc	r0, #16
 80061b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b6:	bf3c      	itt	cc
 80061b8:	021b      	lslcc	r3, r3, #8
 80061ba:	3008      	addcc	r0, #8
 80061bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c0:	bf3c      	itt	cc
 80061c2:	011b      	lslcc	r3, r3, #4
 80061c4:	3004      	addcc	r0, #4
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	bf3c      	itt	cc
 80061cc:	009b      	lslcc	r3, r3, #2
 80061ce:	3002      	addcc	r0, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	db05      	blt.n	80061e0 <__hi0bits+0x3c>
 80061d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061d8:	f100 0001 	add.w	r0, r0, #1
 80061dc:	bf08      	it	eq
 80061de:	2020      	moveq	r0, #32
 80061e0:	4770      	bx	lr

080061e2 <__lo0bits>:
 80061e2:	6803      	ldr	r3, [r0, #0]
 80061e4:	4602      	mov	r2, r0
 80061e6:	f013 0007 	ands.w	r0, r3, #7
 80061ea:	d00b      	beq.n	8006204 <__lo0bits+0x22>
 80061ec:	07d9      	lsls	r1, r3, #31
 80061ee:	d421      	bmi.n	8006234 <__lo0bits+0x52>
 80061f0:	0798      	lsls	r0, r3, #30
 80061f2:	bf49      	itett	mi
 80061f4:	085b      	lsrmi	r3, r3, #1
 80061f6:	089b      	lsrpl	r3, r3, #2
 80061f8:	2001      	movmi	r0, #1
 80061fa:	6013      	strmi	r3, [r2, #0]
 80061fc:	bf5c      	itt	pl
 80061fe:	6013      	strpl	r3, [r2, #0]
 8006200:	2002      	movpl	r0, #2
 8006202:	4770      	bx	lr
 8006204:	b299      	uxth	r1, r3
 8006206:	b909      	cbnz	r1, 800620c <__lo0bits+0x2a>
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	2010      	movs	r0, #16
 800620c:	b2d9      	uxtb	r1, r3
 800620e:	b909      	cbnz	r1, 8006214 <__lo0bits+0x32>
 8006210:	3008      	adds	r0, #8
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	0719      	lsls	r1, r3, #28
 8006216:	bf04      	itt	eq
 8006218:	091b      	lsreq	r3, r3, #4
 800621a:	3004      	addeq	r0, #4
 800621c:	0799      	lsls	r1, r3, #30
 800621e:	bf04      	itt	eq
 8006220:	089b      	lsreq	r3, r3, #2
 8006222:	3002      	addeq	r0, #2
 8006224:	07d9      	lsls	r1, r3, #31
 8006226:	d403      	bmi.n	8006230 <__lo0bits+0x4e>
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	f100 0001 	add.w	r0, r0, #1
 800622e:	d003      	beq.n	8006238 <__lo0bits+0x56>
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4770      	bx	lr
 8006234:	2000      	movs	r0, #0
 8006236:	4770      	bx	lr
 8006238:	2020      	movs	r0, #32
 800623a:	4770      	bx	lr

0800623c <__i2b>:
 800623c:	b510      	push	{r4, lr}
 800623e:	460c      	mov	r4, r1
 8006240:	2101      	movs	r1, #1
 8006242:	f7ff febd 	bl	8005fc0 <_Balloc>
 8006246:	4602      	mov	r2, r0
 8006248:	b928      	cbnz	r0, 8006256 <__i2b+0x1a>
 800624a:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <__i2b+0x24>)
 800624c:	4805      	ldr	r0, [pc, #20]	@ (8006264 <__i2b+0x28>)
 800624e:	f240 1145 	movw	r1, #325	@ 0x145
 8006252:	f001 fc41 	bl	8007ad8 <__assert_func>
 8006256:	2301      	movs	r3, #1
 8006258:	6144      	str	r4, [r0, #20]
 800625a:	6103      	str	r3, [r0, #16]
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	080088c9 	.word	0x080088c9
 8006264:	080088da 	.word	0x080088da

08006268 <__multiply>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	4614      	mov	r4, r2
 800626e:	690a      	ldr	r2, [r1, #16]
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	bfa8      	it	ge
 8006276:	4623      	movge	r3, r4
 8006278:	460f      	mov	r7, r1
 800627a:	bfa4      	itt	ge
 800627c:	460c      	movge	r4, r1
 800627e:	461f      	movge	r7, r3
 8006280:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006284:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006288:	68a3      	ldr	r3, [r4, #8]
 800628a:	6861      	ldr	r1, [r4, #4]
 800628c:	eb0a 0609 	add.w	r6, sl, r9
 8006290:	42b3      	cmp	r3, r6
 8006292:	b085      	sub	sp, #20
 8006294:	bfb8      	it	lt
 8006296:	3101      	addlt	r1, #1
 8006298:	f7ff fe92 	bl	8005fc0 <_Balloc>
 800629c:	b930      	cbnz	r0, 80062ac <__multiply+0x44>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b44      	ldr	r3, [pc, #272]	@ (80063b4 <__multiply+0x14c>)
 80062a2:	4845      	ldr	r0, [pc, #276]	@ (80063b8 <__multiply+0x150>)
 80062a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80062a8:	f001 fc16 	bl	8007ad8 <__assert_func>
 80062ac:	f100 0514 	add.w	r5, r0, #20
 80062b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062b4:	462b      	mov	r3, r5
 80062b6:	2200      	movs	r2, #0
 80062b8:	4543      	cmp	r3, r8
 80062ba:	d321      	bcc.n	8006300 <__multiply+0x98>
 80062bc:	f107 0114 	add.w	r1, r7, #20
 80062c0:	f104 0214 	add.w	r2, r4, #20
 80062c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80062c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80062cc:	9302      	str	r3, [sp, #8]
 80062ce:	1b13      	subs	r3, r2, r4
 80062d0:	3b15      	subs	r3, #21
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	3304      	adds	r3, #4
 80062d8:	f104 0715 	add.w	r7, r4, #21
 80062dc:	42ba      	cmp	r2, r7
 80062de:	bf38      	it	cc
 80062e0:	2304      	movcc	r3, #4
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	9103      	str	r1, [sp, #12]
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d80c      	bhi.n	8006306 <__multiply+0x9e>
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	dd03      	ble.n	80062f8 <__multiply+0x90>
 80062f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05b      	beq.n	80063b0 <__multiply+0x148>
 80062f8:	6106      	str	r6, [r0, #16]
 80062fa:	b005      	add	sp, #20
 80062fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006300:	f843 2b04 	str.w	r2, [r3], #4
 8006304:	e7d8      	b.n	80062b8 <__multiply+0x50>
 8006306:	f8b1 a000 	ldrh.w	sl, [r1]
 800630a:	f1ba 0f00 	cmp.w	sl, #0
 800630e:	d024      	beq.n	800635a <__multiply+0xf2>
 8006310:	f104 0e14 	add.w	lr, r4, #20
 8006314:	46a9      	mov	r9, r5
 8006316:	f04f 0c00 	mov.w	ip, #0
 800631a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800631e:	f8d9 3000 	ldr.w	r3, [r9]
 8006322:	fa1f fb87 	uxth.w	fp, r7
 8006326:	b29b      	uxth	r3, r3
 8006328:	fb0a 330b 	mla	r3, sl, fp, r3
 800632c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006330:	f8d9 7000 	ldr.w	r7, [r9]
 8006334:	4463      	add	r3, ip
 8006336:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800633a:	fb0a c70b 	mla	r7, sl, fp, ip
 800633e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006348:	4572      	cmp	r2, lr
 800634a:	f849 3b04 	str.w	r3, [r9], #4
 800634e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006352:	d8e2      	bhi.n	800631a <__multiply+0xb2>
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	f845 c003 	str.w	ip, [r5, r3]
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006360:	3104      	adds	r1, #4
 8006362:	f1b9 0f00 	cmp.w	r9, #0
 8006366:	d021      	beq.n	80063ac <__multiply+0x144>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	f104 0c14 	add.w	ip, r4, #20
 800636e:	46ae      	mov	lr, r5
 8006370:	f04f 0a00 	mov.w	sl, #0
 8006374:	f8bc b000 	ldrh.w	fp, [ip]
 8006378:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800637c:	fb09 770b 	mla	r7, r9, fp, r7
 8006380:	4457      	add	r7, sl
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006388:	f84e 3b04 	str.w	r3, [lr], #4
 800638c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006390:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006394:	f8be 3000 	ldrh.w	r3, [lr]
 8006398:	fb09 330a 	mla	r3, r9, sl, r3
 800639c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80063a0:	4562      	cmp	r2, ip
 80063a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063a6:	d8e5      	bhi.n	8006374 <__multiply+0x10c>
 80063a8:	9f01      	ldr	r7, [sp, #4]
 80063aa:	51eb      	str	r3, [r5, r7]
 80063ac:	3504      	adds	r5, #4
 80063ae:	e799      	b.n	80062e4 <__multiply+0x7c>
 80063b0:	3e01      	subs	r6, #1
 80063b2:	e79b      	b.n	80062ec <__multiply+0x84>
 80063b4:	080088c9 	.word	0x080088c9
 80063b8:	080088da 	.word	0x080088da

080063bc <__pow5mult>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	4615      	mov	r5, r2
 80063c2:	f012 0203 	ands.w	r2, r2, #3
 80063c6:	4607      	mov	r7, r0
 80063c8:	460e      	mov	r6, r1
 80063ca:	d007      	beq.n	80063dc <__pow5mult+0x20>
 80063cc:	4c25      	ldr	r4, [pc, #148]	@ (8006464 <__pow5mult+0xa8>)
 80063ce:	3a01      	subs	r2, #1
 80063d0:	2300      	movs	r3, #0
 80063d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063d6:	f7ff fe55 	bl	8006084 <__multadd>
 80063da:	4606      	mov	r6, r0
 80063dc:	10ad      	asrs	r5, r5, #2
 80063de:	d03d      	beq.n	800645c <__pow5mult+0xa0>
 80063e0:	69fc      	ldr	r4, [r7, #28]
 80063e2:	b97c      	cbnz	r4, 8006404 <__pow5mult+0x48>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f7ff fd35 	bl	8005e54 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	61f8      	str	r0, [r7, #28]
 80063ee:	b928      	cbnz	r0, 80063fc <__pow5mult+0x40>
 80063f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006468 <__pow5mult+0xac>)
 80063f2:	481e      	ldr	r0, [pc, #120]	@ (800646c <__pow5mult+0xb0>)
 80063f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063f8:	f001 fb6e 	bl	8007ad8 <__assert_func>
 80063fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006400:	6004      	str	r4, [r0, #0]
 8006402:	60c4      	str	r4, [r0, #12]
 8006404:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800640c:	b94c      	cbnz	r4, 8006422 <__pow5mult+0x66>
 800640e:	f240 2171 	movw	r1, #625	@ 0x271
 8006412:	4638      	mov	r0, r7
 8006414:	f7ff ff12 	bl	800623c <__i2b>
 8006418:	2300      	movs	r3, #0
 800641a:	f8c8 0008 	str.w	r0, [r8, #8]
 800641e:	4604      	mov	r4, r0
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	07eb      	lsls	r3, r5, #31
 8006428:	d50a      	bpl.n	8006440 <__pow5mult+0x84>
 800642a:	4631      	mov	r1, r6
 800642c:	4622      	mov	r2, r4
 800642e:	4638      	mov	r0, r7
 8006430:	f7ff ff1a 	bl	8006268 <__multiply>
 8006434:	4631      	mov	r1, r6
 8006436:	4680      	mov	r8, r0
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff fe01 	bl	8006040 <_Bfree>
 800643e:	4646      	mov	r6, r8
 8006440:	106d      	asrs	r5, r5, #1
 8006442:	d00b      	beq.n	800645c <__pow5mult+0xa0>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	b938      	cbnz	r0, 8006458 <__pow5mult+0x9c>
 8006448:	4622      	mov	r2, r4
 800644a:	4621      	mov	r1, r4
 800644c:	4638      	mov	r0, r7
 800644e:	f7ff ff0b 	bl	8006268 <__multiply>
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	f8c0 9000 	str.w	r9, [r0]
 8006458:	4604      	mov	r4, r0
 800645a:	e7e4      	b.n	8006426 <__pow5mult+0x6a>
 800645c:	4630      	mov	r0, r6
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	bf00      	nop
 8006464:	08008934 	.word	0x08008934
 8006468:	0800885a 	.word	0x0800885a
 800646c:	080088da 	.word	0x080088da

08006470 <__lshift>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	6849      	ldr	r1, [r1, #4]
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	4607      	mov	r7, r0
 8006482:	4691      	mov	r9, r2
 8006484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006488:	f108 0601 	add.w	r6, r8, #1
 800648c:	42b3      	cmp	r3, r6
 800648e:	db0b      	blt.n	80064a8 <__lshift+0x38>
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff fd95 	bl	8005fc0 <_Balloc>
 8006496:	4605      	mov	r5, r0
 8006498:	b948      	cbnz	r0, 80064ae <__lshift+0x3e>
 800649a:	4602      	mov	r2, r0
 800649c:	4b28      	ldr	r3, [pc, #160]	@ (8006540 <__lshift+0xd0>)
 800649e:	4829      	ldr	r0, [pc, #164]	@ (8006544 <__lshift+0xd4>)
 80064a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80064a4:	f001 fb18 	bl	8007ad8 <__assert_func>
 80064a8:	3101      	adds	r1, #1
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	e7ee      	b.n	800648c <__lshift+0x1c>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f100 0114 	add.w	r1, r0, #20
 80064b4:	f100 0210 	add.w	r2, r0, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	4553      	cmp	r3, sl
 80064bc:	db33      	blt.n	8006526 <__lshift+0xb6>
 80064be:	6920      	ldr	r0, [r4, #16]
 80064c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064c4:	f104 0314 	add.w	r3, r4, #20
 80064c8:	f019 091f 	ands.w	r9, r9, #31
 80064cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064d4:	d02b      	beq.n	800652e <__lshift+0xbe>
 80064d6:	f1c9 0e20 	rsb	lr, r9, #32
 80064da:	468a      	mov	sl, r1
 80064dc:	2200      	movs	r2, #0
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	fa00 f009 	lsl.w	r0, r0, r9
 80064e4:	4310      	orrs	r0, r2
 80064e6:	f84a 0b04 	str.w	r0, [sl], #4
 80064ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ee:	459c      	cmp	ip, r3
 80064f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80064f4:	d8f3      	bhi.n	80064de <__lshift+0x6e>
 80064f6:	ebac 0304 	sub.w	r3, ip, r4
 80064fa:	3b15      	subs	r3, #21
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	3304      	adds	r3, #4
 8006502:	f104 0015 	add.w	r0, r4, #21
 8006506:	4584      	cmp	ip, r0
 8006508:	bf38      	it	cc
 800650a:	2304      	movcc	r3, #4
 800650c:	50ca      	str	r2, [r1, r3]
 800650e:	b10a      	cbz	r2, 8006514 <__lshift+0xa4>
 8006510:	f108 0602 	add.w	r6, r8, #2
 8006514:	3e01      	subs	r6, #1
 8006516:	4638      	mov	r0, r7
 8006518:	612e      	str	r6, [r5, #16]
 800651a:	4621      	mov	r1, r4
 800651c:	f7ff fd90 	bl	8006040 <_Bfree>
 8006520:	4628      	mov	r0, r5
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	f842 0f04 	str.w	r0, [r2, #4]!
 800652a:	3301      	adds	r3, #1
 800652c:	e7c5      	b.n	80064ba <__lshift+0x4a>
 800652e:	3904      	subs	r1, #4
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	f841 2f04 	str.w	r2, [r1, #4]!
 8006538:	459c      	cmp	ip, r3
 800653a:	d8f9      	bhi.n	8006530 <__lshift+0xc0>
 800653c:	e7ea      	b.n	8006514 <__lshift+0xa4>
 800653e:	bf00      	nop
 8006540:	080088c9 	.word	0x080088c9
 8006544:	080088da 	.word	0x080088da

08006548 <__mcmp>:
 8006548:	690a      	ldr	r2, [r1, #16]
 800654a:	4603      	mov	r3, r0
 800654c:	6900      	ldr	r0, [r0, #16]
 800654e:	1a80      	subs	r0, r0, r2
 8006550:	b530      	push	{r4, r5, lr}
 8006552:	d10e      	bne.n	8006572 <__mcmp+0x2a>
 8006554:	3314      	adds	r3, #20
 8006556:	3114      	adds	r1, #20
 8006558:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800655c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006568:	4295      	cmp	r5, r2
 800656a:	d003      	beq.n	8006574 <__mcmp+0x2c>
 800656c:	d205      	bcs.n	800657a <__mcmp+0x32>
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	bd30      	pop	{r4, r5, pc}
 8006574:	42a3      	cmp	r3, r4
 8006576:	d3f3      	bcc.n	8006560 <__mcmp+0x18>
 8006578:	e7fb      	b.n	8006572 <__mcmp+0x2a>
 800657a:	2001      	movs	r0, #1
 800657c:	e7f9      	b.n	8006572 <__mcmp+0x2a>
	...

08006580 <__mdiff>:
 8006580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	4689      	mov	r9, r1
 8006586:	4606      	mov	r6, r0
 8006588:	4611      	mov	r1, r2
 800658a:	4648      	mov	r0, r9
 800658c:	4614      	mov	r4, r2
 800658e:	f7ff ffdb 	bl	8006548 <__mcmp>
 8006592:	1e05      	subs	r5, r0, #0
 8006594:	d112      	bne.n	80065bc <__mdiff+0x3c>
 8006596:	4629      	mov	r1, r5
 8006598:	4630      	mov	r0, r6
 800659a:	f7ff fd11 	bl	8005fc0 <_Balloc>
 800659e:	4602      	mov	r2, r0
 80065a0:	b928      	cbnz	r0, 80065ae <__mdiff+0x2e>
 80065a2:	4b3f      	ldr	r3, [pc, #252]	@ (80066a0 <__mdiff+0x120>)
 80065a4:	f240 2137 	movw	r1, #567	@ 0x237
 80065a8:	483e      	ldr	r0, [pc, #248]	@ (80066a4 <__mdiff+0x124>)
 80065aa:	f001 fa95 	bl	8007ad8 <__assert_func>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065b4:	4610      	mov	r0, r2
 80065b6:	b003      	add	sp, #12
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	bfbc      	itt	lt
 80065be:	464b      	movlt	r3, r9
 80065c0:	46a1      	movlt	r9, r4
 80065c2:	4630      	mov	r0, r6
 80065c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065c8:	bfba      	itte	lt
 80065ca:	461c      	movlt	r4, r3
 80065cc:	2501      	movlt	r5, #1
 80065ce:	2500      	movge	r5, #0
 80065d0:	f7ff fcf6 	bl	8005fc0 <_Balloc>
 80065d4:	4602      	mov	r2, r0
 80065d6:	b918      	cbnz	r0, 80065e0 <__mdiff+0x60>
 80065d8:	4b31      	ldr	r3, [pc, #196]	@ (80066a0 <__mdiff+0x120>)
 80065da:	f240 2145 	movw	r1, #581	@ 0x245
 80065de:	e7e3      	b.n	80065a8 <__mdiff+0x28>
 80065e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065e4:	6926      	ldr	r6, [r4, #16]
 80065e6:	60c5      	str	r5, [r0, #12]
 80065e8:	f109 0310 	add.w	r3, r9, #16
 80065ec:	f109 0514 	add.w	r5, r9, #20
 80065f0:	f104 0e14 	add.w	lr, r4, #20
 80065f4:	f100 0b14 	add.w	fp, r0, #20
 80065f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	46d9      	mov	r9, fp
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800660e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	fa1f f38a 	uxth.w	r3, sl
 8006618:	4619      	mov	r1, r3
 800661a:	b283      	uxth	r3, r0
 800661c:	1acb      	subs	r3, r1, r3
 800661e:	0c00      	lsrs	r0, r0, #16
 8006620:	4463      	add	r3, ip
 8006622:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006626:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800662a:	b29b      	uxth	r3, r3
 800662c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006630:	4576      	cmp	r6, lr
 8006632:	f849 3b04 	str.w	r3, [r9], #4
 8006636:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800663a:	d8e5      	bhi.n	8006608 <__mdiff+0x88>
 800663c:	1b33      	subs	r3, r6, r4
 800663e:	3b15      	subs	r3, #21
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	3415      	adds	r4, #21
 8006646:	3304      	adds	r3, #4
 8006648:	42a6      	cmp	r6, r4
 800664a:	bf38      	it	cc
 800664c:	2304      	movcc	r3, #4
 800664e:	441d      	add	r5, r3
 8006650:	445b      	add	r3, fp
 8006652:	461e      	mov	r6, r3
 8006654:	462c      	mov	r4, r5
 8006656:	4544      	cmp	r4, r8
 8006658:	d30e      	bcc.n	8006678 <__mdiff+0xf8>
 800665a:	f108 0103 	add.w	r1, r8, #3
 800665e:	1b49      	subs	r1, r1, r5
 8006660:	f021 0103 	bic.w	r1, r1, #3
 8006664:	3d03      	subs	r5, #3
 8006666:	45a8      	cmp	r8, r5
 8006668:	bf38      	it	cc
 800666a:	2100      	movcc	r1, #0
 800666c:	440b      	add	r3, r1
 800666e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006672:	b191      	cbz	r1, 800669a <__mdiff+0x11a>
 8006674:	6117      	str	r7, [r2, #16]
 8006676:	e79d      	b.n	80065b4 <__mdiff+0x34>
 8006678:	f854 1b04 	ldr.w	r1, [r4], #4
 800667c:	46e6      	mov	lr, ip
 800667e:	0c08      	lsrs	r0, r1, #16
 8006680:	fa1c fc81 	uxtah	ip, ip, r1
 8006684:	4471      	add	r1, lr
 8006686:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800668a:	b289      	uxth	r1, r1
 800668c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006690:	f846 1b04 	str.w	r1, [r6], #4
 8006694:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006698:	e7dd      	b.n	8006656 <__mdiff+0xd6>
 800669a:	3f01      	subs	r7, #1
 800669c:	e7e7      	b.n	800666e <__mdiff+0xee>
 800669e:	bf00      	nop
 80066a0:	080088c9 	.word	0x080088c9
 80066a4:	080088da 	.word	0x080088da

080066a8 <__ulp>:
 80066a8:	b082      	sub	sp, #8
 80066aa:	ed8d 0b00 	vstr	d0, [sp]
 80066ae:	9a01      	ldr	r2, [sp, #4]
 80066b0:	4b0f      	ldr	r3, [pc, #60]	@ (80066f0 <__ulp+0x48>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc08      	bgt.n	80066ce <__ulp+0x26>
 80066bc:	425b      	negs	r3, r3
 80066be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80066c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066c6:	da04      	bge.n	80066d2 <__ulp+0x2a>
 80066c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80066cc:	4113      	asrs	r3, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	e008      	b.n	80066e4 <__ulp+0x3c>
 80066d2:	f1a2 0314 	sub.w	r3, r2, #20
 80066d6:	2b1e      	cmp	r3, #30
 80066d8:	bfda      	itte	le
 80066da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80066de:	40da      	lsrle	r2, r3
 80066e0:	2201      	movgt	r2, #1
 80066e2:	2300      	movs	r3, #0
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	ec41 0b10 	vmov	d0, r0, r1
 80066ec:	b002      	add	sp, #8
 80066ee:	4770      	bx	lr
 80066f0:	7ff00000 	.word	0x7ff00000

080066f4 <__b2d>:
 80066f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f8:	6906      	ldr	r6, [r0, #16]
 80066fa:	f100 0814 	add.w	r8, r0, #20
 80066fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006702:	1f37      	subs	r7, r6, #4
 8006704:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006708:	4610      	mov	r0, r2
 800670a:	f7ff fd4b 	bl	80061a4 <__hi0bits>
 800670e:	f1c0 0320 	rsb	r3, r0, #32
 8006712:	280a      	cmp	r0, #10
 8006714:	600b      	str	r3, [r1, #0]
 8006716:	491b      	ldr	r1, [pc, #108]	@ (8006784 <__b2d+0x90>)
 8006718:	dc15      	bgt.n	8006746 <__b2d+0x52>
 800671a:	f1c0 0c0b 	rsb	ip, r0, #11
 800671e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006722:	45b8      	cmp	r8, r7
 8006724:	ea43 0501 	orr.w	r5, r3, r1
 8006728:	bf34      	ite	cc
 800672a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800672e:	2300      	movcs	r3, #0
 8006730:	3015      	adds	r0, #21
 8006732:	fa02 f000 	lsl.w	r0, r2, r0
 8006736:	fa23 f30c 	lsr.w	r3, r3, ip
 800673a:	4303      	orrs	r3, r0
 800673c:	461c      	mov	r4, r3
 800673e:	ec45 4b10 	vmov	d0, r4, r5
 8006742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006746:	45b8      	cmp	r8, r7
 8006748:	bf3a      	itte	cc
 800674a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800674e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006752:	2300      	movcs	r3, #0
 8006754:	380b      	subs	r0, #11
 8006756:	d012      	beq.n	800677e <__b2d+0x8a>
 8006758:	f1c0 0120 	rsb	r1, r0, #32
 800675c:	fa23 f401 	lsr.w	r4, r3, r1
 8006760:	4082      	lsls	r2, r0
 8006762:	4322      	orrs	r2, r4
 8006764:	4547      	cmp	r7, r8
 8006766:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800676a:	bf8c      	ite	hi
 800676c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006770:	2200      	movls	r2, #0
 8006772:	4083      	lsls	r3, r0
 8006774:	40ca      	lsrs	r2, r1
 8006776:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800677a:	4313      	orrs	r3, r2
 800677c:	e7de      	b.n	800673c <__b2d+0x48>
 800677e:	ea42 0501 	orr.w	r5, r2, r1
 8006782:	e7db      	b.n	800673c <__b2d+0x48>
 8006784:	3ff00000 	.word	0x3ff00000

08006788 <__d2b>:
 8006788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800678c:	460f      	mov	r7, r1
 800678e:	2101      	movs	r1, #1
 8006790:	ec59 8b10 	vmov	r8, r9, d0
 8006794:	4616      	mov	r6, r2
 8006796:	f7ff fc13 	bl	8005fc0 <_Balloc>
 800679a:	4604      	mov	r4, r0
 800679c:	b930      	cbnz	r0, 80067ac <__d2b+0x24>
 800679e:	4602      	mov	r2, r0
 80067a0:	4b23      	ldr	r3, [pc, #140]	@ (8006830 <__d2b+0xa8>)
 80067a2:	4824      	ldr	r0, [pc, #144]	@ (8006834 <__d2b+0xac>)
 80067a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80067a8:	f001 f996 	bl	8007ad8 <__assert_func>
 80067ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067b4:	b10d      	cbz	r5, 80067ba <__d2b+0x32>
 80067b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	f1b8 0300 	subs.w	r3, r8, #0
 80067c0:	d023      	beq.n	800680a <__d2b+0x82>
 80067c2:	4668      	mov	r0, sp
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	f7ff fd0c 	bl	80061e2 <__lo0bits>
 80067ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067ce:	b1d0      	cbz	r0, 8006806 <__d2b+0x7e>
 80067d0:	f1c0 0320 	rsb	r3, r0, #32
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	430b      	orrs	r3, r1
 80067da:	40c2      	lsrs	r2, r0
 80067dc:	6163      	str	r3, [r4, #20]
 80067de:	9201      	str	r2, [sp, #4]
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	61a3      	str	r3, [r4, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf0c      	ite	eq
 80067e8:	2201      	moveq	r2, #1
 80067ea:	2202      	movne	r2, #2
 80067ec:	6122      	str	r2, [r4, #16]
 80067ee:	b1a5      	cbz	r5, 800681a <__d2b+0x92>
 80067f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067f4:	4405      	add	r5, r0
 80067f6:	603d      	str	r5, [r7, #0]
 80067f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067fc:	6030      	str	r0, [r6, #0]
 80067fe:	4620      	mov	r0, r4
 8006800:	b003      	add	sp, #12
 8006802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006806:	6161      	str	r1, [r4, #20]
 8006808:	e7ea      	b.n	80067e0 <__d2b+0x58>
 800680a:	a801      	add	r0, sp, #4
 800680c:	f7ff fce9 	bl	80061e2 <__lo0bits>
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	3020      	adds	r0, #32
 8006816:	2201      	movs	r2, #1
 8006818:	e7e8      	b.n	80067ec <__d2b+0x64>
 800681a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800681e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006822:	6038      	str	r0, [r7, #0]
 8006824:	6918      	ldr	r0, [r3, #16]
 8006826:	f7ff fcbd 	bl	80061a4 <__hi0bits>
 800682a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800682e:	e7e5      	b.n	80067fc <__d2b+0x74>
 8006830:	080088c9 	.word	0x080088c9
 8006834:	080088da 	.word	0x080088da

08006838 <__ratio>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	b085      	sub	sp, #20
 800683e:	e9cd 1000 	strd	r1, r0, [sp]
 8006842:	a902      	add	r1, sp, #8
 8006844:	f7ff ff56 	bl	80066f4 <__b2d>
 8006848:	9800      	ldr	r0, [sp, #0]
 800684a:	a903      	add	r1, sp, #12
 800684c:	ec55 4b10 	vmov	r4, r5, d0
 8006850:	f7ff ff50 	bl	80066f4 <__b2d>
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	6919      	ldr	r1, [r3, #16]
 8006858:	9b00      	ldr	r3, [sp, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	1ac9      	subs	r1, r1, r3
 800685e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	ec5b ab10 	vmov	sl, fp, d0
 8006868:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfce      	itee	gt
 8006870:	462a      	movgt	r2, r5
 8006872:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006876:	465a      	movle	r2, fp
 8006878:	462f      	mov	r7, r5
 800687a:	46d9      	mov	r9, fp
 800687c:	bfcc      	ite	gt
 800687e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006882:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006886:	464b      	mov	r3, r9
 8006888:	4652      	mov	r2, sl
 800688a:	4620      	mov	r0, r4
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 ffdd 	bl	800084c <__aeabi_ddiv>
 8006892:	ec41 0b10 	vmov	d0, r0, r1
 8006896:	b005      	add	sp, #20
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800689c <__copybits>:
 800689c:	3901      	subs	r1, #1
 800689e:	b570      	push	{r4, r5, r6, lr}
 80068a0:	1149      	asrs	r1, r1, #5
 80068a2:	6914      	ldr	r4, [r2, #16]
 80068a4:	3101      	adds	r1, #1
 80068a6:	f102 0314 	add.w	r3, r2, #20
 80068aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80068ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80068b2:	1f05      	subs	r5, r0, #4
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d30c      	bcc.n	80068d2 <__copybits+0x36>
 80068b8:	1aa3      	subs	r3, r4, r2
 80068ba:	3b11      	subs	r3, #17
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	3211      	adds	r2, #17
 80068c2:	42a2      	cmp	r2, r4
 80068c4:	bf88      	it	hi
 80068c6:	2300      	movhi	r3, #0
 80068c8:	4418      	add	r0, r3
 80068ca:	2300      	movs	r3, #0
 80068cc:	4288      	cmp	r0, r1
 80068ce:	d305      	bcc.n	80068dc <__copybits+0x40>
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80068d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80068da:	e7eb      	b.n	80068b4 <__copybits+0x18>
 80068dc:	f840 3b04 	str.w	r3, [r0], #4
 80068e0:	e7f4      	b.n	80068cc <__copybits+0x30>

080068e2 <__any_on>:
 80068e2:	f100 0214 	add.w	r2, r0, #20
 80068e6:	6900      	ldr	r0, [r0, #16]
 80068e8:	114b      	asrs	r3, r1, #5
 80068ea:	4298      	cmp	r0, r3
 80068ec:	b510      	push	{r4, lr}
 80068ee:	db11      	blt.n	8006914 <__any_on+0x32>
 80068f0:	dd0a      	ble.n	8006908 <__any_on+0x26>
 80068f2:	f011 011f 	ands.w	r1, r1, #31
 80068f6:	d007      	beq.n	8006908 <__any_on+0x26>
 80068f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80068fc:	fa24 f001 	lsr.w	r0, r4, r1
 8006900:	fa00 f101 	lsl.w	r1, r0, r1
 8006904:	428c      	cmp	r4, r1
 8006906:	d10b      	bne.n	8006920 <__any_on+0x3e>
 8006908:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800690c:	4293      	cmp	r3, r2
 800690e:	d803      	bhi.n	8006918 <__any_on+0x36>
 8006910:	2000      	movs	r0, #0
 8006912:	bd10      	pop	{r4, pc}
 8006914:	4603      	mov	r3, r0
 8006916:	e7f7      	b.n	8006908 <__any_on+0x26>
 8006918:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800691c:	2900      	cmp	r1, #0
 800691e:	d0f5      	beq.n	800690c <__any_on+0x2a>
 8006920:	2001      	movs	r0, #1
 8006922:	e7f6      	b.n	8006912 <__any_on+0x30>

08006924 <sulp>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	ec45 4b10 	vmov	d0, r4, r5
 800692e:	4616      	mov	r6, r2
 8006930:	f7ff feba 	bl	80066a8 <__ulp>
 8006934:	ec51 0b10 	vmov	r0, r1, d0
 8006938:	b17e      	cbz	r6, 800695a <sulp+0x36>
 800693a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800693e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006942:	2b00      	cmp	r3, #0
 8006944:	dd09      	ble.n	800695a <sulp+0x36>
 8006946:	051b      	lsls	r3, r3, #20
 8006948:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800694c:	2400      	movs	r4, #0
 800694e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006952:	4622      	mov	r2, r4
 8006954:	462b      	mov	r3, r5
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	ec41 0b10 	vmov	d0, r0, r1
 800695e:	bd70      	pop	{r4, r5, r6, pc}

08006960 <_strtod_l>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b09f      	sub	sp, #124	@ 0x7c
 8006966:	460c      	mov	r4, r1
 8006968:	9217      	str	r2, [sp, #92]	@ 0x5c
 800696a:	2200      	movs	r2, #0
 800696c:	921a      	str	r2, [sp, #104]	@ 0x68
 800696e:	9005      	str	r0, [sp, #20]
 8006970:	f04f 0a00 	mov.w	sl, #0
 8006974:	f04f 0b00 	mov.w	fp, #0
 8006978:	460a      	mov	r2, r1
 800697a:	9219      	str	r2, [sp, #100]	@ 0x64
 800697c:	7811      	ldrb	r1, [r2, #0]
 800697e:	292b      	cmp	r1, #43	@ 0x2b
 8006980:	d04a      	beq.n	8006a18 <_strtod_l+0xb8>
 8006982:	d838      	bhi.n	80069f6 <_strtod_l+0x96>
 8006984:	290d      	cmp	r1, #13
 8006986:	d832      	bhi.n	80069ee <_strtod_l+0x8e>
 8006988:	2908      	cmp	r1, #8
 800698a:	d832      	bhi.n	80069f2 <_strtod_l+0x92>
 800698c:	2900      	cmp	r1, #0
 800698e:	d03b      	beq.n	8006a08 <_strtod_l+0xa8>
 8006990:	2200      	movs	r2, #0
 8006992:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006994:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006996:	782a      	ldrb	r2, [r5, #0]
 8006998:	2a30      	cmp	r2, #48	@ 0x30
 800699a:	f040 80b3 	bne.w	8006b04 <_strtod_l+0x1a4>
 800699e:	786a      	ldrb	r2, [r5, #1]
 80069a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80069a4:	2a58      	cmp	r2, #88	@ 0x58
 80069a6:	d16e      	bne.n	8006a86 <_strtod_l+0x126>
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4a8e      	ldr	r2, [pc, #568]	@ (8006bec <_strtod_l+0x28c>)
 80069b4:	9805      	ldr	r0, [sp, #20]
 80069b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80069b8:	a919      	add	r1, sp, #100	@ 0x64
 80069ba:	f001 f927 	bl	8007c0c <__gethex>
 80069be:	f010 060f 	ands.w	r6, r0, #15
 80069c2:	4604      	mov	r4, r0
 80069c4:	d005      	beq.n	80069d2 <_strtod_l+0x72>
 80069c6:	2e06      	cmp	r6, #6
 80069c8:	d128      	bne.n	8006a1c <_strtod_l+0xbc>
 80069ca:	3501      	adds	r5, #1
 80069cc:	2300      	movs	r3, #0
 80069ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80069d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 858e 	bne.w	80074f6 <_strtod_l+0xb96>
 80069da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069dc:	b1cb      	cbz	r3, 8006a12 <_strtod_l+0xb2>
 80069de:	4652      	mov	r2, sl
 80069e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80069e4:	ec43 2b10 	vmov	d0, r2, r3
 80069e8:	b01f      	add	sp, #124	@ 0x7c
 80069ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ee:	2920      	cmp	r1, #32
 80069f0:	d1ce      	bne.n	8006990 <_strtod_l+0x30>
 80069f2:	3201      	adds	r2, #1
 80069f4:	e7c1      	b.n	800697a <_strtod_l+0x1a>
 80069f6:	292d      	cmp	r1, #45	@ 0x2d
 80069f8:	d1ca      	bne.n	8006990 <_strtod_l+0x30>
 80069fa:	2101      	movs	r1, #1
 80069fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80069fe:	1c51      	adds	r1, r2, #1
 8006a00:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a02:	7852      	ldrb	r2, [r2, #1]
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	d1c5      	bne.n	8006994 <_strtod_l+0x34>
 8006a08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 8570 	bne.w	80074f2 <_strtod_l+0xb92>
 8006a12:	4652      	mov	r2, sl
 8006a14:	465b      	mov	r3, fp
 8006a16:	e7e5      	b.n	80069e4 <_strtod_l+0x84>
 8006a18:	2100      	movs	r1, #0
 8006a1a:	e7ef      	b.n	80069fc <_strtod_l+0x9c>
 8006a1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a1e:	b13a      	cbz	r2, 8006a30 <_strtod_l+0xd0>
 8006a20:	2135      	movs	r1, #53	@ 0x35
 8006a22:	a81c      	add	r0, sp, #112	@ 0x70
 8006a24:	f7ff ff3a 	bl	800689c <__copybits>
 8006a28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a2a:	9805      	ldr	r0, [sp, #20]
 8006a2c:	f7ff fb08 	bl	8006040 <_Bfree>
 8006a30:	3e01      	subs	r6, #1
 8006a32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006a34:	2e04      	cmp	r6, #4
 8006a36:	d806      	bhi.n	8006a46 <_strtod_l+0xe6>
 8006a38:	e8df f006 	tbb	[pc, r6]
 8006a3c:	201d0314 	.word	0x201d0314
 8006a40:	14          	.byte	0x14
 8006a41:	00          	.byte	0x00
 8006a42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006a46:	05e1      	lsls	r1, r4, #23
 8006a48:	bf48      	it	mi
 8006a4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006a4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a52:	0d1b      	lsrs	r3, r3, #20
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1bb      	bne.n	80069d2 <_strtod_l+0x72>
 8006a5a:	f7fe fb2f 	bl	80050bc <__errno>
 8006a5e:	2322      	movs	r3, #34	@ 0x22
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	e7b6      	b.n	80069d2 <_strtod_l+0x72>
 8006a64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006a68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006a6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a74:	e7e7      	b.n	8006a46 <_strtod_l+0xe6>
 8006a76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006bf4 <_strtod_l+0x294>
 8006a7a:	e7e4      	b.n	8006a46 <_strtod_l+0xe6>
 8006a7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006a80:	f04f 3aff 	mov.w	sl, #4294967295
 8006a84:	e7df      	b.n	8006a46 <_strtod_l+0xe6>
 8006a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b30      	cmp	r3, #48	@ 0x30
 8006a90:	d0f9      	beq.n	8006a86 <_strtod_l+0x126>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d09d      	beq.n	80069d2 <_strtod_l+0x72>
 8006a96:	2301      	movs	r3, #1
 8006a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa4:	461f      	mov	r7, r3
 8006aa6:	220a      	movs	r2, #10
 8006aa8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006aaa:	7805      	ldrb	r5, [r0, #0]
 8006aac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ab0:	b2d9      	uxtb	r1, r3
 8006ab2:	2909      	cmp	r1, #9
 8006ab4:	d928      	bls.n	8006b08 <_strtod_l+0x1a8>
 8006ab6:	494e      	ldr	r1, [pc, #312]	@ (8006bf0 <_strtod_l+0x290>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f000 ffd5 	bl	8007a68 <strncmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d032      	beq.n	8006b28 <_strtod_l+0x1c8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	4681      	mov	r9, r0
 8006ac8:	463d      	mov	r5, r7
 8006aca:	4603      	mov	r3, r0
 8006acc:	2a65      	cmp	r2, #101	@ 0x65
 8006ace:	d001      	beq.n	8006ad4 <_strtod_l+0x174>
 8006ad0:	2a45      	cmp	r2, #69	@ 0x45
 8006ad2:	d114      	bne.n	8006afe <_strtod_l+0x19e>
 8006ad4:	b91d      	cbnz	r5, 8006ade <_strtod_l+0x17e>
 8006ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad8:	4302      	orrs	r2, r0
 8006ada:	d095      	beq.n	8006a08 <_strtod_l+0xa8>
 8006adc:	2500      	movs	r5, #0
 8006ade:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006ae0:	1c62      	adds	r2, r4, #1
 8006ae2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ae4:	7862      	ldrb	r2, [r4, #1]
 8006ae6:	2a2b      	cmp	r2, #43	@ 0x2b
 8006ae8:	d077      	beq.n	8006bda <_strtod_l+0x27a>
 8006aea:	2a2d      	cmp	r2, #45	@ 0x2d
 8006aec:	d07b      	beq.n	8006be6 <_strtod_l+0x286>
 8006aee:	f04f 0c00 	mov.w	ip, #0
 8006af2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006af6:	2909      	cmp	r1, #9
 8006af8:	f240 8082 	bls.w	8006c00 <_strtod_l+0x2a0>
 8006afc:	9419      	str	r4, [sp, #100]	@ 0x64
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	e0a2      	b.n	8006c4a <_strtod_l+0x2ea>
 8006b04:	2300      	movs	r3, #0
 8006b06:	e7c7      	b.n	8006a98 <_strtod_l+0x138>
 8006b08:	2f08      	cmp	r7, #8
 8006b0a:	bfd5      	itete	le
 8006b0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006b0e:	9908      	ldrgt	r1, [sp, #32]
 8006b10:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b14:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b18:	f100 0001 	add.w	r0, r0, #1
 8006b1c:	bfd4      	ite	le
 8006b1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006b20:	9308      	strgt	r3, [sp, #32]
 8006b22:	3701      	adds	r7, #1
 8006b24:	9019      	str	r0, [sp, #100]	@ 0x64
 8006b26:	e7bf      	b.n	8006aa8 <_strtod_l+0x148>
 8006b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b2e:	785a      	ldrb	r2, [r3, #1]
 8006b30:	b37f      	cbz	r7, 8006b92 <_strtod_l+0x232>
 8006b32:	4681      	mov	r9, r0
 8006b34:	463d      	mov	r5, r7
 8006b36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	d912      	bls.n	8006b64 <_strtod_l+0x204>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e7c4      	b.n	8006acc <_strtod_l+0x16c>
 8006b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b48:	785a      	ldrb	r2, [r3, #1]
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	2a30      	cmp	r2, #48	@ 0x30
 8006b4e:	d0f8      	beq.n	8006b42 <_strtod_l+0x1e2>
 8006b50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	f200 84d3 	bhi.w	8007500 <_strtod_l+0xba0>
 8006b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b5e:	4681      	mov	r9, r0
 8006b60:	2000      	movs	r0, #0
 8006b62:	4605      	mov	r5, r0
 8006b64:	3a30      	subs	r2, #48	@ 0x30
 8006b66:	f100 0301 	add.w	r3, r0, #1
 8006b6a:	d02a      	beq.n	8006bc2 <_strtod_l+0x262>
 8006b6c:	4499      	add	r9, r3
 8006b6e:	eb00 0c05 	add.w	ip, r0, r5
 8006b72:	462b      	mov	r3, r5
 8006b74:	210a      	movs	r1, #10
 8006b76:	4563      	cmp	r3, ip
 8006b78:	d10d      	bne.n	8006b96 <_strtod_l+0x236>
 8006b7a:	1c69      	adds	r1, r5, #1
 8006b7c:	4401      	add	r1, r0
 8006b7e:	4428      	add	r0, r5
 8006b80:	2808      	cmp	r0, #8
 8006b82:	dc16      	bgt.n	8006bb2 <_strtod_l+0x252>
 8006b84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b86:	230a      	movs	r3, #10
 8006b88:	fb03 2300 	mla	r3, r3, r0, r2
 8006b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e018      	b.n	8006bc4 <_strtod_l+0x264>
 8006b92:	4638      	mov	r0, r7
 8006b94:	e7da      	b.n	8006b4c <_strtod_l+0x1ec>
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	f103 0301 	add.w	r3, r3, #1
 8006b9c:	dc03      	bgt.n	8006ba6 <_strtod_l+0x246>
 8006b9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006ba0:	434e      	muls	r6, r1
 8006ba2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006ba4:	e7e7      	b.n	8006b76 <_strtod_l+0x216>
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	bfde      	ittt	le
 8006baa:	9e08      	ldrle	r6, [sp, #32]
 8006bac:	434e      	mulle	r6, r1
 8006bae:	9608      	strle	r6, [sp, #32]
 8006bb0:	e7e1      	b.n	8006b76 <_strtod_l+0x216>
 8006bb2:	280f      	cmp	r0, #15
 8006bb4:	dceb      	bgt.n	8006b8e <_strtod_l+0x22e>
 8006bb6:	9808      	ldr	r0, [sp, #32]
 8006bb8:	230a      	movs	r3, #10
 8006bba:	fb03 2300 	mla	r3, r3, r0, r2
 8006bbe:	9308      	str	r3, [sp, #32]
 8006bc0:	e7e5      	b.n	8006b8e <_strtod_l+0x22e>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bc6:	1c50      	adds	r0, r2, #1
 8006bc8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006bca:	7852      	ldrb	r2, [r2, #1]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	460d      	mov	r5, r1
 8006bd0:	e7b1      	b.n	8006b36 <_strtod_l+0x1d6>
 8006bd2:	f04f 0900 	mov.w	r9, #0
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e77d      	b.n	8006ad6 <_strtod_l+0x176>
 8006bda:	f04f 0c00 	mov.w	ip, #0
 8006bde:	1ca2      	adds	r2, r4, #2
 8006be0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006be2:	78a2      	ldrb	r2, [r4, #2]
 8006be4:	e785      	b.n	8006af2 <_strtod_l+0x192>
 8006be6:	f04f 0c01 	mov.w	ip, #1
 8006bea:	e7f8      	b.n	8006bde <_strtod_l+0x27e>
 8006bec:	08008a48 	.word	0x08008a48
 8006bf0:	08008a30 	.word	0x08008a30
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bfa:	1c51      	adds	r1, r2, #1
 8006bfc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006bfe:	7852      	ldrb	r2, [r2, #1]
 8006c00:	2a30      	cmp	r2, #48	@ 0x30
 8006c02:	d0f9      	beq.n	8006bf8 <_strtod_l+0x298>
 8006c04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006c08:	2908      	cmp	r1, #8
 8006c0a:	f63f af78 	bhi.w	8006afe <_strtod_l+0x19e>
 8006c0e:	3a30      	subs	r2, #48	@ 0x30
 8006c10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006c16:	f04f 080a 	mov.w	r8, #10
 8006c1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c1c:	1c56      	adds	r6, r2, #1
 8006c1e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006c20:	7852      	ldrb	r2, [r2, #1]
 8006c22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006c26:	f1be 0f09 	cmp.w	lr, #9
 8006c2a:	d939      	bls.n	8006ca0 <_strtod_l+0x340>
 8006c2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c2e:	1a76      	subs	r6, r6, r1
 8006c30:	2e08      	cmp	r6, #8
 8006c32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006c36:	dc03      	bgt.n	8006c40 <_strtod_l+0x2e0>
 8006c38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c3a:	4588      	cmp	r8, r1
 8006c3c:	bfa8      	it	ge
 8006c3e:	4688      	movge	r8, r1
 8006c40:	f1bc 0f00 	cmp.w	ip, #0
 8006c44:	d001      	beq.n	8006c4a <_strtod_l+0x2ea>
 8006c46:	f1c8 0800 	rsb	r8, r8, #0
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	d14e      	bne.n	8006cec <_strtod_l+0x38c>
 8006c4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c50:	4308      	orrs	r0, r1
 8006c52:	f47f aebe 	bne.w	80069d2 <_strtod_l+0x72>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f47f aed6 	bne.w	8006a08 <_strtod_l+0xa8>
 8006c5c:	2a69      	cmp	r2, #105	@ 0x69
 8006c5e:	d028      	beq.n	8006cb2 <_strtod_l+0x352>
 8006c60:	dc25      	bgt.n	8006cae <_strtod_l+0x34e>
 8006c62:	2a49      	cmp	r2, #73	@ 0x49
 8006c64:	d025      	beq.n	8006cb2 <_strtod_l+0x352>
 8006c66:	2a4e      	cmp	r2, #78	@ 0x4e
 8006c68:	f47f aece 	bne.w	8006a08 <_strtod_l+0xa8>
 8006c6c:	499b      	ldr	r1, [pc, #620]	@ (8006edc <_strtod_l+0x57c>)
 8006c6e:	a819      	add	r0, sp, #100	@ 0x64
 8006c70:	f001 f9ee 	bl	8008050 <__match>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f43f aec7 	beq.w	8006a08 <_strtod_l+0xa8>
 8006c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b28      	cmp	r3, #40	@ 0x28
 8006c80:	d12e      	bne.n	8006ce0 <_strtod_l+0x380>
 8006c82:	4997      	ldr	r1, [pc, #604]	@ (8006ee0 <_strtod_l+0x580>)
 8006c84:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c86:	a819      	add	r0, sp, #100	@ 0x64
 8006c88:	f001 f9f6 	bl	8008078 <__hexnan>
 8006c8c:	2805      	cmp	r0, #5
 8006c8e:	d127      	bne.n	8006ce0 <_strtod_l+0x380>
 8006c90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006c92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006c96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c9e:	e698      	b.n	80069d2 <_strtod_l+0x72>
 8006ca0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ca2:	fb08 2101 	mla	r1, r8, r1, r2
 8006ca6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006caa:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cac:	e7b5      	b.n	8006c1a <_strtod_l+0x2ba>
 8006cae:	2a6e      	cmp	r2, #110	@ 0x6e
 8006cb0:	e7da      	b.n	8006c68 <_strtod_l+0x308>
 8006cb2:	498c      	ldr	r1, [pc, #560]	@ (8006ee4 <_strtod_l+0x584>)
 8006cb4:	a819      	add	r0, sp, #100	@ 0x64
 8006cb6:	f001 f9cb 	bl	8008050 <__match>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f43f aea4 	beq.w	8006a08 <_strtod_l+0xa8>
 8006cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cc2:	4989      	ldr	r1, [pc, #548]	@ (8006ee8 <_strtod_l+0x588>)
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	a819      	add	r0, sp, #100	@ 0x64
 8006cc8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006cca:	f001 f9c1 	bl	8008050 <__match>
 8006cce:	b910      	cbnz	r0, 8006cd6 <_strtod_l+0x376>
 8006cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006cd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006ef8 <_strtod_l+0x598>
 8006cda:	f04f 0a00 	mov.w	sl, #0
 8006cde:	e678      	b.n	80069d2 <_strtod_l+0x72>
 8006ce0:	4882      	ldr	r0, [pc, #520]	@ (8006eec <_strtod_l+0x58c>)
 8006ce2:	f000 fef1 	bl	8007ac8 <nan>
 8006ce6:	ec5b ab10 	vmov	sl, fp, d0
 8006cea:	e672      	b.n	80069d2 <_strtod_l+0x72>
 8006cec:	eba8 0309 	sub.w	r3, r8, r9
 8006cf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf4:	2f00      	cmp	r7, #0
 8006cf6:	bf08      	it	eq
 8006cf8:	462f      	moveq	r7, r5
 8006cfa:	2d10      	cmp	r5, #16
 8006cfc:	462c      	mov	r4, r5
 8006cfe:	bfa8      	it	ge
 8006d00:	2410      	movge	r4, #16
 8006d02:	f7f9 fbff 	bl	8000504 <__aeabi_ui2d>
 8006d06:	2d09      	cmp	r5, #9
 8006d08:	4682      	mov	sl, r0
 8006d0a:	468b      	mov	fp, r1
 8006d0c:	dc13      	bgt.n	8006d36 <_strtod_l+0x3d6>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f43f ae5e 	beq.w	80069d2 <_strtod_l+0x72>
 8006d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d18:	dd78      	ble.n	8006e0c <_strtod_l+0x4ac>
 8006d1a:	2b16      	cmp	r3, #22
 8006d1c:	dc5f      	bgt.n	8006dde <_strtod_l+0x47e>
 8006d1e:	4974      	ldr	r1, [pc, #464]	@ (8006ef0 <_strtod_l+0x590>)
 8006d20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d28:	4652      	mov	r2, sl
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	f7f9 fc64 	bl	80005f8 <__aeabi_dmul>
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	e64d      	b.n	80069d2 <_strtod_l+0x72>
 8006d36:	4b6e      	ldr	r3, [pc, #440]	@ (8006ef0 <_strtod_l+0x590>)
 8006d38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4682      	mov	sl, r0
 8006d46:	9808      	ldr	r0, [sp, #32]
 8006d48:	468b      	mov	fp, r1
 8006d4a:	f7f9 fbdb 	bl	8000504 <__aeabi_ui2d>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4650      	mov	r0, sl
 8006d54:	4659      	mov	r1, fp
 8006d56:	f7f9 fa99 	bl	800028c <__adddf3>
 8006d5a:	2d0f      	cmp	r5, #15
 8006d5c:	4682      	mov	sl, r0
 8006d5e:	468b      	mov	fp, r1
 8006d60:	ddd5      	ble.n	8006d0e <_strtod_l+0x3ae>
 8006d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d64:	1b2c      	subs	r4, r5, r4
 8006d66:	441c      	add	r4, r3
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	f340 8096 	ble.w	8006e9a <_strtod_l+0x53a>
 8006d6e:	f014 030f 	ands.w	r3, r4, #15
 8006d72:	d00a      	beq.n	8006d8a <_strtod_l+0x42a>
 8006d74:	495e      	ldr	r1, [pc, #376]	@ (8006ef0 <_strtod_l+0x590>)
 8006d76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	4682      	mov	sl, r0
 8006d88:	468b      	mov	fp, r1
 8006d8a:	f034 040f 	bics.w	r4, r4, #15
 8006d8e:	d073      	beq.n	8006e78 <_strtod_l+0x518>
 8006d90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006d94:	dd48      	ble.n	8006e28 <_strtod_l+0x4c8>
 8006d96:	2400      	movs	r4, #0
 8006d98:	46a0      	mov	r8, r4
 8006d9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d9c:	46a1      	mov	r9, r4
 8006d9e:	9a05      	ldr	r2, [sp, #20]
 8006da0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006ef8 <_strtod_l+0x598>
 8006da4:	2322      	movs	r3, #34	@ 0x22
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	f04f 0a00 	mov.w	sl, #0
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f43f ae0f 	beq.w	80069d2 <_strtod_l+0x72>
 8006db4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006db6:	9805      	ldr	r0, [sp, #20]
 8006db8:	f7ff f942 	bl	8006040 <_Bfree>
 8006dbc:	9805      	ldr	r0, [sp, #20]
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	f7ff f93e 	bl	8006040 <_Bfree>
 8006dc4:	9805      	ldr	r0, [sp, #20]
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	f7ff f93a 	bl	8006040 <_Bfree>
 8006dcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	f7ff f936 	bl	8006040 <_Bfree>
 8006dd4:	9805      	ldr	r0, [sp, #20]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f7ff f932 	bl	8006040 <_Bfree>
 8006ddc:	e5f9      	b.n	80069d2 <_strtod_l+0x72>
 8006dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006de4:	4293      	cmp	r3, r2
 8006de6:	dbbc      	blt.n	8006d62 <_strtod_l+0x402>
 8006de8:	4c41      	ldr	r4, [pc, #260]	@ (8006ef0 <_strtod_l+0x590>)
 8006dea:	f1c5 050f 	rsb	r5, r5, #15
 8006dee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006df2:	4652      	mov	r2, sl
 8006df4:	465b      	mov	r3, fp
 8006df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dfa:	f7f9 fbfd 	bl	80005f8 <__aeabi_dmul>
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	1b5d      	subs	r5, r3, r5
 8006e02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e0a:	e78f      	b.n	8006d2c <_strtod_l+0x3cc>
 8006e0c:	3316      	adds	r3, #22
 8006e0e:	dba8      	blt.n	8006d62 <_strtod_l+0x402>
 8006e10:	4b37      	ldr	r3, [pc, #220]	@ (8006ef0 <_strtod_l+0x590>)
 8006e12:	eba9 0808 	sub.w	r8, r9, r8
 8006e16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006e1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	f7f9 fd13 	bl	800084c <__aeabi_ddiv>
 8006e26:	e783      	b.n	8006d30 <_strtod_l+0x3d0>
 8006e28:	4b32      	ldr	r3, [pc, #200]	@ (8006ef4 <_strtod_l+0x594>)
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	1124      	asrs	r4, r4, #4
 8006e30:	4650      	mov	r0, sl
 8006e32:	4659      	mov	r1, fp
 8006e34:	461e      	mov	r6, r3
 8006e36:	2c01      	cmp	r4, #1
 8006e38:	dc21      	bgt.n	8006e7e <_strtod_l+0x51e>
 8006e3a:	b10b      	cbz	r3, 8006e40 <_strtod_l+0x4e0>
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	468b      	mov	fp, r1
 8006e40:	492c      	ldr	r1, [pc, #176]	@ (8006ef4 <_strtod_l+0x594>)
 8006e42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006e46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e52:	f7f9 fbd1 	bl	80005f8 <__aeabi_dmul>
 8006e56:	4b28      	ldr	r3, [pc, #160]	@ (8006ef8 <_strtod_l+0x598>)
 8006e58:	460a      	mov	r2, r1
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	4927      	ldr	r1, [pc, #156]	@ (8006efc <_strtod_l+0x59c>)
 8006e5e:	428b      	cmp	r3, r1
 8006e60:	4682      	mov	sl, r0
 8006e62:	d898      	bhi.n	8006d96 <_strtod_l+0x436>
 8006e64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf86      	itte	hi
 8006e6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006f00 <_strtod_l+0x5a0>
 8006e70:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9308      	str	r3, [sp, #32]
 8006e7c:	e07a      	b.n	8006f74 <_strtod_l+0x614>
 8006e7e:	07e2      	lsls	r2, r4, #31
 8006e80:	d505      	bpl.n	8006e8e <_strtod_l+0x52e>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 fbb6 	bl	80005f8 <__aeabi_dmul>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	9a08      	ldr	r2, [sp, #32]
 8006e90:	3208      	adds	r2, #8
 8006e92:	3601      	adds	r6, #1
 8006e94:	1064      	asrs	r4, r4, #1
 8006e96:	9208      	str	r2, [sp, #32]
 8006e98:	e7cd      	b.n	8006e36 <_strtod_l+0x4d6>
 8006e9a:	d0ed      	beq.n	8006e78 <_strtod_l+0x518>
 8006e9c:	4264      	negs	r4, r4
 8006e9e:	f014 020f 	ands.w	r2, r4, #15
 8006ea2:	d00a      	beq.n	8006eba <_strtod_l+0x55a>
 8006ea4:	4b12      	ldr	r3, [pc, #72]	@ (8006ef0 <_strtod_l+0x590>)
 8006ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 fccb 	bl	800084c <__aeabi_ddiv>
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	468b      	mov	fp, r1
 8006eba:	1124      	asrs	r4, r4, #4
 8006ebc:	d0dc      	beq.n	8006e78 <_strtod_l+0x518>
 8006ebe:	2c1f      	cmp	r4, #31
 8006ec0:	dd20      	ble.n	8006f04 <_strtod_l+0x5a4>
 8006ec2:	2400      	movs	r4, #0
 8006ec4:	46a0      	mov	r8, r4
 8006ec6:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ec8:	46a1      	mov	r9, r4
 8006eca:	9a05      	ldr	r2, [sp, #20]
 8006ecc:	2322      	movs	r3, #34	@ 0x22
 8006ece:	f04f 0a00 	mov.w	sl, #0
 8006ed2:	f04f 0b00 	mov.w	fp, #0
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e768      	b.n	8006dac <_strtod_l+0x44c>
 8006eda:	bf00      	nop
 8006edc:	08008821 	.word	0x08008821
 8006ee0:	08008a34 	.word	0x08008a34
 8006ee4:	08008819 	.word	0x08008819
 8006ee8:	08008850 	.word	0x08008850
 8006eec:	08008bdd 	.word	0x08008bdd
 8006ef0:	08008968 	.word	0x08008968
 8006ef4:	08008940 	.word	0x08008940
 8006ef8:	7ff00000 	.word	0x7ff00000
 8006efc:	7ca00000 	.word	0x7ca00000
 8006f00:	7fefffff 	.word	0x7fefffff
 8006f04:	f014 0310 	ands.w	r3, r4, #16
 8006f08:	bf18      	it	ne
 8006f0a:	236a      	movne	r3, #106	@ 0x6a
 8006f0c:	4ea9      	ldr	r6, [pc, #676]	@ (80071b4 <_strtod_l+0x854>)
 8006f0e:	9308      	str	r3, [sp, #32]
 8006f10:	4650      	mov	r0, sl
 8006f12:	4659      	mov	r1, fp
 8006f14:	2300      	movs	r3, #0
 8006f16:	07e2      	lsls	r2, r4, #31
 8006f18:	d504      	bpl.n	8006f24 <_strtod_l+0x5c4>
 8006f1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	2301      	movs	r3, #1
 8006f24:	1064      	asrs	r4, r4, #1
 8006f26:	f106 0608 	add.w	r6, r6, #8
 8006f2a:	d1f4      	bne.n	8006f16 <_strtod_l+0x5b6>
 8006f2c:	b10b      	cbz	r3, 8006f32 <_strtod_l+0x5d2>
 8006f2e:	4682      	mov	sl, r0
 8006f30:	468b      	mov	fp, r1
 8006f32:	9b08      	ldr	r3, [sp, #32]
 8006f34:	b1b3      	cbz	r3, 8006f64 <_strtod_l+0x604>
 8006f36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006f3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	4659      	mov	r1, fp
 8006f42:	dd0f      	ble.n	8006f64 <_strtod_l+0x604>
 8006f44:	2b1f      	cmp	r3, #31
 8006f46:	dd55      	ble.n	8006ff4 <_strtod_l+0x694>
 8006f48:	2b34      	cmp	r3, #52	@ 0x34
 8006f4a:	bfde      	ittt	le
 8006f4c:	f04f 33ff 	movle.w	r3, #4294967295
 8006f50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006f54:	4093      	lslle	r3, r2
 8006f56:	f04f 0a00 	mov.w	sl, #0
 8006f5a:	bfcc      	ite	gt
 8006f5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006f60:	ea03 0b01 	andle.w	fp, r3, r1
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4650      	mov	r0, sl
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	f7f9 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d1a6      	bne.n	8006ec2 <_strtod_l+0x562>
 8006f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f7a:	9805      	ldr	r0, [sp, #20]
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	463a      	mov	r2, r7
 8006f80:	f7ff f8c6 	bl	8006110 <__s2b>
 8006f84:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f af05 	beq.w	8006d96 <_strtod_l+0x436>
 8006f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	eba9 0308 	sub.w	r3, r9, r8
 8006f94:	bfa8      	it	ge
 8006f96:	2300      	movge	r3, #0
 8006f98:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006fa0:	9316      	str	r3, [sp, #88]	@ 0x58
 8006fa2:	46a0      	mov	r8, r4
 8006fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fa6:	9805      	ldr	r0, [sp, #20]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	f7ff f809 	bl	8005fc0 <_Balloc>
 8006fae:	4681      	mov	r9, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f43f aef4 	beq.w	8006d9e <_strtod_l+0x43e>
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	3202      	adds	r2, #2
 8006fbc:	f103 010c 	add.w	r1, r3, #12
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	300c      	adds	r0, #12
 8006fc4:	f000 fd72 	bl	8007aac <memcpy>
 8006fc8:	ec4b ab10 	vmov	d0, sl, fp
 8006fcc:	9805      	ldr	r0, [sp, #20]
 8006fce:	aa1c      	add	r2, sp, #112	@ 0x70
 8006fd0:	a91b      	add	r1, sp, #108	@ 0x6c
 8006fd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006fd6:	f7ff fbd7 	bl	8006788 <__d2b>
 8006fda:	901a      	str	r0, [sp, #104]	@ 0x68
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f43f aede 	beq.w	8006d9e <_strtod_l+0x43e>
 8006fe2:	9805      	ldr	r0, [sp, #20]
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	f7ff f929 	bl	800623c <__i2b>
 8006fea:	4680      	mov	r8, r0
 8006fec:	b948      	cbnz	r0, 8007002 <_strtod_l+0x6a2>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	e6d4      	b.n	8006d9e <_strtod_l+0x43e>
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	ea03 0a0a 	and.w	sl, r3, sl
 8007000:	e7b0      	b.n	8006f64 <_strtod_l+0x604>
 8007002:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007004:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007006:	2d00      	cmp	r5, #0
 8007008:	bfab      	itete	ge
 800700a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800700c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800700e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007010:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007012:	bfac      	ite	ge
 8007014:	18ef      	addge	r7, r5, r3
 8007016:	1b5e      	sublt	r6, r3, r5
 8007018:	9b08      	ldr	r3, [sp, #32]
 800701a:	1aed      	subs	r5, r5, r3
 800701c:	4415      	add	r5, r2
 800701e:	4b66      	ldr	r3, [pc, #408]	@ (80071b8 <_strtod_l+0x858>)
 8007020:	3d01      	subs	r5, #1
 8007022:	429d      	cmp	r5, r3
 8007024:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007028:	da50      	bge.n	80070cc <_strtod_l+0x76c>
 800702a:	1b5b      	subs	r3, r3, r5
 800702c:	2b1f      	cmp	r3, #31
 800702e:	eba2 0203 	sub.w	r2, r2, r3
 8007032:	f04f 0101 	mov.w	r1, #1
 8007036:	dc3d      	bgt.n	80070b4 <_strtod_l+0x754>
 8007038:	fa01 f303 	lsl.w	r3, r1, r3
 800703c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800703e:	2300      	movs	r3, #0
 8007040:	9310      	str	r3, [sp, #64]	@ 0x40
 8007042:	18bd      	adds	r5, r7, r2
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	42af      	cmp	r7, r5
 8007048:	4416      	add	r6, r2
 800704a:	441e      	add	r6, r3
 800704c:	463b      	mov	r3, r7
 800704e:	bfa8      	it	ge
 8007050:	462b      	movge	r3, r5
 8007052:	42b3      	cmp	r3, r6
 8007054:	bfa8      	it	ge
 8007056:	4633      	movge	r3, r6
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfc2      	ittt	gt
 800705c:	1aed      	subgt	r5, r5, r3
 800705e:	1af6      	subgt	r6, r6, r3
 8007060:	1aff      	subgt	r7, r7, r3
 8007062:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd16      	ble.n	8007096 <_strtod_l+0x736>
 8007068:	4641      	mov	r1, r8
 800706a:	9805      	ldr	r0, [sp, #20]
 800706c:	461a      	mov	r2, r3
 800706e:	f7ff f9a5 	bl	80063bc <__pow5mult>
 8007072:	4680      	mov	r8, r0
 8007074:	2800      	cmp	r0, #0
 8007076:	d0ba      	beq.n	8006fee <_strtod_l+0x68e>
 8007078:	4601      	mov	r1, r0
 800707a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800707c:	9805      	ldr	r0, [sp, #20]
 800707e:	f7ff f8f3 	bl	8006268 <__multiply>
 8007082:	900e      	str	r0, [sp, #56]	@ 0x38
 8007084:	2800      	cmp	r0, #0
 8007086:	f43f ae8a 	beq.w	8006d9e <_strtod_l+0x43e>
 800708a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800708c:	9805      	ldr	r0, [sp, #20]
 800708e:	f7fe ffd7 	bl	8006040 <_Bfree>
 8007092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007094:	931a      	str	r3, [sp, #104]	@ 0x68
 8007096:	2d00      	cmp	r5, #0
 8007098:	dc1d      	bgt.n	80070d6 <_strtod_l+0x776>
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	dd23      	ble.n	80070e8 <_strtod_l+0x788>
 80070a0:	4649      	mov	r1, r9
 80070a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80070a4:	9805      	ldr	r0, [sp, #20]
 80070a6:	f7ff f989 	bl	80063bc <__pow5mult>
 80070aa:	4681      	mov	r9, r0
 80070ac:	b9e0      	cbnz	r0, 80070e8 <_strtod_l+0x788>
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	e674      	b.n	8006d9e <_strtod_l+0x43e>
 80070b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80070b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80070bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80070c0:	35e2      	adds	r5, #226	@ 0xe2
 80070c2:	fa01 f305 	lsl.w	r3, r1, r5
 80070c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80070c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80070ca:	e7ba      	b.n	8007042 <_strtod_l+0x6e2>
 80070cc:	2300      	movs	r3, #0
 80070ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80070d0:	2301      	movs	r3, #1
 80070d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070d4:	e7b5      	b.n	8007042 <_strtod_l+0x6e2>
 80070d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070d8:	9805      	ldr	r0, [sp, #20]
 80070da:	462a      	mov	r2, r5
 80070dc:	f7ff f9c8 	bl	8006470 <__lshift>
 80070e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d1d9      	bne.n	800709a <_strtod_l+0x73a>
 80070e6:	e65a      	b.n	8006d9e <_strtod_l+0x43e>
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	dd07      	ble.n	80070fc <_strtod_l+0x79c>
 80070ec:	4649      	mov	r1, r9
 80070ee:	9805      	ldr	r0, [sp, #20]
 80070f0:	4632      	mov	r2, r6
 80070f2:	f7ff f9bd 	bl	8006470 <__lshift>
 80070f6:	4681      	mov	r9, r0
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0d8      	beq.n	80070ae <_strtod_l+0x74e>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	dd08      	ble.n	8007112 <_strtod_l+0x7b2>
 8007100:	4641      	mov	r1, r8
 8007102:	9805      	ldr	r0, [sp, #20]
 8007104:	463a      	mov	r2, r7
 8007106:	f7ff f9b3 	bl	8006470 <__lshift>
 800710a:	4680      	mov	r8, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	f43f ae46 	beq.w	8006d9e <_strtod_l+0x43e>
 8007112:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007114:	9805      	ldr	r0, [sp, #20]
 8007116:	464a      	mov	r2, r9
 8007118:	f7ff fa32 	bl	8006580 <__mdiff>
 800711c:	4604      	mov	r4, r0
 800711e:	2800      	cmp	r0, #0
 8007120:	f43f ae3d 	beq.w	8006d9e <_strtod_l+0x43e>
 8007124:	68c3      	ldr	r3, [r0, #12]
 8007126:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007128:	2300      	movs	r3, #0
 800712a:	60c3      	str	r3, [r0, #12]
 800712c:	4641      	mov	r1, r8
 800712e:	f7ff fa0b 	bl	8006548 <__mcmp>
 8007132:	2800      	cmp	r0, #0
 8007134:	da46      	bge.n	80071c4 <_strtod_l+0x864>
 8007136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007138:	ea53 030a 	orrs.w	r3, r3, sl
 800713c:	d16c      	bne.n	8007218 <_strtod_l+0x8b8>
 800713e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007142:	2b00      	cmp	r3, #0
 8007144:	d168      	bne.n	8007218 <_strtod_l+0x8b8>
 8007146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800714a:	0d1b      	lsrs	r3, r3, #20
 800714c:	051b      	lsls	r3, r3, #20
 800714e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007152:	d961      	bls.n	8007218 <_strtod_l+0x8b8>
 8007154:	6963      	ldr	r3, [r4, #20]
 8007156:	b913      	cbnz	r3, 800715e <_strtod_l+0x7fe>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	2b01      	cmp	r3, #1
 800715c:	dd5c      	ble.n	8007218 <_strtod_l+0x8b8>
 800715e:	4621      	mov	r1, r4
 8007160:	2201      	movs	r2, #1
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	f7ff f984 	bl	8006470 <__lshift>
 8007168:	4641      	mov	r1, r8
 800716a:	4604      	mov	r4, r0
 800716c:	f7ff f9ec 	bl	8006548 <__mcmp>
 8007170:	2800      	cmp	r0, #0
 8007172:	dd51      	ble.n	8007218 <_strtod_l+0x8b8>
 8007174:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007178:	9a08      	ldr	r2, [sp, #32]
 800717a:	0d1b      	lsrs	r3, r3, #20
 800717c:	051b      	lsls	r3, r3, #20
 800717e:	2a00      	cmp	r2, #0
 8007180:	d06b      	beq.n	800725a <_strtod_l+0x8fa>
 8007182:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007186:	d868      	bhi.n	800725a <_strtod_l+0x8fa>
 8007188:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800718c:	f67f ae9d 	bls.w	8006eca <_strtod_l+0x56a>
 8007190:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <_strtod_l+0x85c>)
 8007192:	4650      	mov	r0, sl
 8007194:	4659      	mov	r1, fp
 8007196:	2200      	movs	r2, #0
 8007198:	f7f9 fa2e 	bl	80005f8 <__aeabi_dmul>
 800719c:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <_strtod_l+0x860>)
 800719e:	400b      	ands	r3, r1
 80071a0:	4682      	mov	sl, r0
 80071a2:	468b      	mov	fp, r1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f ae05 	bne.w	8006db4 <_strtod_l+0x454>
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	2322      	movs	r3, #34	@ 0x22
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e600      	b.n	8006db4 <_strtod_l+0x454>
 80071b2:	bf00      	nop
 80071b4:	08008a60 	.word	0x08008a60
 80071b8:	fffffc02 	.word	0xfffffc02
 80071bc:	39500000 	.word	0x39500000
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80071c8:	d165      	bne.n	8007296 <_strtod_l+0x936>
 80071ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80071cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071d0:	b35a      	cbz	r2, 800722a <_strtod_l+0x8ca>
 80071d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007450 <_strtod_l+0xaf0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d12b      	bne.n	8007230 <_strtod_l+0x8d0>
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	4651      	mov	r1, sl
 80071dc:	b303      	cbz	r3, 8007220 <_strtod_l+0x8c0>
 80071de:	4b9d      	ldr	r3, [pc, #628]	@ (8007454 <_strtod_l+0xaf4>)
 80071e0:	465a      	mov	r2, fp
 80071e2:	4013      	ands	r3, r2
 80071e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	d81b      	bhi.n	8007226 <_strtod_l+0x8c6>
 80071ee:	0d1b      	lsrs	r3, r3, #20
 80071f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	4299      	cmp	r1, r3
 80071fa:	d119      	bne.n	8007230 <_strtod_l+0x8d0>
 80071fc:	4b96      	ldr	r3, [pc, #600]	@ (8007458 <_strtod_l+0xaf8>)
 80071fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007200:	429a      	cmp	r2, r3
 8007202:	d102      	bne.n	800720a <_strtod_l+0x8aa>
 8007204:	3101      	adds	r1, #1
 8007206:	f43f adca 	beq.w	8006d9e <_strtod_l+0x43e>
 800720a:	4b92      	ldr	r3, [pc, #584]	@ (8007454 <_strtod_l+0xaf4>)
 800720c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800720e:	401a      	ands	r2, r3
 8007210:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007214:	f04f 0a00 	mov.w	sl, #0
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1b8      	bne.n	8007190 <_strtod_l+0x830>
 800721e:	e5c9      	b.n	8006db4 <_strtod_l+0x454>
 8007220:	f04f 33ff 	mov.w	r3, #4294967295
 8007224:	e7e8      	b.n	80071f8 <_strtod_l+0x898>
 8007226:	4613      	mov	r3, r2
 8007228:	e7e6      	b.n	80071f8 <_strtod_l+0x898>
 800722a:	ea53 030a 	orrs.w	r3, r3, sl
 800722e:	d0a1      	beq.n	8007174 <_strtod_l+0x814>
 8007230:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007232:	b1db      	cbz	r3, 800726c <_strtod_l+0x90c>
 8007234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007236:	4213      	tst	r3, r2
 8007238:	d0ee      	beq.n	8007218 <_strtod_l+0x8b8>
 800723a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800723c:	9a08      	ldr	r2, [sp, #32]
 800723e:	4650      	mov	r0, sl
 8007240:	4659      	mov	r1, fp
 8007242:	b1bb      	cbz	r3, 8007274 <_strtod_l+0x914>
 8007244:	f7ff fb6e 	bl	8006924 <sulp>
 8007248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800724c:	ec53 2b10 	vmov	r2, r3, d0
 8007250:	f7f9 f81c 	bl	800028c <__adddf3>
 8007254:	4682      	mov	sl, r0
 8007256:	468b      	mov	fp, r1
 8007258:	e7de      	b.n	8007218 <_strtod_l+0x8b8>
 800725a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800725e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007262:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007266:	f04f 3aff 	mov.w	sl, #4294967295
 800726a:	e7d5      	b.n	8007218 <_strtod_l+0x8b8>
 800726c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800726e:	ea13 0f0a 	tst.w	r3, sl
 8007272:	e7e1      	b.n	8007238 <_strtod_l+0x8d8>
 8007274:	f7ff fb56 	bl	8006924 <sulp>
 8007278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800727c:	ec53 2b10 	vmov	r2, r3, d0
 8007280:	f7f9 f802 	bl	8000288 <__aeabi_dsub>
 8007284:	2200      	movs	r2, #0
 8007286:	2300      	movs	r3, #0
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	f7f9 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007290:	2800      	cmp	r0, #0
 8007292:	d0c1      	beq.n	8007218 <_strtod_l+0x8b8>
 8007294:	e619      	b.n	8006eca <_strtod_l+0x56a>
 8007296:	4641      	mov	r1, r8
 8007298:	4620      	mov	r0, r4
 800729a:	f7ff facd 	bl	8006838 <__ratio>
 800729e:	ec57 6b10 	vmov	r6, r7, d0
 80072a2:	2200      	movs	r2, #0
 80072a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc20 	bl	8000af0 <__aeabi_dcmple>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d06f      	beq.n	8007394 <_strtod_l+0xa34>
 80072b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d17a      	bne.n	80073b0 <_strtod_l+0xa50>
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	d158      	bne.n	8007372 <_strtod_l+0xa12>
 80072c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d15a      	bne.n	8007380 <_strtod_l+0xa20>
 80072ca:	4b64      	ldr	r3, [pc, #400]	@ (800745c <_strtod_l+0xafc>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 fc03 	bl	8000adc <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d159      	bne.n	800738e <_strtod_l+0xa2e>
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	4b60      	ldr	r3, [pc, #384]	@ (8007460 <_strtod_l+0xb00>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	f7f9 f989 	bl	80005f8 <__aeabi_dmul>
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80072ee:	9606      	str	r6, [sp, #24]
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072f6:	4d57      	ldr	r5, [pc, #348]	@ (8007454 <_strtod_l+0xaf4>)
 80072f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fe:	401d      	ands	r5, r3
 8007300:	4b58      	ldr	r3, [pc, #352]	@ (8007464 <_strtod_l+0xb04>)
 8007302:	429d      	cmp	r5, r3
 8007304:	f040 80b2 	bne.w	800746c <_strtod_l+0xb0c>
 8007308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800730a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800730e:	ec4b ab10 	vmov	d0, sl, fp
 8007312:	f7ff f9c9 	bl	80066a8 <__ulp>
 8007316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800731a:	ec51 0b10 	vmov	r0, r1, d0
 800731e:	f7f9 f96b 	bl	80005f8 <__aeabi_dmul>
 8007322:	4652      	mov	r2, sl
 8007324:	465b      	mov	r3, fp
 8007326:	f7f8 ffb1 	bl	800028c <__adddf3>
 800732a:	460b      	mov	r3, r1
 800732c:	4949      	ldr	r1, [pc, #292]	@ (8007454 <_strtod_l+0xaf4>)
 800732e:	4a4e      	ldr	r2, [pc, #312]	@ (8007468 <_strtod_l+0xb08>)
 8007330:	4019      	ands	r1, r3
 8007332:	4291      	cmp	r1, r2
 8007334:	4682      	mov	sl, r0
 8007336:	d942      	bls.n	80073be <_strtod_l+0xa5e>
 8007338:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800733a:	4b47      	ldr	r3, [pc, #284]	@ (8007458 <_strtod_l+0xaf8>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d103      	bne.n	8007348 <_strtod_l+0x9e8>
 8007340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007342:	3301      	adds	r3, #1
 8007344:	f43f ad2b 	beq.w	8006d9e <_strtod_l+0x43e>
 8007348:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007458 <_strtod_l+0xaf8>
 800734c:	f04f 3aff 	mov.w	sl, #4294967295
 8007350:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007352:	9805      	ldr	r0, [sp, #20]
 8007354:	f7fe fe74 	bl	8006040 <_Bfree>
 8007358:	9805      	ldr	r0, [sp, #20]
 800735a:	4649      	mov	r1, r9
 800735c:	f7fe fe70 	bl	8006040 <_Bfree>
 8007360:	9805      	ldr	r0, [sp, #20]
 8007362:	4641      	mov	r1, r8
 8007364:	f7fe fe6c 	bl	8006040 <_Bfree>
 8007368:	9805      	ldr	r0, [sp, #20]
 800736a:	4621      	mov	r1, r4
 800736c:	f7fe fe68 	bl	8006040 <_Bfree>
 8007370:	e618      	b.n	8006fa4 <_strtod_l+0x644>
 8007372:	f1ba 0f01 	cmp.w	sl, #1
 8007376:	d103      	bne.n	8007380 <_strtod_l+0xa20>
 8007378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737a:	2b00      	cmp	r3, #0
 800737c:	f43f ada5 	beq.w	8006eca <_strtod_l+0x56a>
 8007380:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007430 <_strtod_l+0xad0>
 8007384:	4f35      	ldr	r7, [pc, #212]	@ (800745c <_strtod_l+0xafc>)
 8007386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800738a:	2600      	movs	r6, #0
 800738c:	e7b1      	b.n	80072f2 <_strtod_l+0x992>
 800738e:	4f34      	ldr	r7, [pc, #208]	@ (8007460 <_strtod_l+0xb00>)
 8007390:	2600      	movs	r6, #0
 8007392:	e7aa      	b.n	80072ea <_strtod_l+0x98a>
 8007394:	4b32      	ldr	r3, [pc, #200]	@ (8007460 <_strtod_l+0xb00>)
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	2200      	movs	r2, #0
 800739c:	f7f9 f92c 	bl	80005f8 <__aeabi_dmul>
 80073a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073a2:	4606      	mov	r6, r0
 80073a4:	460f      	mov	r7, r1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d09f      	beq.n	80072ea <_strtod_l+0x98a>
 80073aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80073ae:	e7a0      	b.n	80072f2 <_strtod_l+0x992>
 80073b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007438 <_strtod_l+0xad8>
 80073b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80073b8:	ec57 6b17 	vmov	r6, r7, d7
 80073bc:	e799      	b.n	80072f2 <_strtod_l+0x992>
 80073be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1c1      	bne.n	8007350 <_strtod_l+0x9f0>
 80073cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073d0:	0d1b      	lsrs	r3, r3, #20
 80073d2:	051b      	lsls	r3, r3, #20
 80073d4:	429d      	cmp	r5, r3
 80073d6:	d1bb      	bne.n	8007350 <_strtod_l+0x9f0>
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fc6c 	bl	8000cb8 <__aeabi_d2lz>
 80073e0:	f7f9 f8dc 	bl	800059c <__aeabi_l2d>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f8 ff4c 	bl	8000288 <__aeabi_dsub>
 80073f0:	460b      	mov	r3, r1
 80073f2:	4602      	mov	r2, r0
 80073f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80073fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073fe:	ea46 060a 	orr.w	r6, r6, sl
 8007402:	431e      	orrs	r6, r3
 8007404:	d06f      	beq.n	80074e6 <_strtod_l+0xb86>
 8007406:	a30e      	add	r3, pc, #56	@ (adr r3, 8007440 <_strtod_l+0xae0>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f9 fb66 	bl	8000adc <__aeabi_dcmplt>
 8007410:	2800      	cmp	r0, #0
 8007412:	f47f accf 	bne.w	8006db4 <_strtod_l+0x454>
 8007416:	a30c      	add	r3, pc, #48	@ (adr r3, 8007448 <_strtod_l+0xae8>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007420:	f7f9 fb7a 	bl	8000b18 <__aeabi_dcmpgt>
 8007424:	2800      	cmp	r0, #0
 8007426:	d093      	beq.n	8007350 <_strtod_l+0x9f0>
 8007428:	e4c4      	b.n	8006db4 <_strtod_l+0x454>
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w
 8007430:	00000000 	.word	0x00000000
 8007434:	bff00000 	.word	0xbff00000
 8007438:	00000000 	.word	0x00000000
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fdfffff 	.word	0x3fdfffff
 8007448:	35afe535 	.word	0x35afe535
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	000fffff 	.word	0x000fffff
 8007454:	7ff00000 	.word	0x7ff00000
 8007458:	7fefffff 	.word	0x7fefffff
 800745c:	3ff00000 	.word	0x3ff00000
 8007460:	3fe00000 	.word	0x3fe00000
 8007464:	7fe00000 	.word	0x7fe00000
 8007468:	7c9fffff 	.word	0x7c9fffff
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	b323      	cbz	r3, 80074ba <_strtod_l+0xb5a>
 8007470:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007474:	d821      	bhi.n	80074ba <_strtod_l+0xb5a>
 8007476:	a328      	add	r3, pc, #160	@ (adr r3, 8007518 <_strtod_l+0xbb8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 fb36 	bl	8000af0 <__aeabi_dcmple>
 8007484:	b1a0      	cbz	r0, 80074b0 <_strtod_l+0xb50>
 8007486:	4639      	mov	r1, r7
 8007488:	4630      	mov	r0, r6
 800748a:	f7f9 fb8d 	bl	8000ba8 <__aeabi_d2uiz>
 800748e:	2801      	cmp	r0, #1
 8007490:	bf38      	it	cc
 8007492:	2001      	movcc	r0, #1
 8007494:	f7f9 f836 	bl	8000504 <__aeabi_ui2d>
 8007498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749a:	4606      	mov	r6, r0
 800749c:	460f      	mov	r7, r1
 800749e:	b9fb      	cbnz	r3, 80074e0 <_strtod_l+0xb80>
 80074a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80074a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80074a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80074ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80074b6:	1b5b      	subs	r3, r3, r5
 80074b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80074ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80074be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80074c2:	f7ff f8f1 	bl	80066a8 <__ulp>
 80074c6:	4650      	mov	r0, sl
 80074c8:	ec53 2b10 	vmov	r2, r3, d0
 80074cc:	4659      	mov	r1, fp
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80074d6:	f7f8 fed9 	bl	800028c <__adddf3>
 80074da:	4682      	mov	sl, r0
 80074dc:	468b      	mov	fp, r1
 80074de:	e770      	b.n	80073c2 <_strtod_l+0xa62>
 80074e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80074e4:	e7e0      	b.n	80074a8 <_strtod_l+0xb48>
 80074e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007520 <_strtod_l+0xbc0>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f7f9 faf6 	bl	8000adc <__aeabi_dcmplt>
 80074f0:	e798      	b.n	8007424 <_strtod_l+0xac4>
 80074f2:	2300      	movs	r3, #0
 80074f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80074f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	f7ff ba6d 	b.w	80069da <_strtod_l+0x7a>
 8007500:	2a65      	cmp	r2, #101	@ 0x65
 8007502:	f43f ab66 	beq.w	8006bd2 <_strtod_l+0x272>
 8007506:	2a45      	cmp	r2, #69	@ 0x45
 8007508:	f43f ab63 	beq.w	8006bd2 <_strtod_l+0x272>
 800750c:	2301      	movs	r3, #1
 800750e:	f7ff bb9e 	b.w	8006c4e <_strtod_l+0x2ee>
 8007512:	bf00      	nop
 8007514:	f3af 8000 	nop.w
 8007518:	ffc00000 	.word	0xffc00000
 800751c:	41dfffff 	.word	0x41dfffff
 8007520:	94a03595 	.word	0x94a03595
 8007524:	3fcfffff 	.word	0x3fcfffff

08007528 <_strtod_r>:
 8007528:	4b01      	ldr	r3, [pc, #4]	@ (8007530 <_strtod_r+0x8>)
 800752a:	f7ff ba19 	b.w	8006960 <_strtod_l>
 800752e:	bf00      	nop
 8007530:	2000006c 	.word	0x2000006c

08007534 <_strtol_l.constprop.0>:
 8007534:	2b24      	cmp	r3, #36	@ 0x24
 8007536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753a:	4686      	mov	lr, r0
 800753c:	4690      	mov	r8, r2
 800753e:	d801      	bhi.n	8007544 <_strtol_l.constprop.0+0x10>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d106      	bne.n	8007552 <_strtol_l.constprop.0+0x1e>
 8007544:	f7fd fdba 	bl	80050bc <__errno>
 8007548:	2316      	movs	r3, #22
 800754a:	6003      	str	r3, [r0, #0]
 800754c:	2000      	movs	r0, #0
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	4834      	ldr	r0, [pc, #208]	@ (8007624 <_strtol_l.constprop.0+0xf0>)
 8007554:	460d      	mov	r5, r1
 8007556:	462a      	mov	r2, r5
 8007558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755c:	5d06      	ldrb	r6, [r0, r4]
 800755e:	f016 0608 	ands.w	r6, r6, #8
 8007562:	d1f8      	bne.n	8007556 <_strtol_l.constprop.0+0x22>
 8007564:	2c2d      	cmp	r4, #45	@ 0x2d
 8007566:	d12d      	bne.n	80075c4 <_strtol_l.constprop.0+0x90>
 8007568:	782c      	ldrb	r4, [r5, #0]
 800756a:	2601      	movs	r6, #1
 800756c:	1c95      	adds	r5, r2, #2
 800756e:	f033 0210 	bics.w	r2, r3, #16
 8007572:	d109      	bne.n	8007588 <_strtol_l.constprop.0+0x54>
 8007574:	2c30      	cmp	r4, #48	@ 0x30
 8007576:	d12a      	bne.n	80075ce <_strtol_l.constprop.0+0x9a>
 8007578:	782a      	ldrb	r2, [r5, #0]
 800757a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800757e:	2a58      	cmp	r2, #88	@ 0x58
 8007580:	d125      	bne.n	80075ce <_strtol_l.constprop.0+0x9a>
 8007582:	786c      	ldrb	r4, [r5, #1]
 8007584:	2310      	movs	r3, #16
 8007586:	3502      	adds	r5, #2
 8007588:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800758c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007590:	2200      	movs	r2, #0
 8007592:	fbbc f9f3 	udiv	r9, ip, r3
 8007596:	4610      	mov	r0, r2
 8007598:	fb03 ca19 	mls	sl, r3, r9, ip
 800759c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80075a0:	2f09      	cmp	r7, #9
 80075a2:	d81b      	bhi.n	80075dc <_strtol_l.constprop.0+0xa8>
 80075a4:	463c      	mov	r4, r7
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	dd27      	ble.n	80075fa <_strtol_l.constprop.0+0xc6>
 80075aa:	1c57      	adds	r7, r2, #1
 80075ac:	d007      	beq.n	80075be <_strtol_l.constprop.0+0x8a>
 80075ae:	4581      	cmp	r9, r0
 80075b0:	d320      	bcc.n	80075f4 <_strtol_l.constprop.0+0xc0>
 80075b2:	d101      	bne.n	80075b8 <_strtol_l.constprop.0+0x84>
 80075b4:	45a2      	cmp	sl, r4
 80075b6:	db1d      	blt.n	80075f4 <_strtol_l.constprop.0+0xc0>
 80075b8:	fb00 4003 	mla	r0, r0, r3, r4
 80075bc:	2201      	movs	r2, #1
 80075be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c2:	e7eb      	b.n	800759c <_strtol_l.constprop.0+0x68>
 80075c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80075c6:	bf04      	itt	eq
 80075c8:	782c      	ldrbeq	r4, [r5, #0]
 80075ca:	1c95      	addeq	r5, r2, #2
 80075cc:	e7cf      	b.n	800756e <_strtol_l.constprop.0+0x3a>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1da      	bne.n	8007588 <_strtol_l.constprop.0+0x54>
 80075d2:	2c30      	cmp	r4, #48	@ 0x30
 80075d4:	bf0c      	ite	eq
 80075d6:	2308      	moveq	r3, #8
 80075d8:	230a      	movne	r3, #10
 80075da:	e7d5      	b.n	8007588 <_strtol_l.constprop.0+0x54>
 80075dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80075e0:	2f19      	cmp	r7, #25
 80075e2:	d801      	bhi.n	80075e8 <_strtol_l.constprop.0+0xb4>
 80075e4:	3c37      	subs	r4, #55	@ 0x37
 80075e6:	e7de      	b.n	80075a6 <_strtol_l.constprop.0+0x72>
 80075e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80075ec:	2f19      	cmp	r7, #25
 80075ee:	d804      	bhi.n	80075fa <_strtol_l.constprop.0+0xc6>
 80075f0:	3c57      	subs	r4, #87	@ 0x57
 80075f2:	e7d8      	b.n	80075a6 <_strtol_l.constprop.0+0x72>
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	e7e1      	b.n	80075be <_strtol_l.constprop.0+0x8a>
 80075fa:	1c53      	adds	r3, r2, #1
 80075fc:	d108      	bne.n	8007610 <_strtol_l.constprop.0+0xdc>
 80075fe:	2322      	movs	r3, #34	@ 0x22
 8007600:	f8ce 3000 	str.w	r3, [lr]
 8007604:	4660      	mov	r0, ip
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d0a0      	beq.n	800754e <_strtol_l.constprop.0+0x1a>
 800760c:	1e69      	subs	r1, r5, #1
 800760e:	e006      	b.n	800761e <_strtol_l.constprop.0+0xea>
 8007610:	b106      	cbz	r6, 8007614 <_strtol_l.constprop.0+0xe0>
 8007612:	4240      	negs	r0, r0
 8007614:	f1b8 0f00 	cmp.w	r8, #0
 8007618:	d099      	beq.n	800754e <_strtol_l.constprop.0+0x1a>
 800761a:	2a00      	cmp	r2, #0
 800761c:	d1f6      	bne.n	800760c <_strtol_l.constprop.0+0xd8>
 800761e:	f8c8 1000 	str.w	r1, [r8]
 8007622:	e794      	b.n	800754e <_strtol_l.constprop.0+0x1a>
 8007624:	08008a89 	.word	0x08008a89

08007628 <_strtol_r>:
 8007628:	f7ff bf84 	b.w	8007534 <_strtol_l.constprop.0>

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	461f      	mov	r7, r3
 8007634:	42be      	cmp	r6, r7
 8007636:	680b      	ldr	r3, [r1, #0]
 8007638:	4682      	mov	sl, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4690      	mov	r8, r2
 800763e:	d82d      	bhi.n	800769c <__ssputs_r+0x70>
 8007640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007648:	d026      	beq.n	8007698 <__ssputs_r+0x6c>
 800764a:	6965      	ldr	r5, [r4, #20]
 800764c:	6909      	ldr	r1, [r1, #16]
 800764e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007652:	eba3 0901 	sub.w	r9, r3, r1
 8007656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800765a:	1c7b      	adds	r3, r7, #1
 800765c:	444b      	add	r3, r9
 800765e:	106d      	asrs	r5, r5, #1
 8007660:	429d      	cmp	r5, r3
 8007662:	bf38      	it	cc
 8007664:	461d      	movcc	r5, r3
 8007666:	0553      	lsls	r3, r2, #21
 8007668:	d527      	bpl.n	80076ba <__ssputs_r+0x8e>
 800766a:	4629      	mov	r1, r5
 800766c:	f7fe fc1c 	bl	8005ea8 <_malloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	b360      	cbz	r0, 80076ce <__ssputs_r+0xa2>
 8007674:	6921      	ldr	r1, [r4, #16]
 8007676:	464a      	mov	r2, r9
 8007678:	f000 fa18 	bl	8007aac <memcpy>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	6126      	str	r6, [r4, #16]
 800768a:	6165      	str	r5, [r4, #20]
 800768c:	444e      	add	r6, r9
 800768e:	eba5 0509 	sub.w	r5, r5, r9
 8007692:	6026      	str	r6, [r4, #0]
 8007694:	60a5      	str	r5, [r4, #8]
 8007696:	463e      	mov	r6, r7
 8007698:	42be      	cmp	r6, r7
 800769a:	d900      	bls.n	800769e <__ssputs_r+0x72>
 800769c:	463e      	mov	r6, r7
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	4632      	mov	r2, r6
 80076a2:	4641      	mov	r1, r8
 80076a4:	f000 f9c6 	bl	8007a34 <memmove>
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	1b9b      	subs	r3, r3, r6
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	4433      	add	r3, r6
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	2000      	movs	r0, #0
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	462a      	mov	r2, r5
 80076bc:	f000 fd89 	bl	80081d2 <_realloc_r>
 80076c0:	4606      	mov	r6, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1e0      	bne.n	8007688 <__ssputs_r+0x5c>
 80076c6:	6921      	ldr	r1, [r4, #16]
 80076c8:	4650      	mov	r0, sl
 80076ca:	f7fe fb79 	bl	8005dc0 <_free_r>
 80076ce:	230c      	movs	r3, #12
 80076d0:	f8ca 3000 	str.w	r3, [sl]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	e7e9      	b.n	80076b6 <__ssputs_r+0x8a>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	b09d      	sub	sp, #116	@ 0x74
 80076f0:	4607      	mov	r7, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	d510      	bpl.n	800771a <_svfiprintf_r+0x36>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b973      	cbnz	r3, 800771a <_svfiprintf_r+0x36>
 80076fc:	2140      	movs	r1, #64	@ 0x40
 80076fe:	f7fe fbd3 	bl	8005ea8 <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b930      	cbnz	r0, 8007716 <_svfiprintf_r+0x32>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	@ 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	2340      	movs	r3, #64	@ 0x40
 8007718:	616b      	str	r3, [r5, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	9309      	str	r3, [sp, #36]	@ 0x24
 800771e:	2320      	movs	r3, #32
 8007720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007724:	f8cd 800c 	str.w	r8, [sp, #12]
 8007728:	2330      	movs	r3, #48	@ 0x30
 800772a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078c8 <_svfiprintf_r+0x1e4>
 800772e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007732:	f04f 0901 	mov.w	r9, #1
 8007736:	4623      	mov	r3, r4
 8007738:	469a      	mov	sl, r3
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	b10a      	cbz	r2, 8007744 <_svfiprintf_r+0x60>
 8007740:	2a25      	cmp	r2, #37	@ 0x25
 8007742:	d1f9      	bne.n	8007738 <_svfiprintf_r+0x54>
 8007744:	ebba 0b04 	subs.w	fp, sl, r4
 8007748:	d00b      	beq.n	8007762 <_svfiprintf_r+0x7e>
 800774a:	465b      	mov	r3, fp
 800774c:	4622      	mov	r2, r4
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff6b 	bl	800762c <__ssputs_r>
 8007756:	3001      	adds	r0, #1
 8007758:	f000 80a7 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800775c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775e:	445a      	add	r2, fp
 8007760:	9209      	str	r2, [sp, #36]	@ 0x24
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 809f 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800776c:	2300      	movs	r3, #0
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007776:	f10a 0a01 	add.w	sl, sl, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007782:	931a      	str	r3, [sp, #104]	@ 0x68
 8007784:	4654      	mov	r4, sl
 8007786:	2205      	movs	r2, #5
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	484e      	ldr	r0, [pc, #312]	@ (80078c8 <_svfiprintf_r+0x1e4>)
 800778e:	f7f8 fd1f 	bl	80001d0 <memchr>
 8007792:	9a04      	ldr	r2, [sp, #16]
 8007794:	b9d8      	cbnz	r0, 80077ce <_svfiprintf_r+0xea>
 8007796:	06d0      	lsls	r0, r2, #27
 8007798:	bf44      	itt	mi
 800779a:	2320      	movmi	r3, #32
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a0:	0711      	lsls	r1, r2, #28
 80077a2:	bf44      	itt	mi
 80077a4:	232b      	movmi	r3, #43	@ 0x2b
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xfa>
 80077b2:	9a07      	ldr	r2, [sp, #28]
 80077b4:	4654      	mov	r4, sl
 80077b6:	2000      	movs	r0, #0
 80077b8:	f04f 0c0a 	mov.w	ip, #10
 80077bc:	4621      	mov	r1, r4
 80077be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c2:	3b30      	subs	r3, #48	@ 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d94b      	bls.n	8007860 <_svfiprintf_r+0x17c>
 80077c8:	b1b0      	cbz	r0, 80077f8 <_svfiprintf_r+0x114>
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	e014      	b.n	80077f8 <_svfiprintf_r+0x114>
 80077ce:	eba0 0308 	sub.w	r3, r0, r8
 80077d2:	fa09 f303 	lsl.w	r3, r9, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	46a2      	mov	sl, r4
 80077dc:	e7d2      	b.n	8007784 <_svfiprintf_r+0xa0>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbb      	ittet	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	f042 0202 	orrlt.w	r2, r2, #2
 80077f0:	9307      	strge	r3, [sp, #28]
 80077f2:	9307      	strlt	r3, [sp, #28]
 80077f4:	bfb8      	it	lt
 80077f6:	9204      	strlt	r2, [sp, #16]
 80077f8:	7823      	ldrb	r3, [r4, #0]
 80077fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fc:	d10a      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	2b2a      	cmp	r3, #42	@ 0x2a
 8007802:	d132      	bne.n	800786a <_svfiprintf_r+0x186>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9203      	str	r2, [sp, #12]
 800780c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007810:	3402      	adds	r4, #2
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078d8 <_svfiprintf_r+0x1f4>
 8007818:	7821      	ldrb	r1, [r4, #0]
 800781a:	2203      	movs	r2, #3
 800781c:	4650      	mov	r0, sl
 800781e:	f7f8 fcd7 	bl	80001d0 <memchr>
 8007822:	b138      	cbz	r0, 8007834 <_svfiprintf_r+0x150>
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	eba0 000a 	sub.w	r0, r0, sl
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	4082      	lsls	r2, r0
 800782e:	4313      	orrs	r3, r2
 8007830:	3401      	adds	r4, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4824      	ldr	r0, [pc, #144]	@ (80078cc <_svfiprintf_r+0x1e8>)
 800783a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800783e:	2206      	movs	r2, #6
 8007840:	f7f8 fcc6 	bl	80001d0 <memchr>
 8007844:	2800      	cmp	r0, #0
 8007846:	d036      	beq.n	80078b6 <_svfiprintf_r+0x1d2>
 8007848:	4b21      	ldr	r3, [pc, #132]	@ (80078d0 <_svfiprintf_r+0x1ec>)
 800784a:	bb1b      	cbnz	r3, 8007894 <_svfiprintf_r+0x1b0>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	4433      	add	r3, r6
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	e76a      	b.n	8007736 <_svfiprintf_r+0x52>
 8007860:	fb0c 3202 	mla	r2, ip, r2, r3
 8007864:	460c      	mov	r4, r1
 8007866:	2001      	movs	r0, #1
 8007868:	e7a8      	b.n	80077bc <_svfiprintf_r+0xd8>
 800786a:	2300      	movs	r3, #0
 800786c:	3401      	adds	r4, #1
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	4619      	mov	r1, r3
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4620      	mov	r0, r4
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	@ 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_svfiprintf_r+0x1a6>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c6      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c4      	b.n	8007814 <_svfiprintf_r+0x130>
 800788a:	fb0c 2101 	mla	r1, ip, r1, r2
 800788e:	4604      	mov	r4, r0
 8007890:	2301      	movs	r3, #1
 8007892:	e7f0      	b.n	8007876 <_svfiprintf_r+0x192>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	462a      	mov	r2, r5
 800789a:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 800789c:	a904      	add	r1, sp, #16
 800789e:	4638      	mov	r0, r7
 80078a0:	f7fc fcc8 	bl	8004234 <_printf_float>
 80078a4:	1c42      	adds	r2, r0, #1
 80078a6:	4606      	mov	r6, r0
 80078a8:	d1d6      	bne.n	8007858 <_svfiprintf_r+0x174>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	065b      	lsls	r3, r3, #25
 80078ae:	f53f af2d 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b4:	e72c      	b.n	8007710 <_svfiprintf_r+0x2c>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7fc ff4f 	bl	8004764 <_printf_i>
 80078c6:	e7ed      	b.n	80078a4 <_svfiprintf_r+0x1c0>
 80078c8:	08008b89 	.word	0x08008b89
 80078cc:	08008b93 	.word	0x08008b93
 80078d0:	08004235 	.word	0x08004235
 80078d4:	0800762d 	.word	0x0800762d
 80078d8:	08008b8f 	.word	0x08008b8f

080078dc <__sflush_r>:
 80078dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	0716      	lsls	r6, r2, #28
 80078e6:	4605      	mov	r5, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	d454      	bmi.n	8007996 <__sflush_r+0xba>
 80078ec:	684b      	ldr	r3, [r1, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc02      	bgt.n	80078f8 <__sflush_r+0x1c>
 80078f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dd48      	ble.n	800798a <__sflush_r+0xae>
 80078f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	d045      	beq.n	800798a <__sflush_r+0xae>
 80078fe:	2300      	movs	r3, #0
 8007900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007904:	682f      	ldr	r7, [r5, #0]
 8007906:	6a21      	ldr	r1, [r4, #32]
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	d030      	beq.n	800796e <__sflush_r+0x92>
 800790c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	0759      	lsls	r1, r3, #29
 8007912:	d505      	bpl.n	8007920 <__sflush_r+0x44>
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800791a:	b10b      	cbz	r3, 8007920 <__sflush_r+0x44>
 800791c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007924:	6a21      	ldr	r1, [r4, #32]
 8007926:	4628      	mov	r0, r5
 8007928:	47b0      	blx	r6
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	d106      	bne.n	800793e <__sflush_r+0x62>
 8007930:	6829      	ldr	r1, [r5, #0]
 8007932:	291d      	cmp	r1, #29
 8007934:	d82b      	bhi.n	800798e <__sflush_r+0xb2>
 8007936:	4a2a      	ldr	r2, [pc, #168]	@ (80079e0 <__sflush_r+0x104>)
 8007938:	410a      	asrs	r2, r1
 800793a:	07d6      	lsls	r6, r2, #31
 800793c:	d427      	bmi.n	800798e <__sflush_r+0xb2>
 800793e:	2200      	movs	r2, #0
 8007940:	6062      	str	r2, [r4, #4]
 8007942:	04d9      	lsls	r1, r3, #19
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	d504      	bpl.n	8007954 <__sflush_r+0x78>
 800794a:	1c42      	adds	r2, r0, #1
 800794c:	d101      	bne.n	8007952 <__sflush_r+0x76>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b903      	cbnz	r3, 8007954 <__sflush_r+0x78>
 8007952:	6560      	str	r0, [r4, #84]	@ 0x54
 8007954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007956:	602f      	str	r7, [r5, #0]
 8007958:	b1b9      	cbz	r1, 800798a <__sflush_r+0xae>
 800795a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800795e:	4299      	cmp	r1, r3
 8007960:	d002      	beq.n	8007968 <__sflush_r+0x8c>
 8007962:	4628      	mov	r0, r5
 8007964:	f7fe fa2c 	bl	8005dc0 <_free_r>
 8007968:	2300      	movs	r3, #0
 800796a:	6363      	str	r3, [r4, #52]	@ 0x34
 800796c:	e00d      	b.n	800798a <__sflush_r+0xae>
 800796e:	2301      	movs	r3, #1
 8007970:	4628      	mov	r0, r5
 8007972:	47b0      	blx	r6
 8007974:	4602      	mov	r2, r0
 8007976:	1c50      	adds	r0, r2, #1
 8007978:	d1c9      	bne.n	800790e <__sflush_r+0x32>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0c6      	beq.n	800790e <__sflush_r+0x32>
 8007980:	2b1d      	cmp	r3, #29
 8007982:	d001      	beq.n	8007988 <__sflush_r+0xac>
 8007984:	2b16      	cmp	r3, #22
 8007986:	d11e      	bne.n	80079c6 <__sflush_r+0xea>
 8007988:	602f      	str	r7, [r5, #0]
 800798a:	2000      	movs	r0, #0
 800798c:	e022      	b.n	80079d4 <__sflush_r+0xf8>
 800798e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007992:	b21b      	sxth	r3, r3
 8007994:	e01b      	b.n	80079ce <__sflush_r+0xf2>
 8007996:	690f      	ldr	r7, [r1, #16]
 8007998:	2f00      	cmp	r7, #0
 800799a:	d0f6      	beq.n	800798a <__sflush_r+0xae>
 800799c:	0793      	lsls	r3, r2, #30
 800799e:	680e      	ldr	r6, [r1, #0]
 80079a0:	bf08      	it	eq
 80079a2:	694b      	ldreq	r3, [r1, #20]
 80079a4:	600f      	str	r7, [r1, #0]
 80079a6:	bf18      	it	ne
 80079a8:	2300      	movne	r3, #0
 80079aa:	eba6 0807 	sub.w	r8, r6, r7
 80079ae:	608b      	str	r3, [r1, #8]
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	dde9      	ble.n	800798a <__sflush_r+0xae>
 80079b6:	6a21      	ldr	r1, [r4, #32]
 80079b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ba:	4643      	mov	r3, r8
 80079bc:	463a      	mov	r2, r7
 80079be:	4628      	mov	r0, r5
 80079c0:	47b0      	blx	r6
 80079c2:	2800      	cmp	r0, #0
 80079c4:	dc08      	bgt.n	80079d8 <__sflush_r+0xfc>
 80079c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	4407      	add	r7, r0
 80079da:	eba8 0800 	sub.w	r8, r8, r0
 80079de:	e7e7      	b.n	80079b0 <__sflush_r+0xd4>
 80079e0:	dfbffffe 	.word	0xdfbffffe

080079e4 <_fflush_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b913      	cbnz	r3, 80079f4 <_fflush_r+0x10>
 80079ee:	2500      	movs	r5, #0
 80079f0:	4628      	mov	r0, r5
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	b118      	cbz	r0, 80079fe <_fflush_r+0x1a>
 80079f6:	6a03      	ldr	r3, [r0, #32]
 80079f8:	b90b      	cbnz	r3, 80079fe <_fflush_r+0x1a>
 80079fa:	f7fd fa73 	bl	8004ee4 <__sinit>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f3      	beq.n	80079ee <_fflush_r+0xa>
 8007a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a08:	07d0      	lsls	r0, r2, #31
 8007a0a:	d404      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a0c:	0599      	lsls	r1, r3, #22
 8007a0e:	d402      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a12:	f7fd fb7e 	bl	8005112 <__retarget_lock_acquire_recursive>
 8007a16:	4628      	mov	r0, r5
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7ff ff5f 	bl	80078dc <__sflush_r>
 8007a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a20:	07da      	lsls	r2, r3, #31
 8007a22:	4605      	mov	r5, r0
 8007a24:	d4e4      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d4e1      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a2e:	f7fd fb71 	bl	8005114 <__retarget_lock_release_recursive>
 8007a32:	e7dd      	b.n	80079f0 <_fflush_r+0xc>

08007a34 <memmove>:
 8007a34:	4288      	cmp	r0, r1
 8007a36:	b510      	push	{r4, lr}
 8007a38:	eb01 0402 	add.w	r4, r1, r2
 8007a3c:	d902      	bls.n	8007a44 <memmove+0x10>
 8007a3e:	4284      	cmp	r4, r0
 8007a40:	4623      	mov	r3, r4
 8007a42:	d807      	bhi.n	8007a54 <memmove+0x20>
 8007a44:	1e43      	subs	r3, r0, #1
 8007a46:	42a1      	cmp	r1, r4
 8007a48:	d008      	beq.n	8007a5c <memmove+0x28>
 8007a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a52:	e7f8      	b.n	8007a46 <memmove+0x12>
 8007a54:	4402      	add	r2, r0
 8007a56:	4601      	mov	r1, r0
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	d100      	bne.n	8007a5e <memmove+0x2a>
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a66:	e7f7      	b.n	8007a58 <memmove+0x24>

08007a68 <strncmp>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	b16a      	cbz	r2, 8007a88 <strncmp+0x20>
 8007a6c:	3901      	subs	r1, #1
 8007a6e:	1884      	adds	r4, r0, r2
 8007a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d103      	bne.n	8007a84 <strncmp+0x1c>
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	d001      	beq.n	8007a84 <strncmp+0x1c>
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	d1f5      	bne.n	8007a70 <strncmp+0x8>
 8007a84:	1ad0      	subs	r0, r2, r3
 8007a86:	bd10      	pop	{r4, pc}
 8007a88:	4610      	mov	r0, r2
 8007a8a:	e7fc      	b.n	8007a86 <strncmp+0x1e>

08007a8c <_sbrk_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d06      	ldr	r5, [pc, #24]	@ (8007aa8 <_sbrk_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7fa f9dc 	bl	8001e54 <_sbrk>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_sbrk_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_sbrk_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	2000040c 	.word	0x2000040c

08007aac <memcpy>:
 8007aac:	440a      	add	r2, r1
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	4770      	bx	lr
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	d1f9      	bne.n	8007aba <memcpy+0xe>
 8007ac6:	bd10      	pop	{r4, pc}

08007ac8 <nan>:
 8007ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ad0 <nan+0x8>
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	7ff80000 	.word	0x7ff80000

08007ad8 <__assert_func>:
 8007ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ada:	4614      	mov	r4, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <__assert_func+0x2c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	68d8      	ldr	r0, [r3, #12]
 8007ae6:	b954      	cbnz	r4, 8007afe <__assert_func+0x26>
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <__assert_func+0x30>)
 8007aea:	461c      	mov	r4, r3
 8007aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af0:	9100      	str	r1, [sp, #0]
 8007af2:	462b      	mov	r3, r5
 8007af4:	4905      	ldr	r1, [pc, #20]	@ (8007b0c <__assert_func+0x34>)
 8007af6:	f000 fba7 	bl	8008248 <fiprintf>
 8007afa:	f000 fbb7 	bl	800826c <abort>
 8007afe:	4b04      	ldr	r3, [pc, #16]	@ (8007b10 <__assert_func+0x38>)
 8007b00:	e7f4      	b.n	8007aec <__assert_func+0x14>
 8007b02:	bf00      	nop
 8007b04:	2000001c 	.word	0x2000001c
 8007b08:	08008bdd 	.word	0x08008bdd
 8007b0c:	08008baf 	.word	0x08008baf
 8007b10:	08008ba2 	.word	0x08008ba2

08007b14 <_calloc_r>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	fba1 5402 	umull	r5, r4, r1, r2
 8007b1a:	b93c      	cbnz	r4, 8007b2c <_calloc_r+0x18>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7fe f9c3 	bl	8005ea8 <_malloc_r>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <_calloc_r+0x1e>
 8007b26:	2600      	movs	r6, #0
 8007b28:	4630      	mov	r0, r6
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	220c      	movs	r2, #12
 8007b2e:	6002      	str	r2, [r0, #0]
 8007b30:	e7f9      	b.n	8007b26 <_calloc_r+0x12>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4621      	mov	r1, r4
 8007b36:	f7fd fa6e 	bl	8005016 <memset>
 8007b3a:	e7f5      	b.n	8007b28 <_calloc_r+0x14>

08007b3c <rshift>:
 8007b3c:	6903      	ldr	r3, [r0, #16]
 8007b3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b4a:	f100 0414 	add.w	r4, r0, #20
 8007b4e:	dd45      	ble.n	8007bdc <rshift+0xa0>
 8007b50:	f011 011f 	ands.w	r1, r1, #31
 8007b54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b5c:	d10c      	bne.n	8007b78 <rshift+0x3c>
 8007b5e:	f100 0710 	add.w	r7, r0, #16
 8007b62:	4629      	mov	r1, r5
 8007b64:	42b1      	cmp	r1, r6
 8007b66:	d334      	bcc.n	8007bd2 <rshift+0x96>
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	1eea      	subs	r2, r5, #3
 8007b6e:	4296      	cmp	r6, r2
 8007b70:	bf38      	it	cc
 8007b72:	2300      	movcc	r3, #0
 8007b74:	4423      	add	r3, r4
 8007b76:	e015      	b.n	8007ba4 <rshift+0x68>
 8007b78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b7c:	f1c1 0820 	rsb	r8, r1, #32
 8007b80:	40cf      	lsrs	r7, r1
 8007b82:	f105 0e04 	add.w	lr, r5, #4
 8007b86:	46a1      	mov	r9, r4
 8007b88:	4576      	cmp	r6, lr
 8007b8a:	46f4      	mov	ip, lr
 8007b8c:	d815      	bhi.n	8007bba <rshift+0x7e>
 8007b8e:	1a9a      	subs	r2, r3, r2
 8007b90:	0092      	lsls	r2, r2, #2
 8007b92:	3a04      	subs	r2, #4
 8007b94:	3501      	adds	r5, #1
 8007b96:	42ae      	cmp	r6, r5
 8007b98:	bf38      	it	cc
 8007b9a:	2200      	movcc	r2, #0
 8007b9c:	18a3      	adds	r3, r4, r2
 8007b9e:	50a7      	str	r7, [r4, r2]
 8007ba0:	b107      	cbz	r7, 8007ba4 <rshift+0x68>
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	1b1a      	subs	r2, r3, r4
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bac:	bf08      	it	eq
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	6102      	str	r2, [r0, #16]
 8007bb2:	bf08      	it	eq
 8007bb4:	6143      	streq	r3, [r0, #20]
 8007bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bba:	f8dc c000 	ldr.w	ip, [ip]
 8007bbe:	fa0c fc08 	lsl.w	ip, ip, r8
 8007bc2:	ea4c 0707 	orr.w	r7, ip, r7
 8007bc6:	f849 7b04 	str.w	r7, [r9], #4
 8007bca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bce:	40cf      	lsrs	r7, r1
 8007bd0:	e7da      	b.n	8007b88 <rshift+0x4c>
 8007bd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007bd6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007bda:	e7c3      	b.n	8007b64 <rshift+0x28>
 8007bdc:	4623      	mov	r3, r4
 8007bde:	e7e1      	b.n	8007ba4 <rshift+0x68>

08007be0 <__hexdig_fun>:
 8007be0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d802      	bhi.n	8007bee <__hexdig_fun+0xe>
 8007be8:	3820      	subs	r0, #32
 8007bea:	b2c0      	uxtb	r0, r0
 8007bec:	4770      	bx	lr
 8007bee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d801      	bhi.n	8007bfa <__hexdig_fun+0x1a>
 8007bf6:	3847      	subs	r0, #71	@ 0x47
 8007bf8:	e7f7      	b.n	8007bea <__hexdig_fun+0xa>
 8007bfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d801      	bhi.n	8007c06 <__hexdig_fun+0x26>
 8007c02:	3827      	subs	r0, #39	@ 0x27
 8007c04:	e7f1      	b.n	8007bea <__hexdig_fun+0xa>
 8007c06:	2000      	movs	r0, #0
 8007c08:	4770      	bx	lr
	...

08007c0c <__gethex>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	b085      	sub	sp, #20
 8007c12:	468a      	mov	sl, r1
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	680b      	ldr	r3, [r1, #0]
 8007c18:	9001      	str	r0, [sp, #4]
 8007c1a:	4690      	mov	r8, r2
 8007c1c:	1c9c      	adds	r4, r3, #2
 8007c1e:	46a1      	mov	r9, r4
 8007c20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c24:	2830      	cmp	r0, #48	@ 0x30
 8007c26:	d0fa      	beq.n	8007c1e <__gethex+0x12>
 8007c28:	eba9 0303 	sub.w	r3, r9, r3
 8007c2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007c30:	f7ff ffd6 	bl	8007be0 <__hexdig_fun>
 8007c34:	4605      	mov	r5, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d168      	bne.n	8007d0c <__gethex+0x100>
 8007c3a:	49a0      	ldr	r1, [pc, #640]	@ (8007ebc <__gethex+0x2b0>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f7ff ff12 	bl	8007a68 <strncmp>
 8007c44:	4607      	mov	r7, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d167      	bne.n	8007d1a <__gethex+0x10e>
 8007c4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007c4e:	4626      	mov	r6, r4
 8007c50:	f7ff ffc6 	bl	8007be0 <__hexdig_fun>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d062      	beq.n	8007d1e <__gethex+0x112>
 8007c58:	4623      	mov	r3, r4
 8007c5a:	7818      	ldrb	r0, [r3, #0]
 8007c5c:	2830      	cmp	r0, #48	@ 0x30
 8007c5e:	4699      	mov	r9, r3
 8007c60:	f103 0301 	add.w	r3, r3, #1
 8007c64:	d0f9      	beq.n	8007c5a <__gethex+0x4e>
 8007c66:	f7ff ffbb 	bl	8007be0 <__hexdig_fun>
 8007c6a:	fab0 f580 	clz	r5, r0
 8007c6e:	096d      	lsrs	r5, r5, #5
 8007c70:	f04f 0b01 	mov.w	fp, #1
 8007c74:	464a      	mov	r2, r9
 8007c76:	4616      	mov	r6, r2
 8007c78:	3201      	adds	r2, #1
 8007c7a:	7830      	ldrb	r0, [r6, #0]
 8007c7c:	f7ff ffb0 	bl	8007be0 <__hexdig_fun>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1f8      	bne.n	8007c76 <__gethex+0x6a>
 8007c84:	498d      	ldr	r1, [pc, #564]	@ (8007ebc <__gethex+0x2b0>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff feed 	bl	8007a68 <strncmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d13f      	bne.n	8007d12 <__gethex+0x106>
 8007c92:	b944      	cbnz	r4, 8007ca6 <__gethex+0x9a>
 8007c94:	1c74      	adds	r4, r6, #1
 8007c96:	4622      	mov	r2, r4
 8007c98:	4616      	mov	r6, r2
 8007c9a:	3201      	adds	r2, #1
 8007c9c:	7830      	ldrb	r0, [r6, #0]
 8007c9e:	f7ff ff9f 	bl	8007be0 <__hexdig_fun>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1f8      	bne.n	8007c98 <__gethex+0x8c>
 8007ca6:	1ba4      	subs	r4, r4, r6
 8007ca8:	00a7      	lsls	r7, r4, #2
 8007caa:	7833      	ldrb	r3, [r6, #0]
 8007cac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007cb0:	2b50      	cmp	r3, #80	@ 0x50
 8007cb2:	d13e      	bne.n	8007d32 <__gethex+0x126>
 8007cb4:	7873      	ldrb	r3, [r6, #1]
 8007cb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007cb8:	d033      	beq.n	8007d22 <__gethex+0x116>
 8007cba:	2b2d      	cmp	r3, #45	@ 0x2d
 8007cbc:	d034      	beq.n	8007d28 <__gethex+0x11c>
 8007cbe:	1c71      	adds	r1, r6, #1
 8007cc0:	2400      	movs	r4, #0
 8007cc2:	7808      	ldrb	r0, [r1, #0]
 8007cc4:	f7ff ff8c 	bl	8007be0 <__hexdig_fun>
 8007cc8:	1e43      	subs	r3, r0, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b18      	cmp	r3, #24
 8007cce:	d830      	bhi.n	8007d32 <__gethex+0x126>
 8007cd0:	f1a0 0210 	sub.w	r2, r0, #16
 8007cd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007cd8:	f7ff ff82 	bl	8007be0 <__hexdig_fun>
 8007cdc:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ce0:	fa5f fc8c 	uxtb.w	ip, ip
 8007ce4:	f1bc 0f18 	cmp.w	ip, #24
 8007ce8:	f04f 030a 	mov.w	r3, #10
 8007cec:	d91e      	bls.n	8007d2c <__gethex+0x120>
 8007cee:	b104      	cbz	r4, 8007cf2 <__gethex+0xe6>
 8007cf0:	4252      	negs	r2, r2
 8007cf2:	4417      	add	r7, r2
 8007cf4:	f8ca 1000 	str.w	r1, [sl]
 8007cf8:	b1ed      	cbz	r5, 8007d36 <__gethex+0x12a>
 8007cfa:	f1bb 0f00 	cmp.w	fp, #0
 8007cfe:	bf0c      	ite	eq
 8007d00:	2506      	moveq	r5, #6
 8007d02:	2500      	movne	r5, #0
 8007d04:	4628      	mov	r0, r5
 8007d06:	b005      	add	sp, #20
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	2500      	movs	r5, #0
 8007d0e:	462c      	mov	r4, r5
 8007d10:	e7b0      	b.n	8007c74 <__gethex+0x68>
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	d1c7      	bne.n	8007ca6 <__gethex+0x9a>
 8007d16:	4627      	mov	r7, r4
 8007d18:	e7c7      	b.n	8007caa <__gethex+0x9e>
 8007d1a:	464e      	mov	r6, r9
 8007d1c:	462f      	mov	r7, r5
 8007d1e:	2501      	movs	r5, #1
 8007d20:	e7c3      	b.n	8007caa <__gethex+0x9e>
 8007d22:	2400      	movs	r4, #0
 8007d24:	1cb1      	adds	r1, r6, #2
 8007d26:	e7cc      	b.n	8007cc2 <__gethex+0xb6>
 8007d28:	2401      	movs	r4, #1
 8007d2a:	e7fb      	b.n	8007d24 <__gethex+0x118>
 8007d2c:	fb03 0002 	mla	r0, r3, r2, r0
 8007d30:	e7ce      	b.n	8007cd0 <__gethex+0xc4>
 8007d32:	4631      	mov	r1, r6
 8007d34:	e7de      	b.n	8007cf4 <__gethex+0xe8>
 8007d36:	eba6 0309 	sub.w	r3, r6, r9
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	2b07      	cmp	r3, #7
 8007d40:	dc0a      	bgt.n	8007d58 <__gethex+0x14c>
 8007d42:	9801      	ldr	r0, [sp, #4]
 8007d44:	f7fe f93c 	bl	8005fc0 <_Balloc>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	b940      	cbnz	r0, 8007d5e <__gethex+0x152>
 8007d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ec0 <__gethex+0x2b4>)
 8007d4e:	4602      	mov	r2, r0
 8007d50:	21e4      	movs	r1, #228	@ 0xe4
 8007d52:	485c      	ldr	r0, [pc, #368]	@ (8007ec4 <__gethex+0x2b8>)
 8007d54:	f7ff fec0 	bl	8007ad8 <__assert_func>
 8007d58:	3101      	adds	r1, #1
 8007d5a:	105b      	asrs	r3, r3, #1
 8007d5c:	e7ef      	b.n	8007d3e <__gethex+0x132>
 8007d5e:	f100 0a14 	add.w	sl, r0, #20
 8007d62:	2300      	movs	r3, #0
 8007d64:	4655      	mov	r5, sl
 8007d66:	469b      	mov	fp, r3
 8007d68:	45b1      	cmp	r9, r6
 8007d6a:	d337      	bcc.n	8007ddc <__gethex+0x1d0>
 8007d6c:	f845 bb04 	str.w	fp, [r5], #4
 8007d70:	eba5 050a 	sub.w	r5, r5, sl
 8007d74:	10ad      	asrs	r5, r5, #2
 8007d76:	6125      	str	r5, [r4, #16]
 8007d78:	4658      	mov	r0, fp
 8007d7a:	f7fe fa13 	bl	80061a4 <__hi0bits>
 8007d7e:	016d      	lsls	r5, r5, #5
 8007d80:	f8d8 6000 	ldr.w	r6, [r8]
 8007d84:	1a2d      	subs	r5, r5, r0
 8007d86:	42b5      	cmp	r5, r6
 8007d88:	dd54      	ble.n	8007e34 <__gethex+0x228>
 8007d8a:	1bad      	subs	r5, r5, r6
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7fe fda7 	bl	80068e2 <__any_on>
 8007d94:	4681      	mov	r9, r0
 8007d96:	b178      	cbz	r0, 8007db8 <__gethex+0x1ac>
 8007d98:	1e6b      	subs	r3, r5, #1
 8007d9a:	1159      	asrs	r1, r3, #5
 8007d9c:	f003 021f 	and.w	r2, r3, #31
 8007da0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007da4:	f04f 0901 	mov.w	r9, #1
 8007da8:	fa09 f202 	lsl.w	r2, r9, r2
 8007dac:	420a      	tst	r2, r1
 8007dae:	d003      	beq.n	8007db8 <__gethex+0x1ac>
 8007db0:	454b      	cmp	r3, r9
 8007db2:	dc36      	bgt.n	8007e22 <__gethex+0x216>
 8007db4:	f04f 0902 	mov.w	r9, #2
 8007db8:	4629      	mov	r1, r5
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7ff febe 	bl	8007b3c <rshift>
 8007dc0:	442f      	add	r7, r5
 8007dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dc6:	42bb      	cmp	r3, r7
 8007dc8:	da42      	bge.n	8007e50 <__gethex+0x244>
 8007dca:	9801      	ldr	r0, [sp, #4]
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f7fe f937 	bl	8006040 <_Bfree>
 8007dd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	25a3      	movs	r5, #163	@ 0xa3
 8007dda:	e793      	b.n	8007d04 <__gethex+0xf8>
 8007ddc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007de0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007de2:	d012      	beq.n	8007e0a <__gethex+0x1fe>
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d104      	bne.n	8007df2 <__gethex+0x1e6>
 8007de8:	f845 bb04 	str.w	fp, [r5], #4
 8007dec:	f04f 0b00 	mov.w	fp, #0
 8007df0:	465b      	mov	r3, fp
 8007df2:	7830      	ldrb	r0, [r6, #0]
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	f7ff fef3 	bl	8007be0 <__hexdig_fun>
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	f000 000f 	and.w	r0, r0, #15
 8007e00:	4098      	lsls	r0, r3
 8007e02:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e06:	3304      	adds	r3, #4
 8007e08:	e7ae      	b.n	8007d68 <__gethex+0x15c>
 8007e0a:	45b1      	cmp	r9, r6
 8007e0c:	d8ea      	bhi.n	8007de4 <__gethex+0x1d8>
 8007e0e:	492b      	ldr	r1, [pc, #172]	@ (8007ebc <__gethex+0x2b0>)
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff fe27 	bl	8007a68 <strncmp>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1e1      	bne.n	8007de4 <__gethex+0x1d8>
 8007e20:	e7a2      	b.n	8007d68 <__gethex+0x15c>
 8007e22:	1ea9      	subs	r1, r5, #2
 8007e24:	4620      	mov	r0, r4
 8007e26:	f7fe fd5c 	bl	80068e2 <__any_on>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d0c2      	beq.n	8007db4 <__gethex+0x1a8>
 8007e2e:	f04f 0903 	mov.w	r9, #3
 8007e32:	e7c1      	b.n	8007db8 <__gethex+0x1ac>
 8007e34:	da09      	bge.n	8007e4a <__gethex+0x23e>
 8007e36:	1b75      	subs	r5, r6, r5
 8007e38:	4621      	mov	r1, r4
 8007e3a:	9801      	ldr	r0, [sp, #4]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	f7fe fb17 	bl	8006470 <__lshift>
 8007e42:	1b7f      	subs	r7, r7, r5
 8007e44:	4604      	mov	r4, r0
 8007e46:	f100 0a14 	add.w	sl, r0, #20
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	e7b8      	b.n	8007dc2 <__gethex+0x1b6>
 8007e50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e54:	42bd      	cmp	r5, r7
 8007e56:	dd6f      	ble.n	8007f38 <__gethex+0x32c>
 8007e58:	1bed      	subs	r5, r5, r7
 8007e5a:	42ae      	cmp	r6, r5
 8007e5c:	dc34      	bgt.n	8007ec8 <__gethex+0x2bc>
 8007e5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d022      	beq.n	8007eac <__gethex+0x2a0>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d024      	beq.n	8007eb4 <__gethex+0x2a8>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d115      	bne.n	8007e9a <__gethex+0x28e>
 8007e6e:	42ae      	cmp	r6, r5
 8007e70:	d113      	bne.n	8007e9a <__gethex+0x28e>
 8007e72:	2e01      	cmp	r6, #1
 8007e74:	d10b      	bne.n	8007e8e <__gethex+0x282>
 8007e76:	9a02      	ldr	r2, [sp, #8]
 8007e78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	f8ca 3000 	str.w	r3, [sl]
 8007e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e88:	2562      	movs	r5, #98	@ 0x62
 8007e8a:	601c      	str	r4, [r3, #0]
 8007e8c:	e73a      	b.n	8007d04 <__gethex+0xf8>
 8007e8e:	1e71      	subs	r1, r6, #1
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7fe fd26 	bl	80068e2 <__any_on>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d1ed      	bne.n	8007e76 <__gethex+0x26a>
 8007e9a:	9801      	ldr	r0, [sp, #4]
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f7fe f8cf 	bl	8006040 <_Bfree>
 8007ea2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	2550      	movs	r5, #80	@ 0x50
 8007eaa:	e72b      	b.n	8007d04 <__gethex+0xf8>
 8007eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f3      	bne.n	8007e9a <__gethex+0x28e>
 8007eb2:	e7e0      	b.n	8007e76 <__gethex+0x26a>
 8007eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1dd      	bne.n	8007e76 <__gethex+0x26a>
 8007eba:	e7ee      	b.n	8007e9a <__gethex+0x28e>
 8007ebc:	08008a30 	.word	0x08008a30
 8007ec0:	080088c9 	.word	0x080088c9
 8007ec4:	08008bde 	.word	0x08008bde
 8007ec8:	1e6f      	subs	r7, r5, #1
 8007eca:	f1b9 0f00 	cmp.w	r9, #0
 8007ece:	d130      	bne.n	8007f32 <__gethex+0x326>
 8007ed0:	b127      	cbz	r7, 8007edc <__gethex+0x2d0>
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7fe fd04 	bl	80068e2 <__any_on>
 8007eda:	4681      	mov	r9, r0
 8007edc:	117a      	asrs	r2, r7, #5
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ee4:	f007 071f 	and.w	r7, r7, #31
 8007ee8:	40bb      	lsls	r3, r7
 8007eea:	4213      	tst	r3, r2
 8007eec:	4629      	mov	r1, r5
 8007eee:	4620      	mov	r0, r4
 8007ef0:	bf18      	it	ne
 8007ef2:	f049 0902 	orrne.w	r9, r9, #2
 8007ef6:	f7ff fe21 	bl	8007b3c <rshift>
 8007efa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007efe:	1b76      	subs	r6, r6, r5
 8007f00:	2502      	movs	r5, #2
 8007f02:	f1b9 0f00 	cmp.w	r9, #0
 8007f06:	d047      	beq.n	8007f98 <__gethex+0x38c>
 8007f08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d015      	beq.n	8007f3c <__gethex+0x330>
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d017      	beq.n	8007f44 <__gethex+0x338>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d109      	bne.n	8007f2c <__gethex+0x320>
 8007f18:	f019 0f02 	tst.w	r9, #2
 8007f1c:	d006      	beq.n	8007f2c <__gethex+0x320>
 8007f1e:	f8da 3000 	ldr.w	r3, [sl]
 8007f22:	ea49 0903 	orr.w	r9, r9, r3
 8007f26:	f019 0f01 	tst.w	r9, #1
 8007f2a:	d10e      	bne.n	8007f4a <__gethex+0x33e>
 8007f2c:	f045 0510 	orr.w	r5, r5, #16
 8007f30:	e032      	b.n	8007f98 <__gethex+0x38c>
 8007f32:	f04f 0901 	mov.w	r9, #1
 8007f36:	e7d1      	b.n	8007edc <__gethex+0x2d0>
 8007f38:	2501      	movs	r5, #1
 8007f3a:	e7e2      	b.n	8007f02 <__gethex+0x2f6>
 8007f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f3e:	f1c3 0301 	rsb	r3, r3, #1
 8007f42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f0      	beq.n	8007f2c <__gethex+0x320>
 8007f4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f4e:	f104 0314 	add.w	r3, r4, #20
 8007f52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f5a:	f04f 0c00 	mov.w	ip, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f68:	d01b      	beq.n	8007fa2 <__gethex+0x396>
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	6002      	str	r2, [r0, #0]
 8007f6e:	2d02      	cmp	r5, #2
 8007f70:	f104 0314 	add.w	r3, r4, #20
 8007f74:	d13c      	bne.n	8007ff0 <__gethex+0x3e4>
 8007f76:	f8d8 2000 	ldr.w	r2, [r8]
 8007f7a:	3a01      	subs	r2, #1
 8007f7c:	42b2      	cmp	r2, r6
 8007f7e:	d109      	bne.n	8007f94 <__gethex+0x388>
 8007f80:	1171      	asrs	r1, r6, #5
 8007f82:	2201      	movs	r2, #1
 8007f84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f88:	f006 061f 	and.w	r6, r6, #31
 8007f8c:	fa02 f606 	lsl.w	r6, r2, r6
 8007f90:	421e      	tst	r6, r3
 8007f92:	d13a      	bne.n	800800a <__gethex+0x3fe>
 8007f94:	f045 0520 	orr.w	r5, r5, #32
 8007f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f9a:	601c      	str	r4, [r3, #0]
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	601f      	str	r7, [r3, #0]
 8007fa0:	e6b0      	b.n	8007d04 <__gethex+0xf8>
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	f843 cc04 	str.w	ip, [r3, #-4]
 8007fa8:	d8d9      	bhi.n	8007f5e <__gethex+0x352>
 8007faa:	68a3      	ldr	r3, [r4, #8]
 8007fac:	459b      	cmp	fp, r3
 8007fae:	db17      	blt.n	8007fe0 <__gethex+0x3d4>
 8007fb0:	6861      	ldr	r1, [r4, #4]
 8007fb2:	9801      	ldr	r0, [sp, #4]
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	f7fe f803 	bl	8005fc0 <_Balloc>
 8007fba:	4681      	mov	r9, r0
 8007fbc:	b918      	cbnz	r0, 8007fc6 <__gethex+0x3ba>
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008028 <__gethex+0x41c>)
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	2184      	movs	r1, #132	@ 0x84
 8007fc4:	e6c5      	b.n	8007d52 <__gethex+0x146>
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	f104 010c 	add.w	r1, r4, #12
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f7ff fd6b 	bl	8007aac <memcpy>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	9801      	ldr	r0, [sp, #4]
 8007fda:	f7fe f831 	bl	8006040 <_Bfree>
 8007fde:	464c      	mov	r4, r9
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fe8:	6122      	str	r2, [r4, #16]
 8007fea:	2201      	movs	r2, #1
 8007fec:	615a      	str	r2, [r3, #20]
 8007fee:	e7be      	b.n	8007f6e <__gethex+0x362>
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	455a      	cmp	r2, fp
 8007ff4:	dd0b      	ble.n	800800e <__gethex+0x402>
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7ff fd9f 	bl	8007b3c <rshift>
 8007ffe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008002:	3701      	adds	r7, #1
 8008004:	42bb      	cmp	r3, r7
 8008006:	f6ff aee0 	blt.w	8007dca <__gethex+0x1be>
 800800a:	2501      	movs	r5, #1
 800800c:	e7c2      	b.n	8007f94 <__gethex+0x388>
 800800e:	f016 061f 	ands.w	r6, r6, #31
 8008012:	d0fa      	beq.n	800800a <__gethex+0x3fe>
 8008014:	4453      	add	r3, sl
 8008016:	f1c6 0620 	rsb	r6, r6, #32
 800801a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800801e:	f7fe f8c1 	bl	80061a4 <__hi0bits>
 8008022:	42b0      	cmp	r0, r6
 8008024:	dbe7      	blt.n	8007ff6 <__gethex+0x3ea>
 8008026:	e7f0      	b.n	800800a <__gethex+0x3fe>
 8008028:	080088c9 	.word	0x080088c9

0800802c <L_shift>:
 800802c:	f1c2 0208 	rsb	r2, r2, #8
 8008030:	0092      	lsls	r2, r2, #2
 8008032:	b570      	push	{r4, r5, r6, lr}
 8008034:	f1c2 0620 	rsb	r6, r2, #32
 8008038:	6843      	ldr	r3, [r0, #4]
 800803a:	6804      	ldr	r4, [r0, #0]
 800803c:	fa03 f506 	lsl.w	r5, r3, r6
 8008040:	432c      	orrs	r4, r5
 8008042:	40d3      	lsrs	r3, r2
 8008044:	6004      	str	r4, [r0, #0]
 8008046:	f840 3f04 	str.w	r3, [r0, #4]!
 800804a:	4288      	cmp	r0, r1
 800804c:	d3f4      	bcc.n	8008038 <L_shift+0xc>
 800804e:	bd70      	pop	{r4, r5, r6, pc}

08008050 <__match>:
 8008050:	b530      	push	{r4, r5, lr}
 8008052:	6803      	ldr	r3, [r0, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805a:	b914      	cbnz	r4, 8008062 <__match+0x12>
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	2001      	movs	r0, #1
 8008060:	bd30      	pop	{r4, r5, pc}
 8008062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008066:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800806a:	2d19      	cmp	r5, #25
 800806c:	bf98      	it	ls
 800806e:	3220      	addls	r2, #32
 8008070:	42a2      	cmp	r2, r4
 8008072:	d0f0      	beq.n	8008056 <__match+0x6>
 8008074:	2000      	movs	r0, #0
 8008076:	e7f3      	b.n	8008060 <__match+0x10>

08008078 <__hexnan>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	680b      	ldr	r3, [r1, #0]
 800807e:	6801      	ldr	r1, [r0, #0]
 8008080:	115e      	asrs	r6, r3, #5
 8008082:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008086:	f013 031f 	ands.w	r3, r3, #31
 800808a:	b087      	sub	sp, #28
 800808c:	bf18      	it	ne
 800808e:	3604      	addne	r6, #4
 8008090:	2500      	movs	r5, #0
 8008092:	1f37      	subs	r7, r6, #4
 8008094:	4682      	mov	sl, r0
 8008096:	4690      	mov	r8, r2
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	f846 5c04 	str.w	r5, [r6, #-4]
 800809e:	46b9      	mov	r9, r7
 80080a0:	463c      	mov	r4, r7
 80080a2:	9502      	str	r5, [sp, #8]
 80080a4:	46ab      	mov	fp, r5
 80080a6:	784a      	ldrb	r2, [r1, #1]
 80080a8:	1c4b      	adds	r3, r1, #1
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	b342      	cbz	r2, 8008100 <__hexnan+0x88>
 80080ae:	4610      	mov	r0, r2
 80080b0:	9105      	str	r1, [sp, #20]
 80080b2:	9204      	str	r2, [sp, #16]
 80080b4:	f7ff fd94 	bl	8007be0 <__hexdig_fun>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d151      	bne.n	8008160 <__hexnan+0xe8>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	9905      	ldr	r1, [sp, #20]
 80080c0:	2a20      	cmp	r2, #32
 80080c2:	d818      	bhi.n	80080f6 <__hexnan+0x7e>
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	459b      	cmp	fp, r3
 80080c8:	dd13      	ble.n	80080f2 <__hexnan+0x7a>
 80080ca:	454c      	cmp	r4, r9
 80080cc:	d206      	bcs.n	80080dc <__hexnan+0x64>
 80080ce:	2d07      	cmp	r5, #7
 80080d0:	dc04      	bgt.n	80080dc <__hexnan+0x64>
 80080d2:	462a      	mov	r2, r5
 80080d4:	4649      	mov	r1, r9
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7ff ffa8 	bl	800802c <L_shift>
 80080dc:	4544      	cmp	r4, r8
 80080de:	d952      	bls.n	8008186 <__hexnan+0x10e>
 80080e0:	2300      	movs	r3, #0
 80080e2:	f1a4 0904 	sub.w	r9, r4, #4
 80080e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ea:	f8cd b008 	str.w	fp, [sp, #8]
 80080ee:	464c      	mov	r4, r9
 80080f0:	461d      	mov	r5, r3
 80080f2:	9903      	ldr	r1, [sp, #12]
 80080f4:	e7d7      	b.n	80080a6 <__hexnan+0x2e>
 80080f6:	2a29      	cmp	r2, #41	@ 0x29
 80080f8:	d157      	bne.n	80081aa <__hexnan+0x132>
 80080fa:	3102      	adds	r1, #2
 80080fc:	f8ca 1000 	str.w	r1, [sl]
 8008100:	f1bb 0f00 	cmp.w	fp, #0
 8008104:	d051      	beq.n	80081aa <__hexnan+0x132>
 8008106:	454c      	cmp	r4, r9
 8008108:	d206      	bcs.n	8008118 <__hexnan+0xa0>
 800810a:	2d07      	cmp	r5, #7
 800810c:	dc04      	bgt.n	8008118 <__hexnan+0xa0>
 800810e:	462a      	mov	r2, r5
 8008110:	4649      	mov	r1, r9
 8008112:	4620      	mov	r0, r4
 8008114:	f7ff ff8a 	bl	800802c <L_shift>
 8008118:	4544      	cmp	r4, r8
 800811a:	d936      	bls.n	800818a <__hexnan+0x112>
 800811c:	f1a8 0204 	sub.w	r2, r8, #4
 8008120:	4623      	mov	r3, r4
 8008122:	f853 1b04 	ldr.w	r1, [r3], #4
 8008126:	f842 1f04 	str.w	r1, [r2, #4]!
 800812a:	429f      	cmp	r7, r3
 800812c:	d2f9      	bcs.n	8008122 <__hexnan+0xaa>
 800812e:	1b3b      	subs	r3, r7, r4
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3304      	adds	r3, #4
 8008136:	3401      	adds	r4, #1
 8008138:	3e03      	subs	r6, #3
 800813a:	42b4      	cmp	r4, r6
 800813c:	bf88      	it	hi
 800813e:	2304      	movhi	r3, #4
 8008140:	4443      	add	r3, r8
 8008142:	2200      	movs	r2, #0
 8008144:	f843 2b04 	str.w	r2, [r3], #4
 8008148:	429f      	cmp	r7, r3
 800814a:	d2fb      	bcs.n	8008144 <__hexnan+0xcc>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	b91b      	cbnz	r3, 8008158 <__hexnan+0xe0>
 8008150:	4547      	cmp	r7, r8
 8008152:	d128      	bne.n	80081a6 <__hexnan+0x12e>
 8008154:	2301      	movs	r3, #1
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	2005      	movs	r0, #5
 800815a:	b007      	add	sp, #28
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	3501      	adds	r5, #1
 8008162:	2d08      	cmp	r5, #8
 8008164:	f10b 0b01 	add.w	fp, fp, #1
 8008168:	dd06      	ble.n	8008178 <__hexnan+0x100>
 800816a:	4544      	cmp	r4, r8
 800816c:	d9c1      	bls.n	80080f2 <__hexnan+0x7a>
 800816e:	2300      	movs	r3, #0
 8008170:	f844 3c04 	str.w	r3, [r4, #-4]
 8008174:	2501      	movs	r5, #1
 8008176:	3c04      	subs	r4, #4
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	f000 000f 	and.w	r0, r0, #15
 800817e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	e7b5      	b.n	80080f2 <__hexnan+0x7a>
 8008186:	2508      	movs	r5, #8
 8008188:	e7b3      	b.n	80080f2 <__hexnan+0x7a>
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0dd      	beq.n	800814c <__hexnan+0xd4>
 8008190:	f1c3 0320 	rsb	r3, r3, #32
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	40da      	lsrs	r2, r3
 800819a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800819e:	4013      	ands	r3, r2
 80081a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80081a4:	e7d2      	b.n	800814c <__hexnan+0xd4>
 80081a6:	3f04      	subs	r7, #4
 80081a8:	e7d0      	b.n	800814c <__hexnan+0xd4>
 80081aa:	2004      	movs	r0, #4
 80081ac:	e7d5      	b.n	800815a <__hexnan+0xe2>

080081ae <__ascii_mbtowc>:
 80081ae:	b082      	sub	sp, #8
 80081b0:	b901      	cbnz	r1, 80081b4 <__ascii_mbtowc+0x6>
 80081b2:	a901      	add	r1, sp, #4
 80081b4:	b142      	cbz	r2, 80081c8 <__ascii_mbtowc+0x1a>
 80081b6:	b14b      	cbz	r3, 80081cc <__ascii_mbtowc+0x1e>
 80081b8:	7813      	ldrb	r3, [r2, #0]
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	1e10      	subs	r0, r2, #0
 80081c0:	bf18      	it	ne
 80081c2:	2001      	movne	r0, #1
 80081c4:	b002      	add	sp, #8
 80081c6:	4770      	bx	lr
 80081c8:	4610      	mov	r0, r2
 80081ca:	e7fb      	b.n	80081c4 <__ascii_mbtowc+0x16>
 80081cc:	f06f 0001 	mvn.w	r0, #1
 80081d0:	e7f8      	b.n	80081c4 <__ascii_mbtowc+0x16>

080081d2 <_realloc_r>:
 80081d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d6:	4680      	mov	r8, r0
 80081d8:	4615      	mov	r5, r2
 80081da:	460c      	mov	r4, r1
 80081dc:	b921      	cbnz	r1, 80081e8 <_realloc_r+0x16>
 80081de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e2:	4611      	mov	r1, r2
 80081e4:	f7fd be60 	b.w	8005ea8 <_malloc_r>
 80081e8:	b92a      	cbnz	r2, 80081f6 <_realloc_r+0x24>
 80081ea:	f7fd fde9 	bl	8005dc0 <_free_r>
 80081ee:	2400      	movs	r4, #0
 80081f0:	4620      	mov	r0, r4
 80081f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f6:	f000 f840 	bl	800827a <_malloc_usable_size_r>
 80081fa:	4285      	cmp	r5, r0
 80081fc:	4606      	mov	r6, r0
 80081fe:	d802      	bhi.n	8008206 <_realloc_r+0x34>
 8008200:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008204:	d8f4      	bhi.n	80081f0 <_realloc_r+0x1e>
 8008206:	4629      	mov	r1, r5
 8008208:	4640      	mov	r0, r8
 800820a:	f7fd fe4d 	bl	8005ea8 <_malloc_r>
 800820e:	4607      	mov	r7, r0
 8008210:	2800      	cmp	r0, #0
 8008212:	d0ec      	beq.n	80081ee <_realloc_r+0x1c>
 8008214:	42b5      	cmp	r5, r6
 8008216:	462a      	mov	r2, r5
 8008218:	4621      	mov	r1, r4
 800821a:	bf28      	it	cs
 800821c:	4632      	movcs	r2, r6
 800821e:	f7ff fc45 	bl	8007aac <memcpy>
 8008222:	4621      	mov	r1, r4
 8008224:	4640      	mov	r0, r8
 8008226:	f7fd fdcb 	bl	8005dc0 <_free_r>
 800822a:	463c      	mov	r4, r7
 800822c:	e7e0      	b.n	80081f0 <_realloc_r+0x1e>

0800822e <__ascii_wctomb>:
 800822e:	4603      	mov	r3, r0
 8008230:	4608      	mov	r0, r1
 8008232:	b141      	cbz	r1, 8008246 <__ascii_wctomb+0x18>
 8008234:	2aff      	cmp	r2, #255	@ 0xff
 8008236:	d904      	bls.n	8008242 <__ascii_wctomb+0x14>
 8008238:	228a      	movs	r2, #138	@ 0x8a
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	4770      	bx	lr
 8008242:	700a      	strb	r2, [r1, #0]
 8008244:	2001      	movs	r0, #1
 8008246:	4770      	bx	lr

08008248 <fiprintf>:
 8008248:	b40e      	push	{r1, r2, r3}
 800824a:	b503      	push	{r0, r1, lr}
 800824c:	4601      	mov	r1, r0
 800824e:	ab03      	add	r3, sp, #12
 8008250:	4805      	ldr	r0, [pc, #20]	@ (8008268 <fiprintf+0x20>)
 8008252:	f853 2b04 	ldr.w	r2, [r3], #4
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	f000 f83f 	bl	80082dc <_vfiprintf_r>
 800825e:	b002      	add	sp, #8
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	2000001c 	.word	0x2000001c

0800826c <abort>:
 800826c:	b508      	push	{r3, lr}
 800826e:	2006      	movs	r0, #6
 8008270:	f000 fa08 	bl	8008684 <raise>
 8008274:	2001      	movs	r0, #1
 8008276:	f7f9 fd75 	bl	8001d64 <_exit>

0800827a <_malloc_usable_size_r>:
 800827a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827e:	1f18      	subs	r0, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfbc      	itt	lt
 8008284:	580b      	ldrlt	r3, [r1, r0]
 8008286:	18c0      	addlt	r0, r0, r3
 8008288:	4770      	bx	lr

0800828a <__sfputc_r>:
 800828a:	6893      	ldr	r3, [r2, #8]
 800828c:	3b01      	subs	r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	b410      	push	{r4}
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	da08      	bge.n	80082a8 <__sfputc_r+0x1e>
 8008296:	6994      	ldr	r4, [r2, #24]
 8008298:	42a3      	cmp	r3, r4
 800829a:	db01      	blt.n	80082a0 <__sfputc_r+0x16>
 800829c:	290a      	cmp	r1, #10
 800829e:	d103      	bne.n	80082a8 <__sfputc_r+0x1e>
 80082a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a4:	f000 b932 	b.w	800850c <__swbuf_r>
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	1c58      	adds	r0, r3, #1
 80082ac:	6010      	str	r0, [r2, #0]
 80082ae:	7019      	strb	r1, [r3, #0]
 80082b0:	4608      	mov	r0, r1
 80082b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <__sfputs_r>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	4606      	mov	r6, r0
 80082bc:	460f      	mov	r7, r1
 80082be:	4614      	mov	r4, r2
 80082c0:	18d5      	adds	r5, r2, r3
 80082c2:	42ac      	cmp	r4, r5
 80082c4:	d101      	bne.n	80082ca <__sfputs_r+0x12>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e007      	b.n	80082da <__sfputs_r+0x22>
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	463a      	mov	r2, r7
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7ff ffda 	bl	800828a <__sfputc_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d1f3      	bne.n	80082c2 <__sfputs_r+0xa>
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082dc <_vfiprintf_r>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	460d      	mov	r5, r1
 80082e2:	b09d      	sub	sp, #116	@ 0x74
 80082e4:	4614      	mov	r4, r2
 80082e6:	4698      	mov	r8, r3
 80082e8:	4606      	mov	r6, r0
 80082ea:	b118      	cbz	r0, 80082f4 <_vfiprintf_r+0x18>
 80082ec:	6a03      	ldr	r3, [r0, #32]
 80082ee:	b90b      	cbnz	r3, 80082f4 <_vfiprintf_r+0x18>
 80082f0:	f7fc fdf8 	bl	8004ee4 <__sinit>
 80082f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082f6:	07d9      	lsls	r1, r3, #31
 80082f8:	d405      	bmi.n	8008306 <_vfiprintf_r+0x2a>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	059a      	lsls	r2, r3, #22
 80082fe:	d402      	bmi.n	8008306 <_vfiprintf_r+0x2a>
 8008300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008302:	f7fc ff06 	bl	8005112 <__retarget_lock_acquire_recursive>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	071b      	lsls	r3, r3, #28
 800830a:	d501      	bpl.n	8008310 <_vfiprintf_r+0x34>
 800830c:	692b      	ldr	r3, [r5, #16]
 800830e:	b99b      	cbnz	r3, 8008338 <_vfiprintf_r+0x5c>
 8008310:	4629      	mov	r1, r5
 8008312:	4630      	mov	r0, r6
 8008314:	f000 f938 	bl	8008588 <__swsetup_r>
 8008318:	b170      	cbz	r0, 8008338 <_vfiprintf_r+0x5c>
 800831a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800831c:	07dc      	lsls	r4, r3, #31
 800831e:	d504      	bpl.n	800832a <_vfiprintf_r+0x4e>
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	b01d      	add	sp, #116	@ 0x74
 8008326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	0598      	lsls	r0, r3, #22
 800832e:	d4f7      	bmi.n	8008320 <_vfiprintf_r+0x44>
 8008330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008332:	f7fc feef 	bl	8005114 <__retarget_lock_release_recursive>
 8008336:	e7f3      	b.n	8008320 <_vfiprintf_r+0x44>
 8008338:	2300      	movs	r3, #0
 800833a:	9309      	str	r3, [sp, #36]	@ 0x24
 800833c:	2320      	movs	r3, #32
 800833e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008342:	f8cd 800c 	str.w	r8, [sp, #12]
 8008346:	2330      	movs	r3, #48	@ 0x30
 8008348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084f8 <_vfiprintf_r+0x21c>
 800834c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008350:	f04f 0901 	mov.w	r9, #1
 8008354:	4623      	mov	r3, r4
 8008356:	469a      	mov	sl, r3
 8008358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800835c:	b10a      	cbz	r2, 8008362 <_vfiprintf_r+0x86>
 800835e:	2a25      	cmp	r2, #37	@ 0x25
 8008360:	d1f9      	bne.n	8008356 <_vfiprintf_r+0x7a>
 8008362:	ebba 0b04 	subs.w	fp, sl, r4
 8008366:	d00b      	beq.n	8008380 <_vfiprintf_r+0xa4>
 8008368:	465b      	mov	r3, fp
 800836a:	4622      	mov	r2, r4
 800836c:	4629      	mov	r1, r5
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ffa2 	bl	80082b8 <__sfputs_r>
 8008374:	3001      	adds	r0, #1
 8008376:	f000 80a7 	beq.w	80084c8 <_vfiprintf_r+0x1ec>
 800837a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800837c:	445a      	add	r2, fp
 800837e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008380:	f89a 3000 	ldrb.w	r3, [sl]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 809f 	beq.w	80084c8 <_vfiprintf_r+0x1ec>
 800838a:	2300      	movs	r3, #0
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008394:	f10a 0a01 	add.w	sl, sl, #1
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083a2:	4654      	mov	r4, sl
 80083a4:	2205      	movs	r2, #5
 80083a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083aa:	4853      	ldr	r0, [pc, #332]	@ (80084f8 <_vfiprintf_r+0x21c>)
 80083ac:	f7f7 ff10 	bl	80001d0 <memchr>
 80083b0:	9a04      	ldr	r2, [sp, #16]
 80083b2:	b9d8      	cbnz	r0, 80083ec <_vfiprintf_r+0x110>
 80083b4:	06d1      	lsls	r1, r2, #27
 80083b6:	bf44      	itt	mi
 80083b8:	2320      	movmi	r3, #32
 80083ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083be:	0713      	lsls	r3, r2, #28
 80083c0:	bf44      	itt	mi
 80083c2:	232b      	movmi	r3, #43	@ 0x2b
 80083c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c8:	f89a 3000 	ldrb.w	r3, [sl]
 80083cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ce:	d015      	beq.n	80083fc <_vfiprintf_r+0x120>
 80083d0:	9a07      	ldr	r2, [sp, #28]
 80083d2:	4654      	mov	r4, sl
 80083d4:	2000      	movs	r0, #0
 80083d6:	f04f 0c0a 	mov.w	ip, #10
 80083da:	4621      	mov	r1, r4
 80083dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e0:	3b30      	subs	r3, #48	@ 0x30
 80083e2:	2b09      	cmp	r3, #9
 80083e4:	d94b      	bls.n	800847e <_vfiprintf_r+0x1a2>
 80083e6:	b1b0      	cbz	r0, 8008416 <_vfiprintf_r+0x13a>
 80083e8:	9207      	str	r2, [sp, #28]
 80083ea:	e014      	b.n	8008416 <_vfiprintf_r+0x13a>
 80083ec:	eba0 0308 	sub.w	r3, r0, r8
 80083f0:	fa09 f303 	lsl.w	r3, r9, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	46a2      	mov	sl, r4
 80083fa:	e7d2      	b.n	80083a2 <_vfiprintf_r+0xc6>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	1d19      	adds	r1, r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	9103      	str	r1, [sp, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	bfbb      	ittet	lt
 8008408:	425b      	neglt	r3, r3
 800840a:	f042 0202 	orrlt.w	r2, r2, #2
 800840e:	9307      	strge	r3, [sp, #28]
 8008410:	9307      	strlt	r3, [sp, #28]
 8008412:	bfb8      	it	lt
 8008414:	9204      	strlt	r2, [sp, #16]
 8008416:	7823      	ldrb	r3, [r4, #0]
 8008418:	2b2e      	cmp	r3, #46	@ 0x2e
 800841a:	d10a      	bne.n	8008432 <_vfiprintf_r+0x156>
 800841c:	7863      	ldrb	r3, [r4, #1]
 800841e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008420:	d132      	bne.n	8008488 <_vfiprintf_r+0x1ac>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	1d1a      	adds	r2, r3, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	9203      	str	r2, [sp, #12]
 800842a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800842e:	3402      	adds	r4, #2
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008508 <_vfiprintf_r+0x22c>
 8008436:	7821      	ldrb	r1, [r4, #0]
 8008438:	2203      	movs	r2, #3
 800843a:	4650      	mov	r0, sl
 800843c:	f7f7 fec8 	bl	80001d0 <memchr>
 8008440:	b138      	cbz	r0, 8008452 <_vfiprintf_r+0x176>
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	eba0 000a 	sub.w	r0, r0, sl
 8008448:	2240      	movs	r2, #64	@ 0x40
 800844a:	4082      	lsls	r2, r0
 800844c:	4313      	orrs	r3, r2
 800844e:	3401      	adds	r4, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008456:	4829      	ldr	r0, [pc, #164]	@ (80084fc <_vfiprintf_r+0x220>)
 8008458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800845c:	2206      	movs	r2, #6
 800845e:	f7f7 feb7 	bl	80001d0 <memchr>
 8008462:	2800      	cmp	r0, #0
 8008464:	d03f      	beq.n	80084e6 <_vfiprintf_r+0x20a>
 8008466:	4b26      	ldr	r3, [pc, #152]	@ (8008500 <_vfiprintf_r+0x224>)
 8008468:	bb1b      	cbnz	r3, 80084b2 <_vfiprintf_r+0x1d6>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	3307      	adds	r3, #7
 800846e:	f023 0307 	bic.w	r3, r3, #7
 8008472:	3308      	adds	r3, #8
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008478:	443b      	add	r3, r7
 800847a:	9309      	str	r3, [sp, #36]	@ 0x24
 800847c:	e76a      	b.n	8008354 <_vfiprintf_r+0x78>
 800847e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008482:	460c      	mov	r4, r1
 8008484:	2001      	movs	r0, #1
 8008486:	e7a8      	b.n	80083da <_vfiprintf_r+0xfe>
 8008488:	2300      	movs	r3, #0
 800848a:	3401      	adds	r4, #1
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	4619      	mov	r1, r3
 8008490:	f04f 0c0a 	mov.w	ip, #10
 8008494:	4620      	mov	r0, r4
 8008496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800849a:	3a30      	subs	r2, #48	@ 0x30
 800849c:	2a09      	cmp	r2, #9
 800849e:	d903      	bls.n	80084a8 <_vfiprintf_r+0x1cc>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0c6      	beq.n	8008432 <_vfiprintf_r+0x156>
 80084a4:	9105      	str	r1, [sp, #20]
 80084a6:	e7c4      	b.n	8008432 <_vfiprintf_r+0x156>
 80084a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ac:	4604      	mov	r4, r0
 80084ae:	2301      	movs	r3, #1
 80084b0:	e7f0      	b.n	8008494 <_vfiprintf_r+0x1b8>
 80084b2:	ab03      	add	r3, sp, #12
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	462a      	mov	r2, r5
 80084b8:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <_vfiprintf_r+0x228>)
 80084ba:	a904      	add	r1, sp, #16
 80084bc:	4630      	mov	r0, r6
 80084be:	f7fb feb9 	bl	8004234 <_printf_float>
 80084c2:	4607      	mov	r7, r0
 80084c4:	1c78      	adds	r0, r7, #1
 80084c6:	d1d6      	bne.n	8008476 <_vfiprintf_r+0x19a>
 80084c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ca:	07d9      	lsls	r1, r3, #31
 80084cc:	d405      	bmi.n	80084da <_vfiprintf_r+0x1fe>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d402      	bmi.n	80084da <_vfiprintf_r+0x1fe>
 80084d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084d6:	f7fc fe1d 	bl	8005114 <__retarget_lock_release_recursive>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	065b      	lsls	r3, r3, #25
 80084de:	f53f af1f 	bmi.w	8008320 <_vfiprintf_r+0x44>
 80084e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e4:	e71e      	b.n	8008324 <_vfiprintf_r+0x48>
 80084e6:	ab03      	add	r3, sp, #12
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	462a      	mov	r2, r5
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <_vfiprintf_r+0x228>)
 80084ee:	a904      	add	r1, sp, #16
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7fc f937 	bl	8004764 <_printf_i>
 80084f6:	e7e4      	b.n	80084c2 <_vfiprintf_r+0x1e6>
 80084f8:	08008b89 	.word	0x08008b89
 80084fc:	08008b93 	.word	0x08008b93
 8008500:	08004235 	.word	0x08004235
 8008504:	080082b9 	.word	0x080082b9
 8008508:	08008b8f 	.word	0x08008b8f

0800850c <__swbuf_r>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	460e      	mov	r6, r1
 8008510:	4614      	mov	r4, r2
 8008512:	4605      	mov	r5, r0
 8008514:	b118      	cbz	r0, 800851e <__swbuf_r+0x12>
 8008516:	6a03      	ldr	r3, [r0, #32]
 8008518:	b90b      	cbnz	r3, 800851e <__swbuf_r+0x12>
 800851a:	f7fc fce3 	bl	8004ee4 <__sinit>
 800851e:	69a3      	ldr	r3, [r4, #24]
 8008520:	60a3      	str	r3, [r4, #8]
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	071a      	lsls	r2, r3, #28
 8008526:	d501      	bpl.n	800852c <__swbuf_r+0x20>
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	b943      	cbnz	r3, 800853e <__swbuf_r+0x32>
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f000 f82a 	bl	8008588 <__swsetup_r>
 8008534:	b118      	cbz	r0, 800853e <__swbuf_r+0x32>
 8008536:	f04f 37ff 	mov.w	r7, #4294967295
 800853a:	4638      	mov	r0, r7
 800853c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	6922      	ldr	r2, [r4, #16]
 8008542:	1a98      	subs	r0, r3, r2
 8008544:	6963      	ldr	r3, [r4, #20]
 8008546:	b2f6      	uxtb	r6, r6
 8008548:	4283      	cmp	r3, r0
 800854a:	4637      	mov	r7, r6
 800854c:	dc05      	bgt.n	800855a <__swbuf_r+0x4e>
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f7ff fa47 	bl	80079e4 <_fflush_r>
 8008556:	2800      	cmp	r0, #0
 8008558:	d1ed      	bne.n	8008536 <__swbuf_r+0x2a>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	3b01      	subs	r3, #1
 800855e:	60a3      	str	r3, [r4, #8]
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	701e      	strb	r6, [r3, #0]
 8008568:	6962      	ldr	r2, [r4, #20]
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	429a      	cmp	r2, r3
 800856e:	d004      	beq.n	800857a <__swbuf_r+0x6e>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d5e1      	bpl.n	800853a <__swbuf_r+0x2e>
 8008576:	2e0a      	cmp	r6, #10
 8008578:	d1df      	bne.n	800853a <__swbuf_r+0x2e>
 800857a:	4621      	mov	r1, r4
 800857c:	4628      	mov	r0, r5
 800857e:	f7ff fa31 	bl	80079e4 <_fflush_r>
 8008582:	2800      	cmp	r0, #0
 8008584:	d0d9      	beq.n	800853a <__swbuf_r+0x2e>
 8008586:	e7d6      	b.n	8008536 <__swbuf_r+0x2a>

08008588 <__swsetup_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4b29      	ldr	r3, [pc, #164]	@ (8008630 <__swsetup_r+0xa8>)
 800858c:	4605      	mov	r5, r0
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	460c      	mov	r4, r1
 8008592:	b118      	cbz	r0, 800859c <__swsetup_r+0x14>
 8008594:	6a03      	ldr	r3, [r0, #32]
 8008596:	b90b      	cbnz	r3, 800859c <__swsetup_r+0x14>
 8008598:	f7fc fca4 	bl	8004ee4 <__sinit>
 800859c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a0:	0719      	lsls	r1, r3, #28
 80085a2:	d422      	bmi.n	80085ea <__swsetup_r+0x62>
 80085a4:	06da      	lsls	r2, r3, #27
 80085a6:	d407      	bmi.n	80085b8 <__swsetup_r+0x30>
 80085a8:	2209      	movs	r2, #9
 80085aa:	602a      	str	r2, [r5, #0]
 80085ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	e033      	b.n	8008620 <__swsetup_r+0x98>
 80085b8:	0758      	lsls	r0, r3, #29
 80085ba:	d512      	bpl.n	80085e2 <__swsetup_r+0x5a>
 80085bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085be:	b141      	cbz	r1, 80085d2 <__swsetup_r+0x4a>
 80085c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085c4:	4299      	cmp	r1, r3
 80085c6:	d002      	beq.n	80085ce <__swsetup_r+0x46>
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7fd fbf9 	bl	8005dc0 <_free_r>
 80085ce:	2300      	movs	r3, #0
 80085d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	2300      	movs	r3, #0
 80085dc:	6063      	str	r3, [r4, #4]
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f043 0308 	orr.w	r3, r3, #8
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	b94b      	cbnz	r3, 8008602 <__swsetup_r+0x7a>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f8:	d003      	beq.n	8008602 <__swsetup_r+0x7a>
 80085fa:	4621      	mov	r1, r4
 80085fc:	4628      	mov	r0, r5
 80085fe:	f000 f883 	bl	8008708 <__smakebuf_r>
 8008602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008606:	f013 0201 	ands.w	r2, r3, #1
 800860a:	d00a      	beq.n	8008622 <__swsetup_r+0x9a>
 800860c:	2200      	movs	r2, #0
 800860e:	60a2      	str	r2, [r4, #8]
 8008610:	6962      	ldr	r2, [r4, #20]
 8008612:	4252      	negs	r2, r2
 8008614:	61a2      	str	r2, [r4, #24]
 8008616:	6922      	ldr	r2, [r4, #16]
 8008618:	b942      	cbnz	r2, 800862c <__swsetup_r+0xa4>
 800861a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800861e:	d1c5      	bne.n	80085ac <__swsetup_r+0x24>
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	0799      	lsls	r1, r3, #30
 8008624:	bf58      	it	pl
 8008626:	6962      	ldrpl	r2, [r4, #20]
 8008628:	60a2      	str	r2, [r4, #8]
 800862a:	e7f4      	b.n	8008616 <__swsetup_r+0x8e>
 800862c:	2000      	movs	r0, #0
 800862e:	e7f7      	b.n	8008620 <__swsetup_r+0x98>
 8008630:	2000001c 	.word	0x2000001c

08008634 <_raise_r>:
 8008634:	291f      	cmp	r1, #31
 8008636:	b538      	push	{r3, r4, r5, lr}
 8008638:	4605      	mov	r5, r0
 800863a:	460c      	mov	r4, r1
 800863c:	d904      	bls.n	8008648 <_raise_r+0x14>
 800863e:	2316      	movs	r3, #22
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	f04f 30ff 	mov.w	r0, #4294967295
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800864a:	b112      	cbz	r2, 8008652 <_raise_r+0x1e>
 800864c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008650:	b94b      	cbnz	r3, 8008666 <_raise_r+0x32>
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f830 	bl	80086b8 <_getpid_r>
 8008658:	4622      	mov	r2, r4
 800865a:	4601      	mov	r1, r0
 800865c:	4628      	mov	r0, r5
 800865e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008662:	f000 b817 	b.w	8008694 <_kill_r>
 8008666:	2b01      	cmp	r3, #1
 8008668:	d00a      	beq.n	8008680 <_raise_r+0x4c>
 800866a:	1c59      	adds	r1, r3, #1
 800866c:	d103      	bne.n	8008676 <_raise_r+0x42>
 800866e:	2316      	movs	r3, #22
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	2001      	movs	r0, #1
 8008674:	e7e7      	b.n	8008646 <_raise_r+0x12>
 8008676:	2100      	movs	r1, #0
 8008678:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800867c:	4620      	mov	r0, r4
 800867e:	4798      	blx	r3
 8008680:	2000      	movs	r0, #0
 8008682:	e7e0      	b.n	8008646 <_raise_r+0x12>

08008684 <raise>:
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <raise+0xc>)
 8008686:	4601      	mov	r1, r0
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f7ff bfd3 	b.w	8008634 <_raise_r>
 800868e:	bf00      	nop
 8008690:	2000001c 	.word	0x2000001c

08008694 <_kill_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	@ (80086b4 <_kill_r+0x20>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	4611      	mov	r1, r2
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f7f9 fb4f 	bl	8001d44 <_kill>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d102      	bne.n	80086b0 <_kill_r+0x1c>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b103      	cbz	r3, 80086b0 <_kill_r+0x1c>
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	bf00      	nop
 80086b4:	2000040c 	.word	0x2000040c

080086b8 <_getpid_r>:
 80086b8:	f7f9 bb3c 	b.w	8001d34 <_getpid>

080086bc <__swhatbuf_r>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	460c      	mov	r4, r1
 80086c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c4:	2900      	cmp	r1, #0
 80086c6:	b096      	sub	sp, #88	@ 0x58
 80086c8:	4615      	mov	r5, r2
 80086ca:	461e      	mov	r6, r3
 80086cc:	da0d      	bge.n	80086ea <__swhatbuf_r+0x2e>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086d4:	f04f 0100 	mov.w	r1, #0
 80086d8:	bf14      	ite	ne
 80086da:	2340      	movne	r3, #64	@ 0x40
 80086dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086e0:	2000      	movs	r0, #0
 80086e2:	6031      	str	r1, [r6, #0]
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	b016      	add	sp, #88	@ 0x58
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	466a      	mov	r2, sp
 80086ec:	f000 f848 	bl	8008780 <_fstat_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dbec      	blt.n	80086ce <__swhatbuf_r+0x12>
 80086f4:	9901      	ldr	r1, [sp, #4]
 80086f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086fe:	4259      	negs	r1, r3
 8008700:	4159      	adcs	r1, r3
 8008702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008706:	e7eb      	b.n	80086e0 <__swhatbuf_r+0x24>

08008708 <__smakebuf_r>:
 8008708:	898b      	ldrh	r3, [r1, #12]
 800870a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870c:	079d      	lsls	r5, r3, #30
 800870e:	4606      	mov	r6, r0
 8008710:	460c      	mov	r4, r1
 8008712:	d507      	bpl.n	8008724 <__smakebuf_r+0x1c>
 8008714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	2301      	movs	r3, #1
 800871e:	6163      	str	r3, [r4, #20]
 8008720:	b003      	add	sp, #12
 8008722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008724:	ab01      	add	r3, sp, #4
 8008726:	466a      	mov	r2, sp
 8008728:	f7ff ffc8 	bl	80086bc <__swhatbuf_r>
 800872c:	9f00      	ldr	r7, [sp, #0]
 800872e:	4605      	mov	r5, r0
 8008730:	4639      	mov	r1, r7
 8008732:	4630      	mov	r0, r6
 8008734:	f7fd fbb8 	bl	8005ea8 <_malloc_r>
 8008738:	b948      	cbnz	r0, 800874e <__smakebuf_r+0x46>
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	059a      	lsls	r2, r3, #22
 8008740:	d4ee      	bmi.n	8008720 <__smakebuf_r+0x18>
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	f043 0302 	orr.w	r3, r3, #2
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	e7e2      	b.n	8008714 <__smakebuf_r+0xc>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	6020      	str	r0, [r4, #0]
 8008752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800875e:	b15b      	cbz	r3, 8008778 <__smakebuf_r+0x70>
 8008760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f81d 	bl	80087a4 <_isatty_r>
 800876a:	b128      	cbz	r0, 8008778 <__smakebuf_r+0x70>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	431d      	orrs	r5, r3
 800877c:	81a5      	strh	r5, [r4, #12]
 800877e:	e7cf      	b.n	8008720 <__smakebuf_r+0x18>

08008780 <_fstat_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	@ (80087a0 <_fstat_r+0x20>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	f7f9 fb39 	bl	8001e04 <_fstat>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d102      	bne.n	800879c <_fstat_r+0x1c>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	b103      	cbz	r3, 800879c <_fstat_r+0x1c>
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	bf00      	nop
 80087a0:	2000040c 	.word	0x2000040c

080087a4 <_isatty_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d06      	ldr	r5, [pc, #24]	@ (80087c0 <_isatty_r+0x1c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	f7f9 fb38 	bl	8001e24 <_isatty>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_isatty_r+0x1a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_isatty_r+0x1a>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	2000040c 	.word	0x2000040c

080087c4 <_init>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr

080087d0 <_fini>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr
